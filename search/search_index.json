{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"modules/","title":"Modules","text":"Directory table of contents <ul> <li>ammo</li> <li>core</li> <li>matter</li> <li>pixi</li> <li>rapier2d</li> <li>rapier3d</li> <li>three</li> </ul> All modules <ul> <li>index</li> <li>ammo/ammo-debugger.ts</li> <li>ammo/ammo-factory.ts</li> <li>ammo/ammo-loader.ts</li> <li>ammo/ammo-utils.ts</li> <li>ammo/components/ammo-body.component.ts</li> <li>ammo/components/ammo-raycast-vehicle.component.ts</li> <li>ammo/components/ammo-rigid-body.component.ts</li> <li>ammo/components/ammo-trigger.component.ts</li> <li>ammo/components/ammo-world.component.ts</li> <li>core/2d/factories.ts</li> <li>core/2d/gg-2d-world.ts</li> <li>core/2d/index.ts</li> <li>core/2d/components/physics/i-physics-world-2d.component.ts</li> <li>core/2d/components/physics/i-rigid-body-2d.component.ts</li> <li>core/2d/components/physics/i-trigger-2d.component.ts</li> <li>core/2d/components/rendering/i-display-object-2d.component.ts</li> <li>core/2d/components/rendering/i-renderer-2d.component.ts</li> <li>core/2d/components/rendering/i-visual-scene-2d.component.ts</li> <li>core/2d/entities/entity-2d.ts</li> <li>core/2d/entities/i-renderable-2d.entity.ts</li> <li>core/2d/entities/renderer-2d.entity.ts</li> <li>core/2d/entities/trigger-2d.entity.ts</li> <li>core/2d/entities/controllers/entity-2d-positioning.animator.ts</li> <li>core/2d/interfaces/i-positionable-2d.ts</li> <li>core/2d/models/body-options.ts</li> <li>core/2d/models/shapes.ts</li> <li>core/3d/factories.ts</li> <li>core/3d/gg-3d-world.ts</li> <li>core/3d/index.ts</li> <li>core/3d/loader.ts</li> <li>core/3d/loaders.ts</li> <li>core/3d/components/physics/i-physics-world-3d.component.ts</li> <li>core/3d/components/physics/i-raycast-vehicle.component.ts</li> <li>core/3d/components/physics/i-rigid-body-3d.component.ts</li> <li>core/3d/components/physics/i-trigger-3d.component.ts</li> <li>core/3d/components/rendering/i-camera.component.ts</li> <li>core/3d/components/rendering/i-display-object-3d.component.ts</li> <li>core/3d/components/rendering/i-renderer-3d.component.ts</li> <li>core/3d/components/rendering/i-visual-scene-3d.component.ts</li> <li>core/3d/entities/entity-3d.ts</li> <li>core/3d/entities/i-renderable-3d.entity.ts</li> <li>core/3d/entities/map-graph-3d.entity.ts</li> <li>core/3d/entities/raycast-vehicle-3d.entity.ts</li> <li>core/3d/entities/renderer-3d.entity.ts</li> <li>core/3d/entities/trigger-3d.entity.ts</li> <li>core/3d/entities/controllers/animators/camera-3d.animator.ts</li> <li>core/3d/entities/controllers/animators/entity-3d-positioning.animator.ts</li> <li>core/3d/entities/controllers/input/car-keyboard-handling.controller.ts</li> <li>core/3d/entities/controllers/input/free-camera.controller.ts</li> <li>core/3d/entities/controllers/input/gg-car-keyboard-handling.controller.ts</li> <li>core/3d/entities/controllers/input/orbit-camera.controller.ts</li> <li>core/3d/entities/gg-car/gg-car.entity.ts</li> <li>core/3d/interfaces/i-positionable-3d.ts</li> <li>core/3d/models/body-options.ts</li> <li>core/3d/models/gg-meta.ts</li> <li>core/3d/models/shapes.ts</li> <li>core/base/gg-world.ts</li> <li>core/base/index.ts</li> <li>core/base/clock/global-clock.ts</li> <li>core/base/clock/i-clock.ts</li> <li>core/base/clock/pausable-clock.ts</li> <li>core/base/components/i-component.ts</li> <li>core/base/components/i-world-component.ts</li> <li>core/base/components/physics/i-body.component.ts</li> <li>core/base/components/physics/i-physics-world.component.ts</li> <li>core/base/components/physics/i-rigid-body.component.ts</li> <li>core/base/components/physics/i-trigger.component.ts</li> <li>core/base/components/rendering/i-display-object.component.ts</li> <li>core/base/components/rendering/i-renderer.component.ts</li> <li>core/base/components/rendering/i-visual-scene.component.ts</li> <li>core/base/data-structures/graph.ts</li> <li>core/base/entities/i-entity.ts</li> <li>core/base/entities/i-renderable.entity.ts</li> <li>core/base/entities/i-renderer.entity.ts</li> <li>core/base/entities/controllers/animation-mixer.ts</li> <li>core/base/entities/controllers/inline-controller.ts</li> <li>core/base/inputs/direction.keyboard.input.ts</li> <li>core/base/inputs/i-input.ts</li> <li>core/base/inputs/keyboard.input.ts</li> <li>core/base/inputs/mouse.input.ts</li> <li>core/base/interfaces/i-debug-physics-drawer.ts</li> <li>core/base/interfaces/i-positionable.ts</li> <li>core/base/math/box.ts</li> <li>core/base/math/matrix4.ts</li> <li>core/base/math/numbers.ts</li> <li>core/base/math/point2.ts</li> <li>core/base/math/point3.ts</li> <li>core/base/math/quaternion.ts</li> <li>core/base/math/splines.ts</li> <li>core/base/models/axis-directions.ts</li> <li>core/base/models/body-options.ts</li> <li>core/base/models/geometry-nodes.ts</li> <li>core/base/models/points.ts</li> <li>core/dev/gg-console.ui.ts</li> <li>core/dev/gg-debugger.ui.ts</li> <li>core/dev/gg-static.ts</li> <li>core/dev/index.ts</li> <li>matter/matter-factory.ts</li> <li>matter/components/matter-rigid-body.component.ts</li> <li>matter/components/matter-world.component.ts</li> <li>pixi/pixi-factory.ts</li> <li>pixi/components/pixi-display-object.component.ts</li> <li>pixi/components/pixi-renderer.component.ts</li> <li>pixi/components/pixi-scene.component.ts</li> <li>rapier2d/index.ts</li> <li>rapier2d/rapier-2d-factory.ts</li> <li>rapier2d/components/rapier-2d-rigid-body.component.ts</li> <li>rapier2d/components/rapier-2d-trigger.component.ts</li> <li>rapier2d/components/rapier-2d-world.component.ts</li> <li>rapier3d/index.ts</li> <li>rapier3d/rapier-3d-factory.ts</li> <li>rapier3d/rapier-3d-loader.ts</li> <li>rapier3d/components/rapier-3d-raycast-vehicle.component.ts</li> <li>rapier3d/components/rapier-3d-rigid-body.component.ts</li> <li>rapier3d/components/rapier-3d-trigger.component.ts</li> <li>rapier3d/components/rapier-3d-world.component.ts</li> <li>three/three-factory.ts</li> <li>three/three-loader.ts</li> <li>three/three-physics-drawer.ts</li> <li>three/components/three-camera.component.ts</li> <li>three/components/three-display-object.component.ts</li> <li>three/components/three-renderer-component.ts</li> <li>three/components/three-scene.component.ts</li> </ul>"},{"location":"modules/ammo/","title":"Modules","text":"Directory table of contents <ul> <li>ammo/ammo-debugger.ts</li> <li>ammo/ammo-factory.ts</li> <li>ammo/ammo-loader.ts</li> <li>ammo/ammo-utils.ts</li> <li>ammo/components</li> </ul>"},{"location":"modules/ammo/ammo-debugger.ts/","title":"ammo/ammo-debugger.ts","text":""},{"location":"modules/ammo/ammo-debugger.ts/#ammo-debugger-overview","title":"ammo-debugger overviewTable of contents","text":"<ul> <li>utils</li> <li>AmmoDebugger (class)<ul> <li>draw3dText (method)</li> <li>drawContactPoint (method)</li> <li>drawLine (method)</li> <li>getDebugMode (method)</li> <li>update (method)</li> <li>setDebugFlags (method)</li> <li>setDebugMode (method)</li> <li>reportErrorWarning (method)</li> <li>debugMode (property)</li> <li>ammoInstance (property)</li> </ul> </li> <li>DebugBufferSize</li> </ul>"},{"location":"modules/ammo/ammo-debugger.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/ammo-debugger.ts/#ammodebugger-class","title":"AmmoDebugger (class)","text":"<p>Signature</p> <pre><code>export declare class AmmoDebugger {\n  constructor(\n    protected readonly world: AmmoWorldComponent,\n    private readonly drawer: IDebugPhysicsDrawer&lt;Point3, Point4&gt;\n  )\n}\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#draw3dtext-method","title":"draw3dText (method)","text":"<p>Signature</p> <pre><code>draw3dText(location: Ammo.btVector3, textString: string): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#drawcontactpoint-method","title":"drawContactPoint (method)","text":"<p>Signature</p> <pre><code>drawContactPoint(\n    pointOnB: Ammo.btVector3,\n    normalOnB: Ammo.btVector3,\n    distance: number,\n    lifeTime: number,\n    color: Ammo.btVector3,\n  ): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#drawline-method","title":"drawLine (method)","text":"<p>Signature</p> <pre><code>drawLine(from: Ammo.btVector3, to: Ammo.btVector3, color: Ammo.btVector3): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#getdebugmode-method","title":"getDebugMode (method)","text":"<p>Signature</p> <pre><code>getDebugMode(): number\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#update-method","title":"update (method)","text":"<p>Signature</p> <pre><code>update(): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#setdebugflags-method","title":"setDebugFlags (method)","text":"<p>Signature</p> <pre><code>setDebugFlags(flags: AmmoDebugMode[]): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#setdebugmode-method","title":"setDebugMode (method)","text":"<p>Signature</p> <pre><code>setDebugMode(debugMode: number): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#reporterrorwarning-method","title":"reportErrorWarning (method)","text":"<p>Signature</p> <pre><code>reportErrorWarning(warningString: string): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#debugmode-property","title":"debugMode (property)","text":"<p>Signature</p> <pre><code>debugMode: AmmoDebugMode\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#ammoinstance-property","title":"ammoInstance (property)","text":"<p>Signature</p> <pre><code>readonly ammoInstance: any\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#debugbuffersize","title":"DebugBufferSize","text":"<p>Signature</p> <pre><code>export declare const DebugBufferSize: number\n</code></pre>"},{"location":"modules/ammo/ammo-factory.ts/","title":"ammo/ammo-factory.ts","text":""},{"location":"modules/ammo/ammo-factory.ts/#ammo-factory-overview","title":"ammo-factory overviewTable of contents","text":"<ul> <li>utils</li> <li>AmmoFactory (class)<ul> <li>createRigidBody (method)</li> <li>createTrigger (method)</li> <li>createShape (method)</li> <li>createRigidBodyFromShape (method)</li> <li>createTriggerFromShape (method)</li> </ul> </li> </ul>"},{"location":"modules/ammo/ammo-factory.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/ammo-factory.ts/#ammofactory-class","title":"AmmoFactory (class)","text":"<p>Signature</p> <pre><code>export declare class AmmoFactory {\n  constructor(protected readonly world: AmmoWorldComponent)\n}\n</code></pre>"},{"location":"modules/ammo/ammo-factory.ts/#createrigidbody-method","title":"createRigidBody (method)","text":"<p>Signature</p> <pre><code>createRigidBody(\n    descriptor: BodyShape3DDescriptor,\n    transform?: {\n      position?: Point3;\n      rotation?: Point4;\n    },\n  ): AmmoRigidBodyComponent\n</code></pre>"},{"location":"modules/ammo/ammo-factory.ts/#createtrigger-method","title":"createTrigger (method)","text":"<p>Signature</p> <pre><code>createTrigger(\n    descriptor: Shape3DDescriptor,\n    transform?: {\n      position?: Point3;\n      rotation?: Point4;\n    },\n  ): AmmoTriggerComponent\n</code></pre>"},{"location":"modules/ammo/ammo-factory.ts/#createshape-method","title":"createShape (method)","text":"<p>Signature</p> <pre><code>protected createShape(descriptor: Shape3DDescriptor): Ammo.btCollisionShape\n</code></pre>"},{"location":"modules/ammo/ammo-factory.ts/#createrigidbodyfromshape-method","title":"createRigidBodyFromShape (method)","text":"<p>Signature</p> <pre><code>public createRigidBodyFromShape(\n    shape: Ammo.btCollisionShape,\n    options: Partial&lt;Body3DOptions&gt;,\n    transform?: { position?: Point3; rotation?: Point4 },\n  ): AmmoRigidBodyComponent\n</code></pre>"},{"location":"modules/ammo/ammo-factory.ts/#createtriggerfromshape-method","title":"createTriggerFromShape (method)","text":"<p>Signature</p> <pre><code>public createTriggerFromShape(\n    shape: Ammo.btCollisionShape,\n    transform?: { position?: Point3; rotation?: Point4 },\n  ): AmmoTriggerComponent\n</code></pre>"},{"location":"modules/ammo/ammo-loader.ts/","title":"ammo/ammo-loader.ts","text":""},{"location":"modules/ammo/ammo-loader.ts/#ammo-loader-overview","title":"ammo-loader overviewTable of contents","text":"<ul> <li>utils</li> <li>AmmoLoader (class)</li> </ul>"},{"location":"modules/ammo/ammo-loader.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/ammo-loader.ts/#ammoloader-class","title":"AmmoLoader (class)","text":"<p>Signature</p> <pre><code>export declare class AmmoLoader {\n  constructor(protected readonly world: AmmoWorldComponent)\n}\n</code></pre>"},{"location":"modules/ammo/ammo-utils.ts/","title":"ammo/ammo-utils.ts","text":""},{"location":"modules/ammo/ammo-utils.ts/#ammo-utils-overview","title":"ammo-utils overviewTable of contents","text":"<ul> <li>utils</li> <li>ammoId</li> </ul>"},{"location":"modules/ammo/ammo-utils.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/ammo-utils.ts/#ammoid","title":"ammoId","text":"<p>Signature</p> <pre><code>export declare const ammoId: (body: any) =&gt; number\n</code></pre>"},{"location":"modules/ammo/components/","title":"Modules","text":"Directory table of contents <ul> <li>ammo/components/ammo-body.component.ts</li> <li>ammo/components/ammo-raycast-vehicle.component.ts</li> <li>ammo/components/ammo-rigid-body.component.ts</li> <li>ammo/components/ammo-trigger.component.ts</li> <li>ammo/components/ammo-world.component.ts</li> </ul>"},{"location":"modules/ammo/components/ammo-body.component.ts/","title":"ammo/components/ammo-body.component.ts","text":""},{"location":"modules/ammo/components/ammo-body.component.ts/#ammo-bodycomponent-overview","title":"ammo-body.component overviewTable of contents","text":"<ul> <li>utils</li> <li>AmmoBodyComponent (class)<ul> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>dispose (method)</li> <li>name (property)</li> <li>entity (property)</li> </ul> </li> </ul>"},{"location":"modules/ammo/components/ammo-body.component.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/components/ammo-body.component.ts/#ammobodycomponent-class","title":"AmmoBodyComponent (class)","text":"<p>Signature</p> <pre><code>export declare class AmmoBodyComponent&lt;T&gt; {\n  protected constructor(protected readonly world: AmmoWorldComponent, protected _nativeBody: T)\n}\n</code></pre>"},{"location":"modules/ammo/components/ammo-body.component.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>abstract clone(): AmmoBodyComponent&lt;T&gt;;\n</code></pre>"},{"location":"modules/ammo/components/ammo-body.component.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>abstract addToWorld(world: Gg3dWorld&lt;IVisualScene3dComponent, AmmoWorldComponent&gt;): void;\n</code></pre>"},{"location":"modules/ammo/components/ammo-body.component.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>abstract removeFromWorld(world: Gg3dWorld&lt;IVisualScene3dComponent, AmmoWorldComponent&gt;): void;\n</code></pre>"},{"location":"modules/ammo/components/ammo-body.component.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/ammo/components/ammo-body.component.ts/#name-property","title":"name (property)","text":"<p>Signature</p> <pre><code>name: string\n</code></pre>"},{"location":"modules/ammo/components/ammo-body.component.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/ammo/components/ammo-raycast-vehicle.component.ts/","title":"ammo/components/ammo-raycast-vehicle.component.ts","text":""},{"location":"modules/ammo/components/ammo-raycast-vehicle.component.ts/#ammo-raycast-vehiclecomponent-overview","title":"ammo-raycast-vehicle.component overviewTable of contents","text":"<ul> <li>utils</li> <li>AmmoRaycastVehicleComponent (class)<ul> <li>addToWorld (method)</li> <li>addWheel (method)</li> <li>setSteering (method)</li> <li>applyEngineForce (method)</li> <li>applyBrake (method)</li> <li>isWheelTouchesGround (method)</li> <li>getWheelTransform (method)</li> <li>resetSuspension (method)</li> <li>nativeVehicle (property)</li> <li>vehicleTuning (property)</li> <li>wheelDirectionCS0 (property)</li> <li>wheelAxleCS (property)</li> <li>entity (property)</li> </ul> </li> </ul>"},{"location":"modules/ammo/components/ammo-raycast-vehicle.component.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/components/ammo-raycast-vehicle.component.ts/#ammoraycastvehiclecomponent-class","title":"AmmoRaycastVehicleComponent (class)","text":"<p>Signature</p> <pre><code>export declare class AmmoRaycastVehicleComponent {\n  constructor(protected readonly world: AmmoWorldComponent, public chassisBody: AmmoRigidBodyComponent)\n}\n</code></pre>"},{"location":"modules/ammo/components/ammo-raycast-vehicle.component.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg3dWorld&lt;IVisualScene3dComponent, AmmoWorldComponent&gt;)\n</code></pre>"},{"location":"modules/ammo/components/ammo-raycast-vehicle.component.ts/#addwheel-method","title":"addWheel (method)","text":"<p>Signature</p> <pre><code>addWheel(options: WheelOptions, suspensionOptions: SuspensionOptions): void\n</code></pre>"},{"location":"modules/ammo/components/ammo-raycast-vehicle.component.ts/#setsteering-method","title":"setSteering (method)","text":"<p>Signature</p> <pre><code>setSteering(wheelIndex: number, steering: number): void\n</code></pre>"},{"location":"modules/ammo/components/ammo-raycast-vehicle.component.ts/#applyengineforce-method","title":"applyEngineForce (method)","text":"<p>Signature</p> <pre><code>applyEngineForce(wheelIndex: number, force: number): void\n</code></pre>"},{"location":"modules/ammo/components/ammo-raycast-vehicle.component.ts/#applybrake-method","title":"applyBrake (method)","text":"<p>Signature</p> <pre><code>applyBrake(wheelIndex: number, force: number): void\n</code></pre>"},{"location":"modules/ammo/components/ammo-raycast-vehicle.component.ts/#iswheeltouchesground-method","title":"isWheelTouchesGround (method)","text":"<p>Signature</p> <pre><code>isWheelTouchesGround(wheelIndex: number): boolean\n</code></pre>"},{"location":"modules/ammo/components/ammo-raycast-vehicle.component.ts/#getwheeltransform-method","title":"getWheelTransform (method)","text":"<p>Signature</p> <pre><code>getWheelTransform(wheelIndex: number): { position: Point3; rotation: Point4 }\n</code></pre>"},{"location":"modules/ammo/components/ammo-raycast-vehicle.component.ts/#resetsuspension-method","title":"resetSuspension (method)","text":"<p>Signature</p> <pre><code>resetSuspension(): void\n</code></pre>"},{"location":"modules/ammo/components/ammo-raycast-vehicle.component.ts/#nativevehicle-property","title":"nativeVehicle (property)","text":"<p>Signature</p> <pre><code>readonly nativeVehicle: any\n</code></pre>"},{"location":"modules/ammo/components/ammo-raycast-vehicle.component.ts/#vehicletuning-property","title":"vehicleTuning (property)","text":"<p>Signature</p> <pre><code>readonly vehicleTuning: any\n</code></pre>"},{"location":"modules/ammo/components/ammo-raycast-vehicle.component.ts/#wheeldirectioncs0-property","title":"wheelDirectionCS0 (property)","text":"<p>Signature</p> <pre><code>readonly wheelDirectionCS0: any\n</code></pre>"},{"location":"modules/ammo/components/ammo-raycast-vehicle.component.ts/#wheelaxlecs-property","title":"wheelAxleCS (property)","text":"<p>Signature</p> <pre><code>readonly wheelAxleCS: any\n</code></pre>"},{"location":"modules/ammo/components/ammo-raycast-vehicle.component.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/ammo/components/ammo-rigid-body.component.ts/","title":"ammo/components/ammo-rigid-body.component.ts","text":""},{"location":"modules/ammo/components/ammo-rigid-body.component.ts/#ammo-rigid-bodycomponent-overview","title":"ammo-rigid-body.component overviewTable of contents","text":"<ul> <li>utils</li> <li>AmmoRigidBodyComponent (class)<ul> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>resetMotion (method)</li> <li>entity (property)</li> </ul> </li> </ul>"},{"location":"modules/ammo/components/ammo-rigid-body.component.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/components/ammo-rigid-body.component.ts/#ammorigidbodycomponent-class","title":"AmmoRigidBodyComponent (class)","text":"<p>Signature</p> <pre><code>export declare class AmmoRigidBodyComponent {\n  constructor(protected readonly world: AmmoWorldComponent, protected _nativeBody: Ammo.btRigidBody)\n}\n</code></pre>"},{"location":"modules/ammo/components/ammo-rigid-body.component.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): AmmoRigidBodyComponent\n</code></pre>"},{"location":"modules/ammo/components/ammo-rigid-body.component.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg3dWorld&lt;IVisualScene3dComponent, AmmoWorldComponent&gt;): void\n</code></pre>"},{"location":"modules/ammo/components/ammo-rigid-body.component.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg3dWorld&lt;IVisualScene3dComponent, AmmoWorldComponent&gt;): void\n</code></pre>"},{"location":"modules/ammo/components/ammo-rigid-body.component.ts/#resetmotion-method","title":"resetMotion (method)","text":"<p>Signature</p> <pre><code>resetMotion(): void\n</code></pre>"},{"location":"modules/ammo/components/ammo-rigid-body.component.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/ammo/components/ammo-trigger.component.ts/","title":"ammo/components/ammo-trigger.component.ts","text":""},{"location":"modules/ammo/components/ammo-trigger.component.ts/#ammo-triggercomponent-overview","title":"ammo-trigger.component overviewTable of contents","text":"<ul> <li>utils</li> <li>AmmoTriggerComponent (class)<ul> <li>checkOverlaps (method)</li> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>dispose (method)</li> <li>entity (property)</li> <li>onEnter$ (property)</li> <li>onLeft$ (property)</li> <li>overlaps (property)</li> </ul> </li> </ul>"},{"location":"modules/ammo/components/ammo-trigger.component.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/components/ammo-trigger.component.ts/#ammotriggercomponent-class","title":"AmmoTriggerComponent (class)","text":"<p>Signature</p> <pre><code>export declare class AmmoTriggerComponent {\n  constructor(protected readonly world: AmmoWorldComponent, protected _nativeBody: Ammo.btPairCachingGhostObject)\n}\n</code></pre>"},{"location":"modules/ammo/components/ammo-trigger.component.ts/#checkoverlaps-method","title":"checkOverlaps (method)","text":"<p>Signature</p> <pre><code>checkOverlaps(): void\n</code></pre>"},{"location":"modules/ammo/components/ammo-trigger.component.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): AmmoTriggerComponent\n</code></pre>"},{"location":"modules/ammo/components/ammo-trigger.component.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg3dWorld&lt;IVisualScene3dComponent, AmmoWorldComponent&gt;)\n</code></pre>"},{"location":"modules/ammo/components/ammo-trigger.component.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg3dWorld&lt;IVisualScene3dComponent, AmmoWorldComponent&gt;): void\n</code></pre>"},{"location":"modules/ammo/components/ammo-trigger.component.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/ammo/components/ammo-trigger.component.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/ammo/components/ammo-trigger.component.ts/#onenter-property","title":"onEnter$ (property)","text":"<p>Signature</p> <pre><code>readonly onEnter$: any\n</code></pre>"},{"location":"modules/ammo/components/ammo-trigger.component.ts/#onleft-property","title":"onLeft$ (property)","text":"<p>Signature</p> <pre><code>readonly onLeft$: any\n</code></pre>"},{"location":"modules/ammo/components/ammo-trigger.component.ts/#overlaps-property","title":"overlaps (property)","text":"<p>Signature</p> <pre><code>readonly overlaps: any\n</code></pre>"},{"location":"modules/ammo/components/ammo-world.component.ts/","title":"ammo/components/ammo-world.component.ts","text":""},{"location":"modules/ammo/components/ammo-world.component.ts/#ammo-worldcomponent-overview","title":"ammo-world.component overviewTable of contents","text":"<ul> <li>utils</li> <li>AmmoWorldComponent (class)<ul> <li>init (method)</li> <li>simulate (method)</li> <li>startDebugger (method)</li> <li>stopDebugger (method)</li> <li>dispose (method)</li> <li>_dynamicAmmoWorld (property)</li> </ul> </li> </ul>"},{"location":"modules/ammo/components/ammo-world.component.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/components/ammo-world.component.ts/#ammoworldcomponent-class","title":"AmmoWorldComponent (class)","text":"<p>Signature</p> <pre><code>export declare class AmmoWorldComponent\n</code></pre>"},{"location":"modules/ammo/components/ammo-world.component.ts/#init-method","title":"init (method)","text":"<p>Signature</p> <pre><code>async init(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/ammo/components/ammo-world.component.ts/#simulate-method","title":"simulate (method)","text":"<p>Signature</p> <pre><code>simulate(delta: number): void\n</code></pre>"},{"location":"modules/ammo/components/ammo-world.component.ts/#startdebugger-method","title":"startDebugger (method)","text":"<p>Signature</p> <pre><code>startDebugger(\n    world: Gg3dWorld&lt;IVisualScene3dComponent, AmmoWorldComponent&gt;,\n    drawer: IDebugPhysicsDrawer&lt;Point3, Point4&gt;,\n  ): void\n</code></pre>"},{"location":"modules/ammo/components/ammo-world.component.ts/#stopdebugger-method","title":"stopDebugger (method)","text":"<p>Signature</p> <pre><code>stopDebugger(world: Gg3dWorld&lt;IVisualScene3dComponent, AmmoWorldComponent&gt;): void\n</code></pre>"},{"location":"modules/ammo/components/ammo-world.component.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/ammo/components/ammo-world.component.ts/#_dynamicammoworld-property","title":"_dynamicAmmoWorld (property)","text":"<p>Signature</p> <pre><code>_dynamicAmmoWorld: any\n</code></pre>"},{"location":"modules/core/","title":"Modules","text":"Directory table of contents <ul> <li>core/2d</li> <li>core/3d</li> <li>core/base</li> <li>core/dev</li> </ul>"},{"location":"modules/core/2d/","title":"Modules","text":"Directory table of contents <ul> <li>core/2d/components</li> <li>core/2d/entities</li> <li>core/2d/factories.ts</li> <li>core/2d/gg-2d-world.ts</li> <li>core/2d/index.ts</li> <li>core/2d/interfaces</li> <li>core/2d/models</li> </ul>"},{"location":"modules/core/2d/factories.ts/","title":"core/2d/factories.ts","text":""},{"location":"modules/core/2d/factories.ts/#factories-overview","title":"factories overviewTable of contents","text":"<ul> <li>utils</li> <li>IGg2dObjectFactory (class)<ul> <li>createPrimitive (method)</li> <li>createSquare (method)</li> <li>createCircle (method)</li> </ul> </li> <li>IPhysicsBody2dComponentFactory (interface)</li> </ul>"},{"location":"modules/core/2d/factories.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/factories.ts/#igg2dobjectfactory-class","title":"IGg2dObjectFactory (class)","text":"<p>Signature</p> <pre><code>export declare class IGg2dObjectFactory&lt;T&gt;\n</code></pre>"},{"location":"modules/core/2d/factories.ts/#createprimitive-method","title":"createPrimitive (method)","text":"<p>Signature</p> <pre><code>abstract createPrimitive(descriptor: Shape2DDescriptor): T;\n</code></pre>"},{"location":"modules/core/2d/factories.ts/#createsquare-method","title":"createSquare (method)","text":"<p>Signature</p> <pre><code>createSquare(dimensions: Point2): T\n</code></pre>"},{"location":"modules/core/2d/factories.ts/#createcircle-method","title":"createCircle (method)","text":"<p>Signature</p> <pre><code>createCircle(radius: number): T\n</code></pre>"},{"location":"modules/core/2d/factories.ts/#iphysicsbody2dcomponentfactory-interface","title":"IPhysicsBody2dComponentFactory (interface)","text":"<p>Signature</p> <pre><code>export interface IPhysicsBody2dComponentFactory&lt;\n  T extends IRigidBody2dComponent = IRigidBody2dComponent,\n  K extends ITrigger2dComponent = ITrigger2dComponent\n&gt; {\n  createRigidBody(descriptor: BodyShape2DDescriptor, transform?: { position?: Point2; rotation?: number }): T\n\n  createTrigger(descriptor: Shape2DDescriptor, transform?: { position?: Point2; rotation?: number }): K\n}\n</code></pre>"},{"location":"modules/core/2d/gg-2d-world.ts/","title":"core/2d/gg-2d-world.ts","text":""},{"location":"modules/core/2d/gg-2d-world.ts/#gg-2d-world-overview","title":"gg-2d-world overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dWorld (class)<ul> <li>addPrimitiveRigidBody (method)</li> <li>addRenderer (method)</li> </ul> </li> </ul>"},{"location":"modules/core/2d/gg-2d-world.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/gg-2d-world.ts/#gg2dworld-class","title":"Gg2dWorld (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dWorld&lt;V, P&gt; {\n  constructor(public readonly visualScene: V, public readonly physicsWorld: P)\n}\n</code></pre>"},{"location":"modules/core/2d/gg-2d-world.ts/#addprimitiverigidbody-method","title":"addPrimitiveRigidBody (method)","text":"<p>Signature</p> <pre><code>addPrimitiveRigidBody(descr: BodyShape2DDescriptor, position: Point2 = Pnt2.O, rotation: number = 0): Entity2d&lt;V, P&gt;\n</code></pre>"},{"location":"modules/core/2d/gg-2d-world.ts/#addrenderer-method","title":"addRenderer (method)","text":"<p>Signature</p> <pre><code>addRenderer(canvas?: HTMLCanvasElement, rendererOptions?: Partial&lt;RendererOptions&gt;): Renderer2dEntity\n</code></pre>"},{"location":"modules/core/2d/index.ts/","title":"core/2d/index.ts","text":""},{"location":"modules/core/2d/index.ts/#index-overview","title":"index overviewTable of contents","text":""},{"location":"modules/core/2d/components/","title":"Modules","text":"Directory table of contents <ul> <li>core/2d/components/physics</li> <li>core/2d/components/rendering</li> </ul>"},{"location":"modules/core/2d/components/physics/","title":"Modules","text":"Directory table of contents <ul> <li>core/2d/components/physics/i-physics-world-2d.component.ts</li> <li>core/2d/components/physics/i-rigid-body-2d.component.ts</li> <li>core/2d/components/physics/i-trigger-2d.component.ts</li> </ul>"},{"location":"modules/core/2d/components/physics/i-physics-world-2d.component.ts/","title":"core/2d/components/physics/i-physics-world-2d.component.ts","text":""},{"location":"modules/core/2d/components/physics/i-physics-world-2d.component.ts/#i-physics-world-2dcomponent-overview","title":"i-physics-world-2d.component overviewTable of contents","text":"<ul> <li>utils</li> <li>IPhysicsWorld2dComponent (interface)</li> </ul>"},{"location":"modules/core/2d/components/physics/i-physics-world-2d.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/components/physics/i-physics-world-2d.component.ts/#iphysicsworld2dcomponent-interface","title":"IPhysicsWorld2dComponent (interface)","text":"<p>Signature</p> <pre><code>export interface IPhysicsWorld2dComponent extends IPhysicsWorldComponent&lt;Point2, number&gt; {\n  readonly factory: IPhysicsBody2dComponentFactory\n}\n</code></pre>"},{"location":"modules/core/2d/components/physics/i-rigid-body-2d.component.ts/","title":"core/2d/components/physics/i-rigid-body-2d.component.ts","text":""},{"location":"modules/core/2d/components/physics/i-rigid-body-2d.component.ts/#i-rigid-body-2dcomponent-overview","title":"i-rigid-body-2d.component overviewTable of contents","text":"<ul> <li>utils</li> <li>IRigidBody2dComponent (interface)</li> </ul>"},{"location":"modules/core/2d/components/physics/i-rigid-body-2d.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/components/physics/i-rigid-body-2d.component.ts/#irigidbody2dcomponent-interface","title":"IRigidBody2dComponent (interface)","text":"<p>Signature</p> <pre><code>export interface IRigidBody2dComponent&lt;PW extends IPhysicsWorld2dComponent = IPhysicsWorld2dComponent&gt;\n  extends IRigidBodyComponent&lt;Point2, number, PW&gt; {\n  angularVelocity: number\n}\n</code></pre>"},{"location":"modules/core/2d/components/physics/i-trigger-2d.component.ts/","title":"core/2d/components/physics/i-trigger-2d.component.ts","text":""},{"location":"modules/core/2d/components/physics/i-trigger-2d.component.ts/#i-trigger-2dcomponent-overview","title":"i-trigger-2d.component overviewTable of contents","text":"<ul> <li>utils</li> <li>ITrigger2dComponent (interface)</li> </ul>"},{"location":"modules/core/2d/components/physics/i-trigger-2d.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/components/physics/i-trigger-2d.component.ts/#itrigger2dcomponent-interface","title":"ITrigger2dComponent (interface)","text":"<p>Signature</p> <pre><code>export interface ITrigger2dComponent&lt;PW extends IPhysicsWorld2dComponent = IPhysicsWorld2dComponent&gt;\n  extends ITriggerComponent&lt;Point2, number, PW&gt; {\n</code></pre>"},{"location":"modules/core/2d/components/rendering/","title":"Modules","text":"Directory table of contents <ul> <li>core/2d/components/rendering/i-display-object-2d.component.ts</li> <li>core/2d/components/rendering/i-renderer-2d.component.ts</li> <li>core/2d/components/rendering/i-visual-scene-2d.component.ts</li> </ul>"},{"location":"modules/core/2d/components/rendering/i-display-object-2d.component.ts/","title":"core/2d/components/rendering/i-display-object-2d.component.ts","text":""},{"location":"modules/core/2d/components/rendering/i-display-object-2d.component.ts/#i-display-object-2dcomponent-overview","title":"i-display-object-2d.component overviewTable of contents","text":"<ul> <li>utils</li> <li>IDisplayObject2dComponent (interface)</li> </ul>"},{"location":"modules/core/2d/components/rendering/i-display-object-2d.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/components/rendering/i-display-object-2d.component.ts/#idisplayobject2dcomponent-interface","title":"IDisplayObject2dComponent (interface)","text":"<p>Signature</p> <pre><code>export interface IDisplayObject2dComponent&lt;VS extends IVisualScene2dComponent = IVisualScene2dComponent&gt;\n  extends IDisplayObjectComponent&lt;Point2, number, VS&gt; {}\n</code></pre>"},{"location":"modules/core/2d/components/rendering/i-renderer-2d.component.ts/","title":"core/2d/components/rendering/i-renderer-2d.component.ts","text":""},{"location":"modules/core/2d/components/rendering/i-renderer-2d.component.ts/#i-renderer-2dcomponent-overview","title":"i-renderer-2d.component overviewTable of contents","text":"<ul> <li>utils</li> <li>IRenderer2dComponent (class)</li> </ul>"},{"location":"modules/core/2d/components/rendering/i-renderer-2d.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/components/rendering/i-renderer-2d.component.ts/#irenderer2dcomponent-class","title":"IRenderer2dComponent (class)","text":"<p>Signature</p> <pre><code>export declare class IRenderer2dComponent&lt;VS&gt;\n</code></pre>"},{"location":"modules/core/2d/components/rendering/i-visual-scene-2d.component.ts/","title":"core/2d/components/rendering/i-visual-scene-2d.component.ts","text":""},{"location":"modules/core/2d/components/rendering/i-visual-scene-2d.component.ts/#i-visual-scene-2dcomponent-overview","title":"i-visual-scene-2d.component overviewTable of contents","text":"<ul> <li>utils</li> <li>IVisualScene2dComponent (interface)</li> </ul>"},{"location":"modules/core/2d/components/rendering/i-visual-scene-2d.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/components/rendering/i-visual-scene-2d.component.ts/#ivisualscene2dcomponent-interface","title":"IVisualScene2dComponent (interface)","text":"<p>Signature</p> <pre><code>export interface IVisualScene2dComponent extends IVisualSceneComponent&lt;Point2, number&gt; {\n  readonly factory: IGg2dObjectFactory\n\n  createRenderer(canvas?: HTMLCanvasElement, rendererOptions?: Partial&lt;RendererOptions&gt;): IRenderer2dComponent\n}\n</code></pre>"},{"location":"modules/core/2d/entities/","title":"Modules","text":"Directory table of contents <ul> <li>core/2d/entities/controllers</li> <li>core/2d/entities/entity-2d.ts</li> <li>core/2d/entities/i-renderable-2d.entity.ts</li> <li>core/2d/entities/renderer-2d.entity.ts</li> <li>core/2d/entities/trigger-2d.entity.ts</li> </ul>"},{"location":"modules/core/2d/entities/entity-2d.ts/","title":"core/2d/entities/entity-2d.ts","text":""},{"location":"modules/core/2d/entities/entity-2d.ts/#entity-2d-overview","title":"entity-2d overviewTable of contents","text":"<ul> <li>utils</li> <li>Entity2d (class)<ul> <li>updateVisibility (method)</li> <li>runTransformBinding (method)</li> <li>tickOrder (property)</li> </ul> </li> </ul>"},{"location":"modules/core/2d/entities/entity-2d.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/entities/entity-2d.ts/#entity2d-class","title":"Entity2d (class)","text":"<p>Signature</p> <pre><code>export declare class Entity2d&lt;VS, PW&gt; {\n  constructor(\n    public readonly object2D: IDisplayObject2dComponent | null,\n    public readonly objectBody: IRigidBody2dComponent | null\n  )\n}\n</code></pre>"},{"location":"modules/core/2d/entities/entity-2d.ts/#updatevisibility-method","title":"updateVisibility (method)","text":"<p>Signature</p> <pre><code>public updateVisibility(): void\n</code></pre>"},{"location":"modules/core/2d/entities/entity-2d.ts/#runtransformbinding-method","title":"runTransformBinding (method)","text":"<p>Synchronize physics body transform with entity (and object2d if defined)</p> <p>Signature</p> <pre><code>protected runTransformBinding(objectBody: IRigidBody2dComponent, object2D: IDisplayObject2dComponent | null): void\n</code></pre>"},{"location":"modules/core/2d/entities/entity-2d.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: TickOrder.OBJECTS_BINDING\n</code></pre>"},{"location":"modules/core/2d/entities/i-renderable-2d.entity.ts/","title":"core/2d/entities/i-renderable-2d.entity.ts","text":""},{"location":"modules/core/2d/entities/i-renderable-2d.entity.ts/#i-renderable-2dentity-overview","title":"i-renderable-2d.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>IRenderable2dEntity (class)</li> </ul>"},{"location":"modules/core/2d/entities/i-renderable-2d.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/entities/i-renderable-2d.entity.ts/#irenderable2dentity-class","title":"IRenderable2dEntity (class)","text":"<p>Signature</p> <pre><code>export declare class IRenderable2dEntity&lt;VS, PW&gt;\n</code></pre>"},{"location":"modules/core/2d/entities/renderer-2d.entity.ts/","title":"core/2d/entities/renderer-2d.entity.ts","text":""},{"location":"modules/core/2d/entities/renderer-2d.entity.ts/#renderer-2dentity-overview","title":"renderer-2d.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>Renderer2dEntity (class)</li> </ul>"},{"location":"modules/core/2d/entities/renderer-2d.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/entities/renderer-2d.entity.ts/#renderer2dentity-class","title":"Renderer2dEntity (class)","text":"<p>Signature</p> <pre><code>export declare class Renderer2dEntity&lt;RC&gt;\n</code></pre>"},{"location":"modules/core/2d/entities/trigger-2d.entity.ts/","title":"core/2d/entities/trigger-2d.entity.ts","text":""},{"location":"modules/core/2d/entities/trigger-2d.entity.ts/#trigger-2dentity-overview","title":"trigger-2d.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>Trigger2dEntity (class)<ul> <li>tickOrder (property)</li> </ul> </li> </ul>"},{"location":"modules/core/2d/entities/trigger-2d.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/entities/trigger-2d.entity.ts/#trigger2dentity-class","title":"Trigger2dEntity (class)","text":"<p>Signature</p> <pre><code>export declare class Trigger2dEntity {\n  constructor(public readonly objectBody: ITrigger2dComponent)\n}\n</code></pre>"},{"location":"modules/core/2d/entities/trigger-2d.entity.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: TickOrder.OBJECTS_BINDING\n</code></pre>"},{"location":"modules/core/2d/entities/controllers/","title":"Modules","text":"Directory table of contents <ul> <li>core/2d/entities/controllers/entity-2d-positioning.animator.ts</li> </ul>"},{"location":"modules/core/2d/entities/controllers/entity-2d-positioning.animator.ts/","title":"core/2d/entities/controllers/entity-2d-positioning.animator.ts","text":""},{"location":"modules/core/2d/entities/controllers/entity-2d-positioning.animator.ts/#entity-2d-positioninganimator-overview","title":"entity-2d-positioning.animator overviewTable of contents","text":"<ul> <li>utils</li> <li>Entity2dPositioningAnimator (class)<ul> <li>onSpawned (method)</li> <li>applyPositioning (method)</li> </ul> </li> </ul>"},{"location":"modules/core/2d/entities/controllers/entity-2d-positioning.animator.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/entities/controllers/entity-2d-positioning.animator.ts/#entity2dpositioninganimator-class","title":"Entity2dPositioningAnimator (class)","text":"<p>Signature</p> <pre><code>export declare class Entity2dPositioningAnimator&lt;T&gt; {\n  constructor(public entity: T, protected _animationFunction: AnimationFunction&lt;Positioning2d&gt;)\n}\n</code></pre>"},{"location":"modules/core/2d/entities/controllers/entity-2d-positioning.animator.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: Gg2dWorld)\n</code></pre>"},{"location":"modules/core/2d/entities/controllers/entity-2d-positioning.animator.ts/#applypositioning-method","title":"applyPositioning (method)","text":"<p>Signature</p> <pre><code>protected applyPositioning(value: Positioning2d)\n</code></pre>"},{"location":"modules/core/2d/interfaces/","title":"Modules","text":"Directory table of contents <ul> <li>core/2d/interfaces/i-positionable-2d.ts</li> </ul>"},{"location":"modules/core/2d/interfaces/i-positionable-2d.ts/","title":"core/2d/interfaces/i-positionable-2d.ts","text":""},{"location":"modules/core/2d/interfaces/i-positionable-2d.ts/#i-positionable-2d-overview","title":"i-positionable-2d overviewTable of contents","text":"<ul> <li>utils</li> <li>IPositionable2d (interface)</li> </ul>"},{"location":"modules/core/2d/interfaces/i-positionable-2d.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/interfaces/i-positionable-2d.ts/#ipositionable2d-interface","title":"IPositionable2d (interface)","text":"<p>Signature</p> <pre><code>export interface IPositionable2d extends IPositionable&lt;Point2, number&gt; {}\n</code></pre>"},{"location":"modules/core/2d/models/","title":"Modules","text":"Directory table of contents <ul> <li>core/2d/models/body-options.ts</li> <li>core/2d/models/shapes.ts</li> </ul>"},{"location":"modules/core/2d/models/body-options.ts/","title":"core/2d/models/body-options.ts","text":""},{"location":"modules/core/2d/models/body-options.ts/#body-options-overview","title":"body-options overviewTable of contents","text":"<ul> <li>utils</li> <li>Body2DOptions (interface)</li> </ul>"},{"location":"modules/core/2d/models/body-options.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/models/body-options.ts/#body2doptions-interface","title":"Body2DOptions (interface)","text":"<p>Signature</p> <pre><code>export interface Body2DOptions extends BodyOptions {}\n</code></pre>"},{"location":"modules/core/2d/models/shapes.ts/","title":"core/2d/models/shapes.ts","text":""},{"location":"modules/core/2d/models/shapes.ts/#shapes-overview","title":"shapes overviewTable of contents","text":"<ul> <li>utils</li> <li>BodyShape2DDescriptor (type alias)</li> <li>Shape2DDescriptor (type alias)</li> </ul>"},{"location":"modules/core/2d/models/shapes.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/models/shapes.ts/#bodyshape2ddescriptor-type-alias","title":"BodyShape2DDescriptor (type alias)","text":"<p>Signature</p> <pre><code>export type BodyShape2DDescriptor = { shape: Shape2DDescriptor; body: Partial&lt;Body2DOptions&gt; }\n</code></pre>"},{"location":"modules/core/2d/models/shapes.ts/#shape2ddescriptor-type-alias","title":"Shape2DDescriptor (type alias)","text":"<p>Signature</p> <pre><code>export type Shape2DDescriptor = { shape: 'SQUARE'; dimensions: Point2 } | { shape: 'CIRCLE'; radius: number }\n</code></pre>"},{"location":"modules/core/3d/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/components</li> <li>core/3d/entities</li> <li>core/3d/factories.ts</li> <li>core/3d/gg-3d-world.ts</li> <li>core/3d/index.ts</li> <li>core/3d/interfaces</li> <li>core/3d/loader.ts</li> <li>core/3d/loaders.ts</li> <li>core/3d/models</li> </ul>"},{"location":"modules/core/3d/factories.ts/","title":"core/3d/factories.ts","text":""},{"location":"modules/core/3d/factories.ts/#factories-overview","title":"factories overviewTable of contents","text":"<ul> <li>utils</li> <li>IDisplayObject3dComponentFactory (class)<ul> <li>createPrimitive (method)</li> <li>createBox (method)</li> <li>createCapsule (method)</li> <li>createCylinder (method)</li> <li>createCone (method)</li> <li>createSphere (method)</li> </ul> </li> <li>IPhysicsBody3dComponentFactory (interface)</li> </ul>"},{"location":"modules/core/3d/factories.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/factories.ts/#idisplayobject3dcomponentfactory-class","title":"IDisplayObject3dComponentFactory (class)","text":"<p>Signature</p> <pre><code>export declare class IDisplayObject3dComponentFactory&lt;DOC&gt;\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#createprimitive-method","title":"createPrimitive (method)","text":"<p>Signature</p> <pre><code>abstract createPrimitive(descriptor: Shape3DDescriptor, material?: any): DOC;\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#createbox-method","title":"createBox (method)","text":"<p>Signature</p> <pre><code>createBox(dimensions: Point3, material?: any): DOC\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#createcapsule-method","title":"createCapsule (method)","text":"<p>Signature</p> <pre><code>createCapsule(radius: number, centersDistance: number, material?: any): DOC\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#createcylinder-method","title":"createCylinder (method)","text":"<p>Signature</p> <pre><code>createCylinder(radius: number, height: number, material?: any): DOC\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#createcone-method","title":"createCone (method)","text":"<p>Signature</p> <pre><code>createCone(radius: number, height: number, material?: any): DOC\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#createsphere-method","title":"createSphere (method)","text":"<p>Signature</p> <pre><code>createSphere(radius: number): DOC\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#iphysicsbody3dcomponentfactory-interface","title":"IPhysicsBody3dComponentFactory (interface)","text":"<p>Signature</p> <pre><code>export interface IPhysicsBody3dComponentFactory&lt;\n  T extends IRigidBody3dComponent = IRigidBody3dComponent,\n  K extends ITrigger3dComponent = ITrigger3dComponent\n&gt; {\n  createRigidBody(descriptor: BodyShape3DDescriptor, transform?: { position?: Point3; rotation?: Point4 }): T\n\n  createTrigger(descriptor: Shape3DDescriptor, transform?: { position?: Point3; rotation?: Point4 }): K\n}\n</code></pre>"},{"location":"modules/core/3d/gg-3d-world.ts/","title":"core/3d/gg-3d-world.ts","text":""},{"location":"modules/core/3d/gg-3d-world.ts/#gg-3d-world-overview","title":"gg-3d-world overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dWorld (class)<ul> <li>addPrimitiveRigidBody (method)</li> <li>addRenderer (method)</li> <li>loader (property)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/gg-3d-world.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/gg-3d-world.ts/#gg3dworld-class","title":"Gg3dWorld (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dWorld&lt;V, P&gt; {\n  constructor(public readonly visualScene: V, public readonly physicsWorld: P)\n}\n</code></pre>"},{"location":"modules/core/3d/gg-3d-world.ts/#addprimitiverigidbody-method","title":"addPrimitiveRigidBody (method)","text":"<p>Signature</p> <pre><code>addPrimitiveRigidBody(\n    descr: BodyShape3DDescriptor,\n    position: Point3 = Pnt3.O,\n    rotation: Point4 = Qtrn.O,\n  ): Entity3d&lt;V, P&gt;\n</code></pre>"},{"location":"modules/core/3d/gg-3d-world.ts/#addrenderer-method","title":"addRenderer (method)","text":"<p>Signature</p> <pre><code>addRenderer&lt;\n    CC extends ICameraComponent&lt;V&gt; = ICameraComponent&lt;V&gt;,\n    RC extends IRenderer3dComponent&lt;V, CC&gt; = IRenderer3dComponent&lt;V, CC&gt;,\n  &gt;(camera: CC, canvas?: HTMLCanvasElement, rendererOptions?: Partial&lt;RendererOptions&gt;): Renderer3dEntity&lt;V, CC, RC&gt;\n</code></pre>"},{"location":"modules/core/3d/gg-3d-world.ts/#loader-property","title":"loader (property)","text":"<p>Signature</p> <pre><code>readonly loader: Gg3dLoader\n</code></pre>"},{"location":"modules/core/3d/index.ts/","title":"core/3d/index.ts","text":""},{"location":"modules/core/3d/index.ts/#index-overview","title":"index overviewTable of contents","text":""},{"location":"modules/core/3d/loader.ts/","title":"core/3d/loader.ts","text":""},{"location":"modules/core/3d/loader.ts/#loader-overview","title":"loader overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dLoader (class)<ul> <li>loadGgGlbFiles (method)</li> <li>loadGgGlbResources (method)</li> <li>loadGgGlb (method)</li> <li>filesCache (property)</li> <li>loadResultCache (property)</li> </ul> </li> <li>LoadOptions (type alias)</li> <li>LoadResourcesResult (type alias)</li> <li>LoadResult (type alias)</li> <li>LoadResultWithProps (type alias)</li> </ul>"},{"location":"modules/core/3d/loader.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/loader.ts/#gg3dloader-class","title":"Gg3dLoader (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dLoader {\n  constructor(protected readonly world: Gg3dWorld)\n}\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadggglbfiles-method","title":"loadGgGlbFiles (method)","text":"<p>Signature</p> <pre><code>public async loadGgGlbFiles(path: string, useCache: boolean = false): Promise&lt;[ArrayBuffer, GgMeta]&gt;\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadggglbresources-method","title":"loadGgGlbResources (method)","text":"<p>Signature</p> <pre><code>public async loadGgGlbResources(\n    path: string,\n    cachingStrategy: CachingStrategy = CachingStrategy.Nothing,\n  ): Promise&lt;LoadResourcesResult&gt;\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadggglb-method","title":"loadGgGlb (method)","text":"<p>Signature</p> <pre><code>public async loadGgGlb(\n    path: string,\n    options: Partial&lt;LoadOptions&gt; = defaultLoadOptions,\n  ): Promise&lt;LoadResultWithProps&gt;\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#filescache-property","title":"filesCache (property)","text":"<p>Signature</p> <pre><code>readonly filesCache: any\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadresultcache-property","title":"loadResultCache (property)","text":"<p>Signature</p> <pre><code>readonly loadResultCache: any\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadoptions-type-alias","title":"LoadOptions (type alias)","text":"<p>Signature</p> <pre><code>export type LoadOptions = {\n  // whether to cache anything\n  // \"Nothing\" does not cache anything\n  // \"Files\" caches GLB+Meta file contents\n  // \"Entities\" clones and saves parsed from GLB+Meta objects and bodies\n  cachingStrategy: CachingStrategy\n  // initial position\n  position: Point3\n  // initial rotation\n  rotation: Point4\n  // process dummies with flag is_prop\n  loadProps: boolean\n  // path where to find prop scenes\n  propsPath?: string\n}\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadresourcesresult-type-alias","title":"LoadResourcesResult (type alias)","text":"<p>Signature</p> <pre><code>export type LoadResourcesResult = {\n  resources: { object3D: IDisplayObject3dComponent | null; body: IRigidBody3dComponent | null }[]\n  meta: GgMeta\n}\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadresult-type-alias","title":"LoadResult (type alias)","text":"<p>Signature</p> <pre><code>export type LoadResult = {\n  entities: Entity3d[]\n  meta: GgMeta\n}\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadresultwithprops-type-alias","title":"LoadResultWithProps (type alias)","text":"<p>Signature</p> <pre><code>export type LoadResultWithProps = LoadResult &amp; { props?: LoadResult[] }\n</code></pre>"},{"location":"modules/core/3d/loaders.ts/","title":"core/3d/loaders.ts","text":""},{"location":"modules/core/3d/loaders.ts/#loaders-overview","title":"loaders overviewTable of contents","text":"<ul> <li>utils</li> <li>IDisplayObject3dComponentLoader (interface)</li> <li>IPhysicsBody3dComponentLoader (class)<ul> <li>loadFromGgGlb (method)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/loaders.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/loaders.ts/#idisplayobject3dcomponentloader-interface","title":"IDisplayObject3dComponentLoader (interface)","text":"<p>Signature</p> <pre><code>export interface IDisplayObject3dComponentLoader {\n  loadFromGgGlb(glbFile: ArrayBuffer, meta: GgMeta): Promise&lt;IDisplayObject3dComponent | null&gt;\n}\n</code></pre>"},{"location":"modules/core/3d/loaders.ts/#iphysicsbody3dcomponentloader-class","title":"IPhysicsBody3dComponentLoader (class)","text":"<p>Signature</p> <pre><code>export declare class IPhysicsBody3dComponentLoader {\n  protected constructor(protected readonly world: IPhysicsWorld3dComponent)\n}\n</code></pre>"},{"location":"modules/core/3d/loaders.ts/#loadfromggglb-method","title":"loadFromGgGlb (method)","text":"<p>Signature</p> <pre><code>async loadFromGgGlb(glbFile: ArrayBuffer, meta: GgMeta): Promise&lt;IRigidBody3dComponent[]&gt;\n</code></pre>"},{"location":"modules/core/3d/components/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/components/physics</li> <li>core/3d/components/rendering</li> </ul>"},{"location":"modules/core/3d/components/physics/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/components/physics/i-physics-world-3d.component.ts</li> <li>core/3d/components/physics/i-raycast-vehicle.component.ts</li> <li>core/3d/components/physics/i-rigid-body-3d.component.ts</li> <li>core/3d/components/physics/i-trigger-3d.component.ts</li> </ul>"},{"location":"modules/core/3d/components/physics/i-physics-world-3d.component.ts/","title":"core/3d/components/physics/i-physics-world-3d.component.ts","text":""},{"location":"modules/core/3d/components/physics/i-physics-world-3d.component.ts/#i-physics-world-3dcomponent-overview","title":"i-physics-world-3d.component overviewTable of contents","text":"<ul> <li>utils</li> <li>IPhysicsWorld3dComponent (interface)</li> </ul>"},{"location":"modules/core/3d/components/physics/i-physics-world-3d.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/components/physics/i-physics-world-3d.component.ts/#iphysicsworld3dcomponent-interface","title":"IPhysicsWorld3dComponent (interface)","text":"<p>Signature</p> <pre><code>export interface IPhysicsWorld3dComponent extends IPhysicsWorldComponent&lt;Point3, Point4&gt; {\n  readonly factory: IPhysicsBody3dComponentFactory\n  readonly loader: IPhysicsBody3dComponentLoader\n}\n</code></pre>"},{"location":"modules/core/3d/components/physics/i-raycast-vehicle.component.ts/","title":"core/3d/components/physics/i-raycast-vehicle.component.ts","text":""},{"location":"modules/core/3d/components/physics/i-raycast-vehicle.component.ts/#i-raycast-vehiclecomponent-overview","title":"i-raycast-vehicle.component overviewTable of contents","text":"<ul> <li>utils</li> <li>IRaycastVehicleComponent (interface)</li> <li>SuspensionOptions (type alias)</li> <li>WheelOptions (type alias)</li> </ul>"},{"location":"modules/core/3d/components/physics/i-raycast-vehicle.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/components/physics/i-raycast-vehicle.component.ts/#iraycastvehiclecomponent-interface","title":"IRaycastVehicleComponent (interface)","text":"<p>Signature</p> <pre><code>export interface IRaycastVehicleComponent&lt;PW extends IPhysicsWorld3dComponent = IPhysicsWorld3dComponent&gt;\n  extends IRigidBody3dComponent&lt;PW&gt; {\n</code></pre>"},{"location":"modules/core/3d/components/physics/i-raycast-vehicle.component.ts/#suspensionoptions-type-alias","title":"SuspensionOptions (type alias)","text":"<p>Signature</p> <pre><code>export type SuspensionOptions = {\n  stiffness: number\n  damping: number\n  compression: number\n  restLength: number\n}\n</code></pre>"},{"location":"modules/core/3d/components/physics/i-raycast-vehicle.component.ts/#wheeloptions-type-alias","title":"WheelOptions (type alias)","text":"<p>Signature</p> <pre><code>export type WheelOptions = {\n  isLeft: boolean\n  isFront: boolean\n  tyreWidth: number\n  tyreRadius: number\n  position: Point3\n  frictionSlip: number // friction with road\n  rollInfluence: number\n  maxTravel: number\n}\n</code></pre>"},{"location":"modules/core/3d/components/physics/i-rigid-body-3d.component.ts/","title":"core/3d/components/physics/i-rigid-body-3d.component.ts","text":""},{"location":"modules/core/3d/components/physics/i-rigid-body-3d.component.ts/#i-rigid-body-3dcomponent-overview","title":"i-rigid-body-3d.component overviewTable of contents","text":"<ul> <li>utils</li> <li>IRigidBody3dComponent (interface)</li> </ul>"},{"location":"modules/core/3d/components/physics/i-rigid-body-3d.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/components/physics/i-rigid-body-3d.component.ts/#irigidbody3dcomponent-interface","title":"IRigidBody3dComponent (interface)","text":"<p>Signature</p> <pre><code>export interface IRigidBody3dComponent&lt;PW extends IPhysicsWorld3dComponent = IPhysicsWorld3dComponent&gt;\n  extends IRigidBodyComponent&lt;Point3, Point4, PW&gt; {\n  angularVelocity: Point3\n}\n</code></pre>"},{"location":"modules/core/3d/components/physics/i-trigger-3d.component.ts/","title":"core/3d/components/physics/i-trigger-3d.component.ts","text":""},{"location":"modules/core/3d/components/physics/i-trigger-3d.component.ts/#i-trigger-3dcomponent-overview","title":"i-trigger-3d.component overviewTable of contents","text":"<ul> <li>utils</li> <li>ITrigger3dComponent (interface)</li> </ul>"},{"location":"modules/core/3d/components/physics/i-trigger-3d.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/components/physics/i-trigger-3d.component.ts/#itrigger3dcomponent-interface","title":"ITrigger3dComponent (interface)","text":"<p>Signature</p> <pre><code>export interface ITrigger3dComponent&lt;PW extends IPhysicsWorld3dComponent = IPhysicsWorld3dComponent&gt;\n  extends ITriggerComponent&lt;Point3, Point4, PW&gt; {\n</code></pre>"},{"location":"modules/core/3d/components/rendering/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/components/rendering/i-camera.component.ts</li> <li>core/3d/components/rendering/i-display-object-3d.component.ts</li> <li>core/3d/components/rendering/i-renderer-3d.component.ts</li> <li>core/3d/components/rendering/i-visual-scene-3d.component.ts</li> </ul>"},{"location":"modules/core/3d/components/rendering/i-camera.component.ts/","title":"core/3d/components/rendering/i-camera.component.ts","text":""},{"location":"modules/core/3d/components/rendering/i-camera.component.ts/#i-cameracomponent-overview","title":"i-camera.component overviewTable of contents","text":"<ul> <li>utils</li> <li>ICameraComponent (interface)</li> </ul>"},{"location":"modules/core/3d/components/rendering/i-camera.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/components/rendering/i-camera.component.ts/#icameracomponent-interface","title":"ICameraComponent (interface)","text":"<p>Signature</p> <pre><code>export interface ICameraComponent&lt;VS extends IVisualScene3dComponent = IVisualScene3dComponent&gt;\n  extends IDisplayObject3dComponent&lt;VS&gt; {\n</code></pre>"},{"location":"modules/core/3d/components/rendering/i-display-object-3d.component.ts/","title":"core/3d/components/rendering/i-display-object-3d.component.ts","text":""},{"location":"modules/core/3d/components/rendering/i-display-object-3d.component.ts/#i-display-object-3dcomponent-overview","title":"i-display-object-3d.component overviewTable of contents","text":"<ul> <li>utils</li> <li>IDisplayObject3dComponent (interface)</li> </ul>"},{"location":"modules/core/3d/components/rendering/i-display-object-3d.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/components/rendering/i-display-object-3d.component.ts/#idisplayobject3dcomponent-interface","title":"IDisplayObject3dComponent (interface)","text":"<p>Signature</p> <pre><code>export interface IDisplayObject3dComponent&lt;VS extends IVisualScene3dComponent = IVisualScene3dComponent&gt;\n  extends IDisplayObjectComponent&lt;Point3, Point4, VS&gt; {}\n</code></pre>"},{"location":"modules/core/3d/components/rendering/i-renderer-3d.component.ts/","title":"core/3d/components/rendering/i-renderer-3d.component.ts","text":""},{"location":"modules/core/3d/components/rendering/i-renderer-3d.component.ts/#i-renderer-3dcomponent-overview","title":"i-renderer-3d.component overviewTable of contents","text":"<ul> <li>utils</li> <li>IRenderer3dComponent (class)<ul> <li>camera (property)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/components/rendering/i-renderer-3d.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/components/rendering/i-renderer-3d.component.ts/#irenderer3dcomponent-class","title":"IRenderer3dComponent (class)","text":"<p>Signature</p> <pre><code>export declare class IRenderer3dComponent&lt;VS, CC&gt;\n</code></pre>"},{"location":"modules/core/3d/components/rendering/i-renderer-3d.component.ts/#camera-property","title":"camera (property)","text":"<p>Signature</p> <pre><code>camera: CC\n</code></pre>"},{"location":"modules/core/3d/components/rendering/i-visual-scene-3d.component.ts/","title":"core/3d/components/rendering/i-visual-scene-3d.component.ts","text":""},{"location":"modules/core/3d/components/rendering/i-visual-scene-3d.component.ts/#i-visual-scene-3dcomponent-overview","title":"i-visual-scene-3d.component overviewTable of contents","text":"<ul> <li>utils</li> <li>IVisualScene3dComponent (interface)</li> </ul>"},{"location":"modules/core/3d/components/rendering/i-visual-scene-3d.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/components/rendering/i-visual-scene-3d.component.ts/#ivisualscene3dcomponent-interface","title":"IVisualScene3dComponent (interface)","text":"<p>Signature</p> <pre><code>export interface IVisualScene3dComponent extends IVisualSceneComponent&lt;Point3, Point4&gt; {\n  readonly factory: IDisplayObject3dComponentFactory\n  readonly loader: IDisplayObject3dComponentLoader\n\n  createRenderer(\n    camera: ICameraComponent,\n    canvas?: HTMLCanvasElement,\n    rendererOptions?: Partial&lt;RendererOptions&gt;\n  ): IRenderer3dComponent\n}\n</code></pre>"},{"location":"modules/core/3d/entities/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/entities/controllers</li> <li>core/3d/entities/entity-3d.ts</li> <li>core/3d/entities/gg-car</li> <li>core/3d/entities/i-renderable-3d.entity.ts</li> <li>core/3d/entities/map-graph-3d.entity.ts</li> <li>core/3d/entities/raycast-vehicle-3d.entity.ts</li> <li>core/3d/entities/renderer-3d.entity.ts</li> <li>core/3d/entities/trigger-3d.entity.ts</li> </ul>"},{"location":"modules/core/3d/entities/entity-3d.ts/","title":"core/3d/entities/entity-3d.ts","text":""},{"location":"modules/core/3d/entities/entity-3d.ts/#entity-3d-overview","title":"entity-3d overviewTable of contents","text":"<ul> <li>utils</li> <li>Entity3d (class)<ul> <li>updateVisibility (method)</li> <li>runTransformBinding (method)</li> <li>tickOrder (property)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/entities/entity-3d.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/entity-3d.ts/#entity3d-class","title":"Entity3d (class)","text":"<p>Signature</p> <pre><code>export declare class Entity3d&lt;VS, PW&gt; {\n  constructor(\n    public readonly object3D: IDisplayObject3dComponent | null,\n    public readonly objectBody: IRigidBody3dComponent | null = null\n  )\n}\n</code></pre>"},{"location":"modules/core/3d/entities/entity-3d.ts/#updatevisibility-method","title":"updateVisibility (method)","text":"<p>Signature</p> <pre><code>public updateVisibility(): void\n</code></pre>"},{"location":"modules/core/3d/entities/entity-3d.ts/#runtransformbinding-method","title":"runTransformBinding (method)","text":"<p>Synchronize physics body transform with entity (and mesh if defined)</p> <p>Signature</p> <pre><code>protected runTransformBinding(objectBody: IRigidBody3dComponent, object3D: IDisplayObject3dComponent | null): void\n</code></pre>"},{"location":"modules/core/3d/entities/entity-3d.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: TickOrder.OBJECTS_BINDING\n</code></pre>"},{"location":"modules/core/3d/entities/i-renderable-3d.entity.ts/","title":"core/3d/entities/i-renderable-3d.entity.ts","text":""},{"location":"modules/core/3d/entities/i-renderable-3d.entity.ts/#i-renderable-3dentity-overview","title":"i-renderable-3d.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>IRenderable3dEntity (class)</li> </ul>"},{"location":"modules/core/3d/entities/i-renderable-3d.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/i-renderable-3d.entity.ts/#irenderable3dentity-class","title":"IRenderable3dEntity (class)","text":"<p>Signature</p> <pre><code>export declare class IRenderable3dEntity&lt;VS, PW&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/","title":"core/3d/entities/map-graph-3d.entity.ts","text":""},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#map-graph-3dentity-overview","title":"map-graph-3d.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dMapGraphEntityOptions (type alias)</li> <li>MapGraph (class)<ul> <li>fromMapArray (static method)</li> <li>fromMapSquareGrid (static method)</li> <li>getNearestDummy (method)</li> <li>nodes (method)</li> </ul> </li> <li>MapGraph3dEntity (class)<ul> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>loadChunk (method)</li> <li>disposeChunk (method)</li> <li>tickOrder (property)</li> <li>loaderCursorEntity$ (property)</li> <li>loaded (property)</li> <li>_chunkLoaded$ (property)</li> <li>_world (property)</li> <li>mapGraphNodes (property)</li> <li>options (property)</li> </ul> </li> <li>MapGraphNodeType (type alias)</li> </ul>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#gg3dmapgraphentityoptions-type-alias","title":"Gg3dMapGraphEntityOptions (type alias)","text":"<p>Signature</p> <pre><code>export type Gg3dMapGraphEntityOptions = {\n  // depth in tree to load. 0 means load only the nearest node, 1 means nearest + all of it's neighbours etc.\n  loadDepth: number\n  // additional depth, means unload delay. Nodes with this depth won't load, but if already loaded, will not be destroyed\n  inertia: number\n}\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#mapgraph-class","title":"MapGraph (class)","text":"<p>Signature</p> <pre><code>export declare class MapGraph\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#frommaparray-static-method","title":"fromMapArray (static method)","text":"<p>Creates a new MapGraph instance from an array of elements, where each element in the array is a node in the graph. The first element of the array is used as the root node of the graph.</p> <p>Signature</p> <pre><code>static fromMapArray(array: MapGraphNodeType[], closed: boolean = false): MapGraph\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#frommapsquaregrid-static-method","title":"fromMapSquareGrid (static method)","text":"<p>Creates a new MapGraph instance from a two-dimensional square grid of elements, where each element in the grid is a node in the graph. The top-left element of the grid is used as the root node of the graph. The nodes in the graph are created in the same order as the elements in the grid, from left to right and then from top to bottom.</p> <p>Signature</p> <pre><code>static fromMapSquareGrid(grid: MapGraphNodeType[][]): MapGraph\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#getnearestdummy-method","title":"getNearestDummy (method)","text":"<p>Signature</p> <pre><code>public getNearestDummy(thisNodes: Graph&lt;MapGraphNodeType&gt;[], cursor: Point3): Graph&lt;MapGraphNodeType&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#nodes-method","title":"nodes (method)","text":"<p>Signature</p> <pre><code>nodes(): MapGraph[]\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#mapgraph3dentity-class","title":"MapGraph3dEntity (class)","text":"<p>Signature</p> <pre><code>export declare class MapGraph3dEntity {\n  constructor(public readonly mapGraph: MapGraph, options: Partial&lt;Gg3dMapGraphEntityOptions&gt; = {})\n}\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: Gg3dWorld)\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>onRemoved()\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#loadchunk-method","title":"loadChunk (method)","text":"<p>Signature</p> <pre><code>protected async loadChunk(node: MapGraphNodeType): Promise&lt;[Entity3d[], LoadResultWithProps]&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#disposechunk-method","title":"disposeChunk (method)","text":"<p>Signature</p> <pre><code>protected disposeChunk(node: MapGraphNodeType)\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: TickOrder.POST_RENDERING\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#loadercursorentity-property","title":"loaderCursorEntity$ (property)","text":"<p>Signature</p> <pre><code>readonly loaderCursorEntity$: any\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#loaded-property","title":"loaded (property)","text":"<p>Signature</p> <pre><code>readonly loaded: any\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#_chunkloaded-property","title":"_chunkLoaded$ (property)","text":"<p>Signature</p> <pre><code>_chunkLoaded$: any\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#_world-property","title":"_world (property)","text":"<p>Signature</p> <pre><code>_world: Gg3dWorld&lt;IVisualScene3dComponent, IPhysicsWorld3dComponent&gt; | null\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#mapgraphnodes-property","title":"mapGraphNodes (property)","text":"<p>Signature</p> <pre><code>readonly mapGraphNodes: MapGraph[]\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#options-property","title":"options (property)","text":"<p>Signature</p> <pre><code>readonly options: Gg3dMapGraphEntityOptions\n</code></pre>"},{"location":"modules/core/3d/entities/map-graph-3d.entity.ts/#mapgraphnodetype-type-alias","title":"MapGraphNodeType (type alias)","text":"<p>Signature</p> <pre><code>export type MapGraphNodeType = {\n  path: string\n  position: Point3\n  rotation?: Point4\n  loadOptions: Partial&lt;Omit&lt;LoadOptions, 'position' | 'rotation'&gt;&gt;\n}\n</code></pre>"},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/","title":"core/3d/entities/raycast-vehicle-3d.entity.ts","text":""},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/#raycast-vehicle-3dentity-overview","title":"raycast-vehicle-3d.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>RVEntityAxleOptions (type alias)</li> <li>RVEntityProperties (type alias)</li> <li>RVEntitySharedWheelOptions (type alias)</li> <li>RaycastVehicle3dEntity (class)<ul> <li>getSpeed (method)</li> <li>applyTractionForce (method)</li> <li>applyBrake (method)</li> <li>runTransformBinding (method)</li> <li>resetTo (method)</li> <li>wheels (property)</li> <li>wheelLocalRotation (property)</li> <li>frontWheelsIndices (property)</li> <li>rearWheelsIndices (property)</li> <li>tractionWheelIndices (property)</li> <li>tractionWheelRadius (property)</li> </ul> </li> <li>WheelDisplayOptions (type alias)</li> </ul>"},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/#rventityaxleoptions-type-alias","title":"RVEntityAxleOptions (type alias)","text":"<p>Signature</p> <pre><code>export type RVEntityAxleOptions = {\n  halfAxleWidth: number\n  axlePosition: number\n  axleHeight: number\n} &amp; RVEntitySharedWheelOptions\n</code></pre>"},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/#rventityproperties-type-alias","title":"RVEntityProperties (type alias)","text":"<p>Signature</p> <pre><code>export type RVEntityProperties = {\n  typeOfDrive: 'RWD' | 'FWD' | '4WD'\n  suspension: SuspensionOptions\n} &amp; (\n  | {\n      wheelBase: {\n        shared: RVEntitySharedWheelOptions\n        front: RVEntityAxleOptions\n        rear: RVEntityAxleOptions\n      }\n    }\n  | {\n      wheelOptions: (RVEntitySharedWheelOptions &amp; {\n        isLeft: boolean\n        isFront: boolean\n        position: Point3\n      })[]\n      sharedWheelOptions?: RVEntitySharedWheelOptions\n    }\n)\n</code></pre>"},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/#rventitysharedwheeloptions-type-alias","title":"RVEntitySharedWheelOptions (type alias)","text":"<p>Signature</p> <pre><code>export type RVEntitySharedWheelOptions = {\n  tyreWidth?: number\n  tyreRadius?: number\n  frictionSlip?: number\n  rollInfluence?: number\n  maxTravel?: number\n  display?: WheelDisplayOptions\n}\n</code></pre>"},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/#raycastvehicle3dentity-class","title":"RaycastVehicle3dEntity (class)","text":"<p>Signature</p> <pre><code>export declare class RaycastVehicle3dEntity {\n  constructor(\n    public readonly carProperties: RVEntityProperties,\n    public readonly chassis3D: IDisplayObject3dComponent | null,\n    public readonly chassisBody: IRaycastVehicleComponent\n  )\n}\n</code></pre>"},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/#getspeed-method","title":"getSpeed (method)","text":"<p>Signature</p> <pre><code>public getSpeed(): number\n</code></pre>"},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/#applytractionforce-method","title":"applyTractionForce (method)","text":"<p>Signature</p> <pre><code>public applyTractionForce(force: number)\n</code></pre>"},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/#applybrake-method","title":"applyBrake (method)","text":"<p>Signature</p> <pre><code>public applyBrake(axle: 'front' | 'rear' | 'both', force: number)\n</code></pre>"},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/#runtransformbinding-method","title":"runTransformBinding (method)","text":"<p>Signature</p> <pre><code>protected runTransformBinding(objectBody: IRigidBody3dComponent, object3D: IDisplayObject3dComponent): void\n</code></pre>"},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/#resetto-method","title":"resetTo (method)","text":"<p>Signature</p> <pre><code>public resetTo(\n    options: {\n      position?: Point3;\n      rotation?: Point4;\n    } = {},\n  )\n</code></pre>"},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/#wheels-property","title":"wheels (property)","text":"<p>Signature</p> <pre><code>readonly wheels: ((IEntity&lt;any, any, IVisualSceneComponent&lt;any, any&gt;, IPhysicsWorldComponent&lt;any, any&gt;&gt; &amp; IPositionable3d) | null)[]\n</code></pre>"},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/#wheellocalrotation-property","title":"wheelLocalRotation (property)","text":"<p>Signature</p> <pre><code>readonly wheelLocalRotation: (Point4 | null)[]\n</code></pre>"},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/#frontwheelsindices-property","title":"frontWheelsIndices (property)","text":"<p>Signature</p> <pre><code>readonly frontWheelsIndices: number[]\n</code></pre>"},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/#rearwheelsindices-property","title":"rearWheelsIndices (property)","text":"<p>Signature</p> <pre><code>readonly rearWheelsIndices: number[]\n</code></pre>"},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/#tractionwheelindices-property","title":"tractionWheelIndices (property)","text":"<p>Signature</p> <pre><code>readonly tractionWheelIndices: number[]\n</code></pre>"},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/#tractionwheelradius-property","title":"tractionWheelRadius (property)","text":"<p>Signature</p> <pre><code>readonly tractionWheelRadius: number\n</code></pre>"},{"location":"modules/core/3d/entities/raycast-vehicle-3d.entity.ts/#wheeldisplayoptions-type-alias","title":"WheelDisplayOptions (type alias)","text":"<p>Signature</p> <pre><code>export type WheelDisplayOptions = {\n  displayObject?: IDisplayObject3dComponent\n  wheelObjectDirection?: AxisDirection3\n  autoScaleMesh?: boolean\n}\n</code></pre>"},{"location":"modules/core/3d/entities/renderer-3d.entity.ts/","title":"core/3d/entities/renderer-3d.entity.ts","text":""},{"location":"modules/core/3d/entities/renderer-3d.entity.ts/#renderer-3dentity-overview","title":"renderer-3d.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>Renderer3dEntity (class)</li> </ul>"},{"location":"modules/core/3d/entities/renderer-3d.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/renderer-3d.entity.ts/#renderer3dentity-class","title":"Renderer3dEntity (class)","text":"<p>Signature</p> <pre><code>export declare class Renderer3dEntity&lt;VS, CC, RC&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/trigger-3d.entity.ts/","title":"core/3d/entities/trigger-3d.entity.ts","text":""},{"location":"modules/core/3d/entities/trigger-3d.entity.ts/#trigger-3dentity-overview","title":"trigger-3d.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>Trigger3dEntity (class)<ul> <li>tickOrder (property)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/entities/trigger-3d.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/trigger-3d.entity.ts/#trigger3dentity-class","title":"Trigger3dEntity (class)","text":"<p>Signature</p> <pre><code>export declare class Trigger3dEntity {\n  constructor(public readonly objectBody: ITrigger3dComponent)\n}\n</code></pre>"},{"location":"modules/core/3d/entities/trigger-3d.entity.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: TickOrder.OBJECTS_BINDING\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/entities/controllers/animators</li> <li>core/3d/entities/controllers/input</li> </ul>"},{"location":"modules/core/3d/entities/controllers/animators/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/entities/controllers/animators/camera-3d.animator.ts</li> <li>core/3d/entities/controllers/animators/entity-3d-positioning.animator.ts</li> </ul>"},{"location":"modules/core/3d/entities/controllers/animators/camera-3d.animator.ts/","title":"core/3d/entities/controllers/animators/camera-3d.animator.ts","text":""},{"location":"modules/core/3d/entities/controllers/animators/camera-3d.animator.ts/#camera-3danimator-overview","title":"camera-3d.animator overviewTable of contents","text":"<ul> <li>utils</li> <li>Camera3dAnimationArgs (type alias)</li> <li>Camera3dAnimator (class)<ul> <li>onSpawned (method)</li> <li>applyPositioning (method)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/entities/controllers/animators/camera-3d.animator.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/controllers/animators/camera-3d.animator.ts/#camera3danimationargs-type-alias","title":"Camera3dAnimationArgs (type alias)","text":"<p>Signature</p> <pre><code>export type Camera3dAnimationArgs = {\n  position: Point3\n  target: Point3\n  up?: Point3\n  fov?: number\n}\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/animators/camera-3d.animator.ts/#camera3danimator-class","title":"Camera3dAnimator (class)","text":"<p>Signature</p> <pre><code>export declare class Camera3dAnimator {\n  constructor(public entity: Renderer3dEntity, protected _animationFunction: AnimationFunction&lt;Camera3dAnimationArgs&gt;)\n}\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/animators/camera-3d.animator.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: Gg3dWorld)\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/animators/camera-3d.animator.ts/#applypositioning-method","title":"applyPositioning (method)","text":"<p>Signature</p> <pre><code>protected applyPositioning(value: Camera3dAnimationArgs)\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/animators/entity-3d-positioning.animator.ts/","title":"core/3d/entities/controllers/animators/entity-3d-positioning.animator.ts","text":""},{"location":"modules/core/3d/entities/controllers/animators/entity-3d-positioning.animator.ts/#entity-3d-positioninganimator-overview","title":"entity-3d-positioning.animator overviewTable of contents","text":"<ul> <li>utils</li> <li>Entity3dPositioningAnimator (class)<ul> <li>onSpawned (method)</li> <li>applyPositioning (method)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/entities/controllers/animators/entity-3d-positioning.animator.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/controllers/animators/entity-3d-positioning.animator.ts/#entity3dpositioninganimator-class","title":"Entity3dPositioningAnimator (class)","text":"<p>Signature</p> <pre><code>export declare class Entity3dPositioningAnimator&lt;T&gt; {\n  constructor(public entity: T, protected _animationFunction: AnimationFunction&lt;Positioning3d&gt;)\n}\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/animators/entity-3d-positioning.animator.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: Gg3dWorld)\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/animators/entity-3d-positioning.animator.ts/#applypositioning-method","title":"applyPositioning (method)","text":"<p>Signature</p> <pre><code>protected applyPositioning(value: Positioning3d)\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/entities/controllers/input/car-keyboard-handling.controller.ts</li> <li>core/3d/entities/controllers/input/free-camera.controller.ts</li> <li>core/3d/entities/controllers/input/gg-car-keyboard-handling.controller.ts</li> <li>core/3d/entities/controllers/input/orbit-camera.controller.ts</li> </ul>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/","title":"core/3d/entities/controllers/input/car-keyboard-handling.controller.ts","text":""},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#car-keyboard-handlingcontroller-overview","title":"car-keyboard-handling.controller overviewTable of contents","text":"<ul> <li>utils</li> <li>CarHandlingOutput (type alias)</li> <li>CarKeyboardControllerOptions (type alias)</li> <li>CarKeyboardHandlingController (class)<ul> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>tickOrder (property)</li> <li>directionsInput (property)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#carhandlingoutput-type-alias","title":"CarHandlingOutput (type alias)","text":"<p>Signature</p> <pre><code>export type CarHandlingOutput = { upDown: number; leftRight: number }\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#carkeyboardcontrolleroptions-type-alias","title":"CarKeyboardControllerOptions (type alias)","text":"<p>Signature</p> <pre><code>export type CarKeyboardControllerOptions = {\n  readonly keymap: DirectionKeyboardKeymap\n  readonly maxSteerDeltaPerSecond: number\n}\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#carkeyboardhandlingcontroller-class","title":"CarKeyboardHandlingController (class)","text":"<p>Signature</p> <pre><code>export declare class CarKeyboardHandlingController {\n  constructor(\n    protected readonly keyboard: KeyboardInput,\n    protected readonly options: CarKeyboardControllerOptions = {\n      keymap: 'arrows',\n      maxSteerDeltaPerSecond: 12,\n    }\n  )\n}\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>async onSpawned(world: GgWorld&lt;any, any&gt;): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>async onRemoved(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: TickOrder.INPUT_CONTROLLERS\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#directionsinput-property","title":"directionsInput (property)","text":"<p>Signature</p> <pre><code>readonly directionsInput: DirectionKeyboardInput\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/","title":"core/3d/entities/controllers/input/free-camera.controller.ts","text":""},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/#free-cameracontroller-overview","title":"free-camera.controller overviewTable of contents","text":"<ul> <li>utils</li> <li>FreeCameraController (class)<ul> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>tickOrder (property)</li> <li>mouseInput (property)</li> <li>directionsInput (property)</li> </ul> </li> <li>FreeCameraControllerOptions (type alias)</li> </ul>"},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/#freecameracontroller-class","title":"FreeCameraController (class)","text":"<p>A controller for a free-moving camera.</p> <p>Signature</p> <pre><code>export declare class FreeCameraController {\n  constructor(\n    protected readonly keyboard: KeyboardInput,\n    protected readonly camera: Renderer3dEntity,\n    protected readonly options: FreeCameraControllerOptions = {\n      keymap: 'wasd',\n      movementOptions: { speed: 0.5 },\n      mouseOptions: {},\n      ignoreMouseUnlessPointerLocked: false,\n      ignoreKeyboardUnlessPointerLocked: false,\n    }\n  )\n}\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>async onSpawned(world: GgWorld&lt;any, any&gt;): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>async onRemoved(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: TickOrder.INPUT_CONTROLLERS\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/#mouseinput-property","title":"mouseInput (property)","text":"<p>The mouse input controller used for camera rotation.</p> <p>Signature</p> <pre><code>readonly mouseInput: MouseInput\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/#directionsinput-property","title":"directionsInput (property)","text":"<p>The keyboard input controller used for camera movement.</p> <p>Signature</p> <pre><code>readonly directionsInput: DirectionKeyboardInput\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/#freecameracontrolleroptions-type-alias","title":"FreeCameraControllerOptions (type alias)","text":"<p>Options for configuring a FreeCameraInput controller.</p> <p>Signature</p> <pre><code>export type FreeCameraControllerOptions = {\n  /**\n   * A keymap for controlling camera movement, where each key corresponds to a movement direction.\n   */\n  keymap: DirectionKeyboardKeymap\n  /**\n   * Options for configuring camera movement.\n   */\n  movementOptions: {\n    /**\n     * The speed of camera movement.\n     */\n    speed: number\n  }\n  /**\n   * Flag to ignore cursor movement if pointer was not locked. By default false\n   */\n  ignoreMouseUnlessPointerLocked: boolean\n  /**\n   * Flag to ignore keyboard events if pointer was not locked. By default false\n   */\n  ignoreKeyboardUnlessPointerLocked: boolean\n  /**\n   * Options for configuring mouse input.\n   */\n  mouseOptions: Partial&lt;MouseInputOptions&gt;\n}\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/gg-car-keyboard-handling.controller.ts/","title":"core/3d/entities/controllers/input/gg-car-keyboard-handling.controller.ts","text":""},{"location":"modules/core/3d/entities/controllers/input/gg-car-keyboard-handling.controller.ts/#gg-car-keyboard-handlingcontroller-overview","title":"gg-car-keyboard-handling.controller overviewTable of contents","text":"<ul> <li>utils</li> <li>GgCarKeyboardControllerOptions (type alias)</li> <li>GgCarKeyboardHandlingController (class)<ul> <li>onSpawned (method)</li> <li>tickOrder (property)</li> <li>carHandlingInput (property)</li> <li>switchingGearsEnabled (property)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/entities/controllers/input/gg-car-keyboard-handling.controller.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/controllers/input/gg-car-keyboard-handling.controller.ts/#ggcarkeyboardcontrolleroptions-type-alias","title":"GgCarKeyboardControllerOptions (type alias)","text":"<p>Signature</p> <pre><code>export type GgCarKeyboardControllerOptions = CarKeyboardControllerOptions &amp; {\n  gearUpDownKeys: [string, string]\n  autoReverse: boolean\n  handbrakeKey: string\n}\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/gg-car-keyboard-handling.controller.ts/#ggcarkeyboardhandlingcontroller-class","title":"GgCarKeyboardHandlingController (class)","text":"<p>Signature</p> <pre><code>export declare class GgCarKeyboardHandlingController {\n  constructor(\n    protected readonly keyboard: KeyboardInput,\n    public car: GgCarEntity | null,\n    protected readonly options: GgCarKeyboardControllerOptions = {\n      keymap: 'arrows',\n      maxSteerDeltaPerSecond: 12,\n      gearUpDownKeys: ['KeyA', 'KeyZ'],\n      autoReverse: true,\n      handbrakeKey: 'Space',\n    }\n  )\n}\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/gg-car-keyboard-handling.controller.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>async onSpawned(world: GgWorld&lt;any, any&gt;): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/gg-car-keyboard-handling.controller.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: TickOrder.INPUT_CONTROLLERS\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/gg-car-keyboard-handling.controller.ts/#carhandlinginput-property","title":"carHandlingInput (property)","text":"<p>Signature</p> <pre><code>readonly carHandlingInput: CarKeyboardHandlingController\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/gg-car-keyboard-handling.controller.ts/#switchinggearsenabled-property","title":"switchingGearsEnabled (property)","text":"<p>Signature</p> <pre><code>switchingGearsEnabled: boolean\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/orbit-camera.controller.ts/","title":"core/3d/entities/controllers/input/orbit-camera.controller.ts","text":""},{"location":"modules/core/3d/entities/controllers/input/orbit-camera.controller.ts/#orbit-cameracontroller-overview","title":"orbit-camera.controller overviewTable of contents","text":"<ul> <li>utils</li> <li>OrbitCameraController (class)<ul> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>tickOrder (property)</li> <li>options (property)</li> <li>mouseInput (property)</li> <li>spherical (property)</li> <li>target (property)</li> </ul> </li> <li>OrbitCameraControllerOptions (type alias)</li> </ul>"},{"location":"modules/core/3d/entities/controllers/input/orbit-camera.controller.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/controllers/input/orbit-camera.controller.ts/#orbitcameracontroller-class","title":"OrbitCameraController (class)","text":"<p>Signature</p> <pre><code>export declare class OrbitCameraController {\n  constructor(protected readonly camera: Renderer3dEntity, options: Partial&lt;OrbitCameraControllerOptions&gt; = {})\n}\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/orbit-camera.controller.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>async onSpawned(world: GgWorld&lt;any, any&gt;): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/orbit-camera.controller.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>async onRemoved(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/orbit-camera.controller.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: TickOrder.INPUT_CONTROLLERS\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/orbit-camera.controller.ts/#options-property","title":"options (property)","text":"<p>Signature</p> <pre><code>readonly options: OrbitCameraControllerOptions\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/orbit-camera.controller.ts/#mouseinput-property","title":"mouseInput (property)","text":"<p>Signature</p> <pre><code>readonly mouseInput: MouseInput\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/orbit-camera.controller.ts/#spherical-property","title":"spherical (property)","text":"<p>Signature</p> <pre><code>spherical: MutableSpherical\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/orbit-camera.controller.ts/#target-property","title":"target (property)","text":"<p>Signature</p> <pre><code>target: Point3\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/orbit-camera.controller.ts/#orbitcameracontrolleroptions-type-alias","title":"OrbitCameraControllerOptions (type alias)","text":"<p>Signature</p> <pre><code>export type OrbitCameraControllerOptions = {\n  mouseOptions: Partial&lt;MouseInputOptions&gt;\n  orbiting: { sensitivityX: number; sensitivityY: number } | false\n  zooming: { sensitivity: number } | false\n  panning: { sensitivityX: number; sensitivityY: number } | false\n  dollying: { sensitivity: number } | false\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-car/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/entities/gg-car/gg-car.entity.ts</li> </ul>"},{"location":"modules/core/3d/entities/gg-car/gg-car.entity.ts/","title":"core/3d/entities/gg-car/gg-car.entity.ts","text":""},{"location":"modules/core/3d/entities/gg-car/gg-car.entity.ts/#gg-carentity-overview","title":"gg-car.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>GgCarEntity (class)<ul> <li>calculateRpmFromCarSpeed (method)</li> <li>setTailLightsOn (method)</li> <li>onSpawned (method)</li> <li>updateEngine (method)</li> <li>resetTo (method)</li> <li>tickOrder (property)</li> <li>_rpm$ (property)</li> <li>_acceleration$ (property)</li> <li>_brake$ (property)</li> <li>handBrake$ (property)</li> <li>raycastVehicle (property)</li> </ul> </li> <li>GgCarProperties (type alias)</li> </ul>"},{"location":"modules/core/3d/entities/gg-car/gg-car.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/gg-car/gg-car.entity.ts/#ggcarentity-class","title":"GgCarEntity (class)","text":"<p>Signature</p> <pre><code>export declare class GgCarEntity {\n  constructor(\n    public readonly carProperties: GgCarProperties,\n    chassis3D: IDisplayObject3dComponent | null,\n    chassisBody: IRaycastVehicleComponent\n  )\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-car/gg-car.entity.ts/#calculaterpmfromcarspeed-method","title":"calculateRpmFromCarSpeed (method)","text":"<p>Signature</p> <pre><code>public calculateRpmFromCarSpeed(): number\n</code></pre>"},{"location":"modules/core/3d/entities/gg-car/gg-car.entity.ts/#settaillightson-method","title":"setTailLightsOn (method)","text":"<p>Signature</p> <pre><code>protected setTailLightsOn(value: boolean)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-car/gg-car.entity.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: Gg3dWorld)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-car/gg-car.entity.ts/#updateengine-method","title":"updateEngine (method)","text":"<p>Signature</p> <pre><code>protected updateEngine(delta: number)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-car/gg-car.entity.ts/#resetto-method","title":"resetTo (method)","text":"<p>Signature</p> <pre><code>public resetTo(\n    options: {\n      position?: Point3;\n      rotation?: Point4;\n    } = {},\n  )\n</code></pre>"},{"location":"modules/core/3d/entities/gg-car/gg-car.entity.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: number\n</code></pre>"},{"location":"modules/core/3d/entities/gg-car/gg-car.entity.ts/#_rpm-property","title":"_rpm$ (property)","text":"<p>Signature</p> <pre><code>readonly _rpm$: any\n</code></pre>"},{"location":"modules/core/3d/entities/gg-car/gg-car.entity.ts/#_acceleration-property","title":"_acceleration$ (property)","text":"<p>Signature</p> <pre><code>_acceleration$: any\n</code></pre>"},{"location":"modules/core/3d/entities/gg-car/gg-car.entity.ts/#_brake-property","title":"_brake$ (property)","text":"<p>Signature</p> <pre><code>_brake$: any\n</code></pre>"},{"location":"modules/core/3d/entities/gg-car/gg-car.entity.ts/#handbrake-property","title":"handBrake$ (property)","text":"<p>Signature</p> <pre><code>handBrake$: any\n</code></pre>"},{"location":"modules/core/3d/entities/gg-car/gg-car.entity.ts/#raycastvehicle-property","title":"raycastVehicle (property)","text":"<p>Signature</p> <pre><code>readonly raycastVehicle: RaycastVehicle3dEntity\n</code></pre>"},{"location":"modules/core/3d/entities/gg-car/gg-car.entity.ts/#ggcarproperties-type-alias","title":"GgCarProperties (type alias)","text":"<p>Signature</p> <pre><code>export type GgCarProperties = RVEntityProperties &amp; {\n  mpsToRpmFactor?: number\n  engine: {\n    minRpm: number\n    maxRpm: number\n    torques: {\n      rpm: number\n      torque: number\n    }[]\n    maxRpmIncreasePerSecond: number\n    maxRpmDecreasePerSecond: number\n  }\n  brake: {\n    frontAxleForce: number\n    rearAxleForce: number\n    handbrakeForce: number\n  }\n  transmission: {\n    isAuto: boolean\n    reverseGearRatio: number\n    gearRatios: number[]\n    drivelineEfficiency: number\n    finalDriveRatio: number // differential\n    upShifts: number[]\n    autoHold: boolean\n  }\n  maxSteerAngle: number\n}\n</code></pre>"},{"location":"modules/core/3d/interfaces/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/interfaces/i-positionable-3d.ts</li> </ul>"},{"location":"modules/core/3d/interfaces/i-positionable-3d.ts/","title":"core/3d/interfaces/i-positionable-3d.ts","text":""},{"location":"modules/core/3d/interfaces/i-positionable-3d.ts/#i-positionable-3d-overview","title":"i-positionable-3d overviewTable of contents","text":"<ul> <li>utils</li> <li>IPositionable3d (interface)</li> </ul>"},{"location":"modules/core/3d/interfaces/i-positionable-3d.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/interfaces/i-positionable-3d.ts/#ipositionable3d-interface","title":"IPositionable3d (interface)","text":"<p>Signature</p> <pre><code>export interface IPositionable3d extends IPositionable&lt;Point3, Point4&gt; {}\n</code></pre>"},{"location":"modules/core/3d/models/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/models/body-options.ts</li> <li>core/3d/models/gg-meta.ts</li> <li>core/3d/models/shapes.ts</li> </ul>"},{"location":"modules/core/3d/models/body-options.ts/","title":"core/3d/models/body-options.ts","text":""},{"location":"modules/core/3d/models/body-options.ts/#body-options-overview","title":"body-options overviewTable of contents","text":"<ul> <li>utils</li> <li>Body3DOptions (interface)</li> </ul>"},{"location":"modules/core/3d/models/body-options.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/models/body-options.ts/#body3doptions-interface","title":"Body3DOptions (interface)","text":"<p>Signature</p> <pre><code>export interface Body3DOptions extends BodyOptions {}\n</code></pre>"},{"location":"modules/core/3d/models/gg-meta.ts/","title":"core/3d/models/gg-meta.ts","text":""},{"location":"modules/core/3d/models/gg-meta.ts/#gg-meta-overview","title":"gg-meta overviewTable of contents","text":"<ul> <li>utils</li> <li>GgCurve (type alias)</li> <li>GgDummy (type alias)</li> <li>GgMeta (type alias)</li> <li>GgRigidBody (type alias)</li> </ul>"},{"location":"modules/core/3d/models/gg-meta.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/models/gg-meta.ts/#ggcurve-type-alias","title":"GgCurve (type alias)","text":"<p>Signature</p> <pre><code>export type GgCurve = { name: string; cyclic: boolean; points: Point3[] } &amp; any\n</code></pre>"},{"location":"modules/core/3d/models/gg-meta.ts/#ggdummy-type-alias","title":"GgDummy (type alias)","text":"<p>Signature</p> <pre><code>export type GgDummy = { name: string; position: Point3; rotation: Point4 } &amp; any\n</code></pre>"},{"location":"modules/core/3d/models/gg-meta.ts/#ggmeta-type-alias","title":"GgMeta (type alias)","text":"<p>Signature</p> <pre><code>export type GgMeta = {\n  dummies: GgDummy[]\n  curves: GgCurve[]\n  rigidBodies: GgRigidBody[]\n}\n</code></pre>"},{"location":"modules/core/3d/models/gg-meta.ts/#ggrigidbody-type-alias","title":"GgRigidBody (type alias)","text":"<p>Signature</p> <pre><code>export type GgRigidBody = { name: string; position: Point3; rotation: Point4 } &amp; BodyShape3DDescriptor\n</code></pre>"},{"location":"modules/core/3d/models/shapes.ts/","title":"core/3d/models/shapes.ts","text":""},{"location":"modules/core/3d/models/shapes.ts/#shapes-overview","title":"shapes overviewTable of contents","text":"<ul> <li>utils</li> <li>BodyShape3DDescriptor (type alias)</li> <li>Shape3DDescriptor (type alias)</li> </ul>"},{"location":"modules/core/3d/models/shapes.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/models/shapes.ts/#bodyshape3ddescriptor-type-alias","title":"BodyShape3DDescriptor (type alias)","text":"<p>Signature</p> <pre><code>export type BodyShape3DDescriptor = { shape: Shape3DDescriptor; body: Partial&lt;Body3DOptions&gt; }\n</code></pre>"},{"location":"modules/core/3d/models/shapes.ts/#shape3ddescriptor-type-alias","title":"Shape3DDescriptor (type alias)","text":"<p>Signature</p> <pre><code>export type Shape3DDescriptor =\n  | { shape: 'BOX'; dimensions: Point3 }\n  | { shape: 'CONE' | 'CYLINDER'; radius: number; height: number }\n  | { shape: 'CAPSULE'; radius: number; centersDistance: number }\n  | { shape: 'SPHERE'; radius: number }\n  | { shape: 'COMPOUND'; children: { position?: Point3; rotation?: Point4; shape: Shape3DDescriptor }[] }\n  | { shape: 'CONVEX_HULL'; vertices: Point3[] }\n  | { shape: 'MESH'; vertices: Point3[]; faces: [number, number, number][] }\n</code></pre>"},{"location":"modules/core/base/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/clock</li> <li>core/base/components</li> <li>core/base/data-structures</li> <li>core/base/entities</li> <li>core/base/gg-world.ts</li> <li>core/base/index.ts</li> <li>core/base/inputs</li> <li>core/base/interfaces</li> <li>core/base/math</li> <li>core/base/models</li> </ul>"},{"location":"modules/core/base/gg-world.ts/","title":"core/base/gg-world.ts","text":""},{"location":"modules/core/base/gg-world.ts/#gg-world-overview","title":"gg-world overviewTable of contents","text":"<ul> <li>utils</li> <li>GgWorld (class)<ul> <li>init (method)</li> <li>start (method)</li> <li>pauseWorld (method)</li> <li>resumeWorld (method)</li> <li>createClock (method)</li> <li>dispose (method)</li> <li>addPrimitiveRigidBody (method)</li> <li>addEntity (method)</li> <li>removeEntity (method)</li> <li>worldClock (property)</li> <li>keyboardInput (property)</li> <li>name (property)</li> <li>children (property)</li> <li>tickListeners (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/gg-world.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/gg-world.ts/#ggworld-class","title":"GgWorld (class)","text":"<p>Signature</p> <pre><code>export declare class GgWorld&lt;D, R, V, P&gt; {\n  protected constructor(public readonly visualScene: V, public readonly physicsWorld: P)\n}\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#init-method","title":"init (method)","text":"<p>Signature</p> <pre><code>public async init()\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#start-method","title":"start (method)","text":"<p>Signature</p> <pre><code>public start()\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#pauseworld-method","title":"pauseWorld (method)","text":"<p>Signature</p> <pre><code>public pauseWorld()\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#resumeworld-method","title":"resumeWorld (method)","text":"<p>Signature</p> <pre><code>public resumeWorld()\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#createclock-method","title":"createClock (method)","text":"<p>Signature</p> <pre><code>public createClock(autoStart: boolean): PausableClock\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>public dispose(): void\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#addprimitiverigidbody-method","title":"addPrimitiveRigidBody (method)","text":"<p>Signature</p> <pre><code>abstract addPrimitiveRigidBody(\n    descr: any,\n    position?: D,\n    rotation?: R,\n  ): IPositionable&lt;D, R&gt; &amp; IRenderableEntity&lt;D, R, V, P&gt;;\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#addentity-method","title":"addEntity (method)","text":"<p>Signature</p> <pre><code>public addEntity(entity: IEntity): void\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#removeentity-method","title":"removeEntity (method)","text":"<p>Signature</p> <pre><code>public removeEntity(entity: IEntity, dispose = false): void\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#worldclock-property","title":"worldClock (property)","text":"<p>Signature</p> <pre><code>readonly worldClock: PausableClock\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#keyboardinput-property","title":"keyboardInput (property)","text":"<p>Signature</p> <pre><code>readonly keyboardInput: KeyboardInput\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#name-property","title":"name (property)","text":"<p>Signature</p> <pre><code>name: string\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#children-property","title":"children (property)","text":"<p>Signature</p> <pre><code>readonly children: IEntity&lt;any, any, IVisualSceneComponent&lt;any, any&gt;, IPhysicsWorldComponent&lt;any, any&gt;&gt;[]\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#ticklisteners-property","title":"tickListeners (property)","text":"<p>Signature</p> <pre><code>readonly tickListeners: IEntity&lt;any, any, IVisualSceneComponent&lt;any, any&gt;, IPhysicsWorldComponent&lt;any, any&gt;&gt;[]\n</code></pre>"},{"location":"modules/core/base/index.ts/","title":"core/base/index.ts","text":""},{"location":"modules/core/base/index.ts/#index-overview","title":"index overviewTable of contents","text":""},{"location":"modules/core/base/clock/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/clock/global-clock.ts</li> <li>core/base/clock/i-clock.ts</li> <li>core/base/clock/pausable-clock.ts</li> </ul>"},{"location":"modules/core/base/clock/global-clock.ts/","title":"core/base/clock/global-clock.ts","text":""},{"location":"modules/core/base/clock/global-clock.ts/#global-clock-overview","title":"global-clock overviewTable of contents","text":"<ul> <li>utils</li> <li>GgGlobalClock (class)<ul> <li>createChildClock (method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/clock/global-clock.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/clock/global-clock.ts/#ggglobalclock-class","title":"GgGlobalClock (class)","text":"<p>A singleton class, providing ability to track time, fire ticks, provide time elapsed + tick delta. Starts as soon as accessed and counts time from 01/01/1970</p> <p>Signature</p> <pre><code>export declare class GgGlobalClock {\n  private constructor()\n}\n</code></pre>"},{"location":"modules/core/base/clock/global-clock.ts/#createchildclock-method","title":"createChildClock (method)","text":"<p>Signature</p> <pre><code>createChildClock(autoStart: boolean): PausableClock\n</code></pre>"},{"location":"modules/core/base/clock/i-clock.ts/","title":"core/base/clock/i-clock.ts","text":""},{"location":"modules/core/base/clock/i-clock.ts/#i-clock-overview","title":"i-clock overviewTable of contents","text":"<ul> <li>utils</li> <li>IClock (interface)</li> </ul>"},{"location":"modules/core/base/clock/i-clock.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/clock/i-clock.ts/#iclock-interface","title":"IClock (interface)","text":"<p>Signature</p> <pre><code>export interface IClock {\n</code></pre>"},{"location":"modules/core/base/clock/pausable-clock.ts/","title":"core/base/clock/pausable-clock.ts","text":""},{"location":"modules/core/base/clock/pausable-clock.ts/#pausable-clock-overview","title":"pausable-clock overviewTable of contents","text":"<ul> <li>utils</li> <li>PausableClock (class)<ul> <li>createChildClock (method)</li> <li>start (method)</li> <li>stop (method)</li> <li>pause (method)</li> <li>resume (method)</li> <li>startListeningTicks (method)</li> <li>stopListeningTicks (method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/clock/pausable-clock.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/clock/pausable-clock.ts/#pausableclock-class","title":"PausableClock (class)","text":"<p>A class, providing ability to track time, fire ticks, provide time elapsed + tick delta with ability to suspend/resume it.</p> <p>Signature</p> <pre><code>export declare class PausableClock {\n  constructor(autoStart: boolean = false, protected readonly parentClock: IClock = GgGlobalClock.instance)\n}\n</code></pre>"},{"location":"modules/core/base/clock/pausable-clock.ts/#createchildclock-method","title":"createChildClock (method)","text":"<p>Signature</p> <pre><code>createChildClock(autoStart: boolean): PausableClock\n</code></pre>"},{"location":"modules/core/base/clock/pausable-clock.ts/#start-method","title":"start (method)","text":"<p>Signature</p> <pre><code>start()\n</code></pre>"},{"location":"modules/core/base/clock/pausable-clock.ts/#stop-method","title":"stop (method)","text":"<p>Signature</p> <pre><code>stop()\n</code></pre>"},{"location":"modules/core/base/clock/pausable-clock.ts/#pause-method","title":"pause (method)","text":"<p>Signature</p> <pre><code>pause()\n</code></pre>"},{"location":"modules/core/base/clock/pausable-clock.ts/#resume-method","title":"resume (method)","text":"<p>Signature</p> <pre><code>resume()\n</code></pre>"},{"location":"modules/core/base/clock/pausable-clock.ts/#startlisteningticks-method","title":"startListeningTicks (method)","text":"<p>Signature</p> <pre><code>protected startListeningTicks()\n</code></pre>"},{"location":"modules/core/base/clock/pausable-clock.ts/#stoplisteningticks-method","title":"stopListeningTicks (method)","text":"<p>Signature</p> <pre><code>protected stopListeningTicks()\n</code></pre>"},{"location":"modules/core/base/components/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/components/i-component.ts</li> <li>core/base/components/i-world-component.ts</li> <li>core/base/components/physics</li> <li>core/base/components/rendering</li> </ul>"},{"location":"modules/core/base/components/i-component.ts/","title":"core/base/components/i-component.ts","text":""},{"location":"modules/core/base/components/i-component.ts/#i-component-overview","title":"i-component overviewTable of contents","text":"<ul> <li>utils</li> <li>IComponent (interface)</li> </ul>"},{"location":"modules/core/base/components/i-component.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/components/i-component.ts/#icomponent-interface","title":"IComponent (interface)","text":"<p>Signature</p> <pre><code>export interface IComponent {\n  dispose(): void\n}\n</code></pre>"},{"location":"modules/core/base/components/i-world-component.ts/","title":"core/base/components/i-world-component.ts","text":""},{"location":"modules/core/base/components/i-world-component.ts/#i-world-component-overview","title":"i-world-component overviewTable of contents","text":"<ul> <li>utils</li> <li>IWorldComponent (interface)</li> </ul>"},{"location":"modules/core/base/components/i-world-component.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/components/i-world-component.ts/#iworldcomponent-interface","title":"IWorldComponent (interface)","text":"<p>Signature</p> <pre><code>export interface IWorldComponent&lt;\n  D,\n  R,\n  V extends IVisualSceneComponent&lt;D, R&gt; = IVisualSceneComponent&lt;D, R&gt;,\n  P extends IPhysicsWorldComponent&lt;D, R&gt; = IPhysicsWorldComponent&lt;D, R&gt;\n&gt; {\n  entity: IEntity | null\n  addToWorld(world: GgWorld&lt;D, R, V, P&gt;): void\n  removeFromWorld(world: GgWorld&lt;D, R, V, P&gt;, dispose?: boolean): void\n  dispose(): void\n}\n</code></pre>"},{"location":"modules/core/base/components/physics/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/components/physics/i-body.component.ts</li> <li>core/base/components/physics/i-physics-world.component.ts</li> <li>core/base/components/physics/i-rigid-body.component.ts</li> <li>core/base/components/physics/i-trigger.component.ts</li> </ul>"},{"location":"modules/core/base/components/physics/i-body.component.ts/","title":"core/base/components/physics/i-body.component.ts","text":""},{"location":"modules/core/base/components/physics/i-body.component.ts/#i-bodycomponent-overview","title":"i-body.component overviewTable of contents","text":"<ul> <li>utils</li> <li>IBodyComponent (interface)</li> </ul>"},{"location":"modules/core/base/components/physics/i-body.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/components/physics/i-body.component.ts/#ibodycomponent-interface","title":"IBodyComponent (interface)","text":"<p>Signature</p> <pre><code>export interface IBodyComponent&lt;D, R, PW extends IPhysicsWorldComponent&lt;D, R&gt; = IPhysicsWorldComponent&lt;D, R&gt;&gt;\n  extends IWorldComponent&lt;D, R, IVisualSceneComponent&lt;D, R&gt;, PW&gt; {\n  entity: IEntity | null\n\n  position: D\n  rotation: R\n\n  name: string\n\n  clone(): IBodyComponent&lt;D, R, PW&gt;\n\n  addToWorld(world: GgWorld&lt;D, R, IVisualSceneComponent&lt;D, R&gt;, PW&gt;): void\n\n  removeFromWorld(world: GgWorld&lt;D, R, IVisualSceneComponent&lt;D, R&gt;, PW&gt;): void\n}\n</code></pre>"},{"location":"modules/core/base/components/physics/i-physics-world.component.ts/","title":"core/base/components/physics/i-physics-world.component.ts","text":""},{"location":"modules/core/base/components/physics/i-physics-world.component.ts/#i-physics-worldcomponent-overview","title":"i-physics-world.component overviewTable of contents","text":"<ul> <li>utils</li> <li>IPhysicsWorldComponent (interface)</li> </ul>"},{"location":"modules/core/base/components/physics/i-physics-world.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/components/physics/i-physics-world.component.ts/#iphysicsworldcomponent-interface","title":"IPhysicsWorldComponent (interface)","text":"<p>Signature</p> <pre><code>export interface IPhysicsWorldComponent&lt;D, R&gt; extends IComponent {\n  readonly factory: any; // type defined in sub-interfaces\n  gravity: D;\n  timeScale: number;\n</code></pre>"},{"location":"modules/core/base/components/physics/i-rigid-body.component.ts/","title":"core/base/components/physics/i-rigid-body.component.ts","text":""},{"location":"modules/core/base/components/physics/i-rigid-body.component.ts/#i-rigid-bodycomponent-overview","title":"i-rigid-body.component overviewTable of contents","text":"<ul> <li>utils</li> <li>IRigidBodyComponent (interface)</li> </ul>"},{"location":"modules/core/base/components/physics/i-rigid-body.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/components/physics/i-rigid-body.component.ts/#irigidbodycomponent-interface","title":"IRigidBodyComponent (interface)","text":"<p>Signature</p> <pre><code>export interface IRigidBodyComponent&lt;D, R, PW extends IPhysicsWorldComponent&lt;D, R&gt; = IPhysicsWorldComponent&lt;D, R&gt;&gt;\n  extends IBodyComponent&lt;D, R, PW&gt; {\n  linearVelocity: D\n  angularVelocity: R | D\n\n  clone(): IRigidBodyComponent&lt;D, R, PW&gt;\n\n  /** clear velocities etc. */\n  resetMotion(): void\n}\n</code></pre>"},{"location":"modules/core/base/components/physics/i-trigger.component.ts/","title":"core/base/components/physics/i-trigger.component.ts","text":""},{"location":"modules/core/base/components/physics/i-trigger.component.ts/#i-triggercomponent-overview","title":"i-trigger.component overviewTable of contents","text":"<ul> <li>utils</li> <li>ITriggerComponent (interface)</li> </ul>"},{"location":"modules/core/base/components/physics/i-trigger.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/components/physics/i-trigger.component.ts/#itriggercomponent-interface","title":"ITriggerComponent (interface)","text":"<p>Signature</p> <pre><code>export interface ITriggerComponent&lt;D, R, PW extends IPhysicsWorldComponent&lt;D, R&gt; = IPhysicsWorldComponent&lt;D, R&gt;&gt;\n  extends IBodyComponent&lt;D, R, PW&gt; {\n</code></pre>"},{"location":"modules/core/base/components/rendering/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/components/rendering/i-display-object.component.ts</li> <li>core/base/components/rendering/i-renderer.component.ts</li> <li>core/base/components/rendering/i-visual-scene.component.ts</li> </ul>"},{"location":"modules/core/base/components/rendering/i-display-object.component.ts/","title":"core/base/components/rendering/i-display-object.component.ts","text":""},{"location":"modules/core/base/components/rendering/i-display-object.component.ts/#i-display-objectcomponent-overview","title":"i-display-object.component overviewTable of contents","text":"<ul> <li>utils</li> <li>IDisplayObjectComponent (interface)</li> </ul>"},{"location":"modules/core/base/components/rendering/i-display-object.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/components/rendering/i-display-object.component.ts/#idisplayobjectcomponent-interface","title":"IDisplayObjectComponent (interface)","text":"<p>Signature</p> <pre><code>export interface IDisplayObjectComponent&lt;D, R, VS extends IVisualSceneComponent&lt;D, R&gt; = IVisualSceneComponent&lt;D, R&gt;&gt;\n  extends IWorldComponent&lt;D, R, VS&gt; {\n  position: D\n  rotation: R\n  scale: D\n\n  visible: boolean\n\n  name: string\n\n  isEmpty(): boolean\n\n  popChild(name: string): IDisplayObjectComponent&lt;D, R, VS&gt; | null\n\n  getBoundings(): GgBox&lt;D&gt;\n\n  clone(): IDisplayObjectComponent&lt;D, R, VS&gt;\n\n  addToWorld(world: GgWorld&lt;D, R, VS&gt;): void\n\n  removeFromWorld(world: GgWorld&lt;D, R, VS&gt;): void\n}\n</code></pre>"},{"location":"modules/core/base/components/rendering/i-renderer.component.ts/","title":"core/base/components/rendering/i-renderer.component.ts","text":""},{"location":"modules/core/base/components/rendering/i-renderer.component.ts/#i-renderercomponent-overview","title":"i-renderer.component overviewTable of contents","text":"<ul> <li>utils</li> <li>IRendererComponent (class)<ul> <li>render (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>resizeRenderer (method)</li> <li>dispose (method)</li> <li>entity (property)</li> <li>rendererOptions (property)</li> </ul> </li> <li>RendererOptions (type alias)</li> </ul>"},{"location":"modules/core/base/components/rendering/i-renderer.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/components/rendering/i-renderer.component.ts/#irenderercomponent-class","title":"IRendererComponent (class)","text":"<p>Signature</p> <pre><code>export declare class IRendererComponent&lt;D, R, VS&gt; {\n  protected constructor(\n    public readonly scene: VS,\n    public readonly canvas?: HTMLCanvasElement,\n    options: Partial&lt;RendererOptions&gt; = {}\n  )\n}\n</code></pre>"},{"location":"modules/core/base/components/rendering/i-renderer.component.ts/#render-method","title":"render (method)","text":"<p>Renders the scene.</p> <p>Signature</p> <pre><code>abstract render(): void;\n</code></pre>"},{"location":"modules/core/base/components/rendering/i-renderer.component.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>abstract addToWorld(world: GgWorld&lt;D, R, VS, any&gt;): void;\n</code></pre>"},{"location":"modules/core/base/components/rendering/i-renderer.component.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>abstract removeFromWorld(world: GgWorld&lt;D, R, VS, any&gt;): void;\n</code></pre>"},{"location":"modules/core/base/components/rendering/i-renderer.component.ts/#resizerenderer-method","title":"resizeRenderer (method)","text":"<p>Resizes the renderer to the specified size.</p> <p>Signature</p> <pre><code>abstract resizeRenderer(newSize: Point2): void;\n</code></pre>"},{"location":"modules/core/base/components/rendering/i-renderer.component.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>abstract dispose(): void;\n</code></pre>"},{"location":"modules/core/base/components/rendering/i-renderer.component.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: IEntity&lt;any, any, IVisualSceneComponent&lt;any, any&gt;, IPhysicsWorldComponent&lt;any, any&gt;&gt; | null\n</code></pre>"},{"location":"modules/core/base/components/rendering/i-renderer.component.ts/#rendereroptions-property","title":"rendererOptions (property)","text":"<p>Specifies the options for the renderer.</p> <p>Signature</p> <pre><code>readonly rendererOptions: RendererOptions\n</code></pre>"},{"location":"modules/core/base/components/rendering/i-renderer.component.ts/#rendereroptions-type-alias","title":"RendererOptions (type alias)","text":"<p>Represents the options that can be passed to a renderer.</p> <p>Signature</p> <pre><code>export type RendererOptions = {\n  transparent: boolean\n  background: number\n  size: Point2 | 'fullscreen' | ((pageSize: Point2) =&gt; Point2) | Observable&lt;Point2&gt;\n  forceResolution?: number\n  antialias: boolean\n}\n</code></pre>"},{"location":"modules/core/base/components/rendering/i-visual-scene.component.ts/","title":"core/base/components/rendering/i-visual-scene.component.ts","text":""},{"location":"modules/core/base/components/rendering/i-visual-scene.component.ts/#i-visual-scenecomponent-overview","title":"i-visual-scene.component overviewTable of contents","text":"<ul> <li>utils</li> <li>IVisualSceneComponent (interface)</li> </ul>"},{"location":"modules/core/base/components/rendering/i-visual-scene.component.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/components/rendering/i-visual-scene.component.ts/#ivisualscenecomponent-interface","title":"IVisualSceneComponent (interface)","text":"<p>Signature</p> <pre><code>export interface IVisualSceneComponent&lt;D, R&gt; extends IComponent {\n  readonly factory: any // type defined in sub-interfaces\n\n  readonly debugPhysicsDrawerClass?: { new (): IDebugPhysicsDrawer&lt;D, R&gt; }\n\n  init(): Promise&lt;void&gt;\n}\n</code></pre>"},{"location":"modules/core/base/data-structures/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/data-structures/graph.ts</li> </ul>"},{"location":"modules/core/base/data-structures/graph.ts/","title":"core/base/data-structures/graph.ts","text":""},{"location":"modules/core/base/data-structures/graph.ts/#graph-overview","title":"graph overviewTable of contents","text":"<ul> <li>utils</li> <li>Graph (class)<ul> <li>fromArray (static method)</li> <li>fromSquareGrid (static method)</li> <li>addAdjacent (method)</li> <li>removeAdjacent (method)</li> <li>addEdge (method)</li> <li>removeEdge (method)</li> <li>walkRead (method)</li> <li>walkReadPreserveDepth (method)</li> <li>nodes (method)</li> <li>data (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/data-structures/graph.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/data-structures/graph.ts/#graph-class","title":"Graph (class)","text":"<p>Signature</p> <pre><code>export declare class Graph&lt;T&gt; {\n  constructor(data: T)\n}\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#fromarray-static-method","title":"fromArray (static method)","text":"<p>Creates a new Graph instance from an array of elements, where each element in the array is a node in the graph. The first element of the array is used as the root node of the graph.</p> <p>Signature</p> <pre><code>static fromArray&lt;T&gt;(array: T[], closed: boolean = false): Graph&lt;T&gt;\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#fromsquaregrid-static-method","title":"fromSquareGrid (static method)","text":"<p>Creates a new Graph instance from a two-dimensional square grid of elements, where each element in the grid is a node in the graph. The top-left element of the grid is used as the root node of the graph. The nodes in the graph are created in the same order as the elements in the grid, from left to right and then from top to bottom.</p> <p>Signature</p> <pre><code>static fromSquareGrid&lt;T&gt;(grid: T[][]): Graph&lt;T&gt;\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#addadjacent-method","title":"addAdjacent (method)","text":"<p>Signature</p> <pre><code>addAdjacent(node: Graph&lt;T&gt;): boolean\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#removeadjacent-method","title":"removeAdjacent (method)","text":"<p>Signature</p> <pre><code>removeAdjacent(node: Graph&lt;T&gt;): boolean\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#addedge-method","title":"addEdge (method)","text":"<p>Create an edge between two nodes</p> <p>Signature</p> <pre><code>addEdge(source: Graph&lt;T&gt;, destination: Graph&lt;T&gt;): boolean\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#removeedge-method","title":"removeEdge (method)","text":"<p>Remove an edge between two nodes</p> <p>Signature</p> <pre><code>removeEdge(source: Graph&lt;T&gt;, destination: Graph&lt;T&gt;): boolean\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#walkread-method","title":"walkRead (method)","text":"<p>Signature</p> <pre><code>walkRead(depth: number): Set&lt;Graph&lt;T&gt;&gt;\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#walkreadpreservedepth-method","title":"walkReadPreserveDepth (method)","text":"<p>Signature</p> <pre><code>walkReadPreserveDepth(depth: number): Set&lt;Graph&lt;T&gt;&gt;[]\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#nodes-method","title":"nodes (method)","text":"<p>Signature</p> <pre><code>nodes(): Graph&lt;T&gt;[]\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#data-property","title":"data (property)","text":"<p>Signature</p> <pre><code>data: T\n</code></pre>"},{"location":"modules/core/base/entities/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/entities/controllers</li> <li>core/base/entities/i-entity.ts</li> <li>core/base/entities/i-renderable.entity.ts</li> <li>core/base/entities/i-renderer.entity.ts</li> </ul>"},{"location":"modules/core/base/entities/i-entity.ts/","title":"core/base/entities/i-entity.ts","text":""},{"location":"modules/core/base/entities/i-entity.ts/#i-entity-overview","title":"i-entity overviewTable of contents","text":"<ul> <li>utils</li> <li>IEntity (class)<ul> <li>addChildren (method)</li> <li>removeChildren (method)</li> <li>addComponents (method)</li> <li>removeComponents (method)</li> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>dispose (method)</li> <li>tick$ (property)</li> <li>tickOrder (property)</li> <li>_world (property)</li> <li>_name (property)</li> <li>_active (property)</li> <li>parent (property)</li> <li>_onSpawned$ (property)</li> <li>_onRemoved$ (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/entities/i-entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/entities/i-entity.ts/#ientity-class","title":"IEntity (class)","text":"<p>Signature</p> <pre><code>export declare class IEntity&lt;D, R, V, P&gt;\n</code></pre>"},{"location":"modules/core/base/entities/i-entity.ts/#addchildren-method","title":"addChildren (method)","text":"<p>Signature</p> <pre><code>public addChildren(...entities: IEntity[])\n</code></pre>"},{"location":"modules/core/base/entities/i-entity.ts/#removechildren-method","title":"removeChildren (method)","text":"<p>Signature</p> <pre><code>public removeChildren(entities: IEntity[], dispose: boolean = false)\n</code></pre>"},{"location":"modules/core/base/entities/i-entity.ts/#addcomponents-method","title":"addComponents (method)","text":"<p>Signature</p> <pre><code>public addComponents(...components: IWorldComponent&lt;D, R, V, P&gt;[])\n</code></pre>"},{"location":"modules/core/base/entities/i-entity.ts/#removecomponents-method","title":"removeComponents (method)","text":"<p>Signature</p> <pre><code>public removeComponents(components: IWorldComponent&lt;D, R, V, P&gt;[], dispose: boolean = false)\n</code></pre>"},{"location":"modules/core/base/entities/i-entity.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>public onSpawned(world: GgWorld&lt;D, R, V, P&gt;)\n</code></pre>"},{"location":"modules/core/base/entities/i-entity.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>public onRemoved()\n</code></pre>"},{"location":"modules/core/base/entities/i-entity.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>public dispose(): void\n</code></pre>"},{"location":"modules/core/base/entities/i-entity.ts/#tick-property","title":"tick$ (property)","text":"<p>will receive [elapsed time, delta] of each world clock tick</p> <p>Signature</p> <pre><code>readonly tick$: any\n</code></pre>"},{"location":"modules/core/base/entities/i-entity.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>the priority of ticker: the less value, the earlier tick will be run.</p> <p>Signature</p> <pre><code>readonly tickOrder: number\n</code></pre>"},{"location":"modules/core/base/entities/i-entity.ts/#_world-property","title":"_world (property)","text":"<p>a world reference, where this entity was added to</p> <p>Signature</p> <pre><code>_world: GgWorld&lt;D, R, V, P&gt; | null\n</code></pre>"},{"location":"modules/core/base/entities/i-entity.ts/#_name-property","title":"_name (property)","text":"<p>Signature</p> <pre><code>_name: string\n</code></pre>"},{"location":"modules/core/base/entities/i-entity.ts/#_active-property","title":"_active (property)","text":"<p>The flag whether entity should listen to ticks. If set to false, ticks will not be propagated to this entity</p> <p>Signature</p> <pre><code>_active: boolean\n</code></pre>"},{"location":"modules/core/base/entities/i-entity.ts/#parent-property","title":"parent (property)","text":"<p>Signature</p> <pre><code>parent: IEntity&lt;any, any, IVisualSceneComponent&lt;any, any&gt;, IPhysicsWorldComponent&lt;any, any&gt;&gt; | null\n</code></pre>"},{"location":"modules/core/base/entities/i-entity.ts/#_onspawned-property","title":"_onSpawned$ (property)","text":"<p>Signature</p> <pre><code>_onSpawned$: any\n</code></pre>"},{"location":"modules/core/base/entities/i-entity.ts/#_onremoved-property","title":"_onRemoved$ (property)","text":"<p>Signature</p> <pre><code>_onRemoved$: any\n</code></pre>"},{"location":"modules/core/base/entities/i-renderable.entity.ts/","title":"core/base/entities/i-renderable.entity.ts","text":""},{"location":"modules/core/base/entities/i-renderable.entity.ts/#i-renderableentity-overview","title":"i-renderable.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>IRenderableEntity (class)<ul> <li>updateVisibility (method)</li> <li>addChildren (method)</li> <li>removeChildren (method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/entities/i-renderable.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/entities/i-renderable.entity.ts/#irenderableentity-class","title":"IRenderableEntity (class)","text":"<p>Signature</p> <pre><code>export declare class IRenderableEntity&lt;D, R, V, P&gt;\n</code></pre>"},{"location":"modules/core/base/entities/i-renderable.entity.ts/#updatevisibility-method","title":"updateVisibility (method)","text":"<p>Signature</p> <pre><code>public updateVisibility(): void\n</code></pre>"},{"location":"modules/core/base/entities/i-renderable.entity.ts/#addchildren-method","title":"addChildren (method)","text":"<p>Signature</p> <pre><code>addChildren(...entities: IEntity[])\n</code></pre>"},{"location":"modules/core/base/entities/i-renderable.entity.ts/#removechildren-method","title":"removeChildren (method)","text":"<p>Signature</p> <pre><code>removeChildren(entities: IEntity[], dispose: boolean = false)\n</code></pre>"},{"location":"modules/core/base/entities/i-renderer.entity.ts/","title":"core/base/entities/i-renderer.entity.ts","text":""},{"location":"modules/core/base/entities/i-renderer.entity.ts/#i-rendererentity-overview","title":"i-renderer.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>IRendererEntity (class)<ul> <li>onSpawned (method)</li> <li>dispose (method)</li> <li>tickOrder (property)</li> <li>_rendererSize$ (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/entities/i-renderer.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/entities/i-renderer.entity.ts/#irendererentity-class","title":"IRendererEntity (class)","text":"<p>Represents a base class for a renderer entity.</p> <p>Signature</p> <pre><code>export declare class IRendererEntity&lt;D, R, VS, RC&gt; {\n  constructor(public readonly renderer: RC)\n}\n</code></pre>"},{"location":"modules/core/base/entities/i-renderer.entity.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: GgWorld&lt;D, R, VS, any&gt;)\n</code></pre>"},{"location":"modules/core/base/entities/i-renderer.entity.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose()\n</code></pre>"},{"location":"modules/core/base/entities/i-renderer.entity.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: TickOrder.RENDERING\n</code></pre>"},{"location":"modules/core/base/entities/i-renderer.entity.ts/#_renderersize-property","title":"_rendererSize$ (property)","text":"<p>Represents the current size of the renderer.</p> <p>Signature</p> <pre><code>_rendererSize$: any\n</code></pre>"},{"location":"modules/core/base/entities/controllers/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/entities/controllers/animation-mixer.ts</li> <li>core/base/entities/controllers/inline-controller.ts</li> </ul>"},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/","title":"core/base/entities/controllers/animation-mixer.ts","text":""},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#animation-mixer-overview","title":"animation-mixer overviewTable of contents","text":"<ul> <li>utils</li> <li>AnimationFunction (type alias)</li> <li>AnimationMixer (class)<ul> <li>transitFromStaticState (method)</li> <li>transitAnimationFunction (method)</li> <li>onSpawned (method)</li> <li>dispose (method)</li> <li>tickOrder (property)</li> <li>_value$ (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#animationfunction-type-alias","title":"AnimationFunction (type alias)","text":"<p>Signature</p> <pre><code>export type AnimationFunction&lt;T&gt; = (elapsed: number, delta: number) =&gt; T\n</code></pre>"},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#animationmixer-class","title":"AnimationMixer (class)","text":"<p>A class that performs property animations for a specific type <code>T</code> by using provided animation function. Supports smooth transition between animation function by interpolating between values over time. The current value of the animation can be subscribed to using the <code>subscribeToValue</code> property. The animation function can be changed with <code>transitAnimationFunction</code> or <code>transitFromStaticState</code>.</p> <p>Signature</p> <pre><code>export declare class AnimationMixer&lt;T&gt; {\n  constructor(\n    protected _animationFunction: AnimationFunction&lt;T&gt;,\n    protected _lerp: (a: T, b: T, t: number) =&gt; T = (a, b, t) =&gt; b\n  )\n}\n</code></pre>"},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#transitfromstaticstate-method","title":"transitFromStaticState (method)","text":"<p>Set output to static value and smoothly transit to new control function</p> <p>Signature</p> <pre><code>transitFromStaticState(\n    state: T,\n    newFunc: AnimationFunction&lt;T&gt;,\n    transitionDuration: number,\n    easing: (t: number) =&gt; number = x =&gt; x,\n  )\n</code></pre>"},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#transitanimationfunction-method","title":"transitAnimationFunction (method)","text":"<p>Smoothly transit to new control function</p> <p>Signature</p> <pre><code>transitAnimationFunction(\n    newFunc: AnimationFunction&lt;T&gt;,\n    transitionDuration: number,\n    easing: (t: number) =&gt; number = x =&gt; x,\n  )\n</code></pre>"},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: GgWorld&lt;any, any&gt;)\n</code></pre>"},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: number\n</code></pre>"},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#_value-property","title":"_value$ (property)","text":"<p>A subject that emits the current value of the animation on every tick.</p> <p>Signature</p> <pre><code>readonly _value$: any\n</code></pre>"},{"location":"modules/core/base/entities/controllers/inline-controller.ts/","title":"core/base/entities/controllers/inline-controller.ts","text":""},{"location":"modules/core/base/entities/controllers/inline-controller.ts/#inline-controller-overview","title":"inline-controller overviewTable of contents","text":"<ul> <li>utils</li> <li>createInlineTickController</li> </ul>"},{"location":"modules/core/base/entities/controllers/inline-controller.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/entities/controllers/inline-controller.ts/#createinlinetickcontroller","title":"createInlineTickController","text":"<p>Signature</p> <pre><code>export declare function createInlineTickController(\n  world: GgWorld&lt;any, any&gt;,\n  tickOrder: number = TickOrder.CONTROLLERS\n): Observable&lt;[number, number]&gt;\n</code></pre>"},{"location":"modules/core/base/inputs/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/inputs/direction.keyboard.input.ts</li> <li>core/base/inputs/i-input.ts</li> <li>core/base/inputs/keyboard.input.ts</li> <li>core/base/inputs/mouse.input.ts</li> </ul>"},{"location":"modules/core/base/inputs/direction.keyboard.input.ts/","title":"core/base/inputs/direction.keyboard.input.ts","text":""},{"location":"modules/core/base/inputs/direction.keyboard.input.ts/#directionkeyboardinput-overview","title":"direction.keyboard.input overviewTable of contents","text":"<ul> <li>utils</li> <li>DirectionKeyboardInput (class)<ul> <li>startInternal (method)</li> </ul> </li> <li>DirectionKeyboardKeymap (type alias)</li> <li>DirectionKeyboardOutput (type alias)</li> </ul>"},{"location":"modules/core/base/inputs/direction.keyboard.input.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/inputs/direction.keyboard.input.ts/#directionkeyboardinput-class","title":"DirectionKeyboardInput (class)","text":"<p>An input class, responsible for handling direction keys and providing simple current direction observable. Supports two the most popular keyboard layouts: WASD and arrows.</p> <p>Signature</p> <pre><code>export declare class DirectionKeyboardInput {\n  constructor(protected readonly keyboard: KeyboardInput, protected readonly keymap: DirectionKeyboardKeymap)\n}\n</code></pre>"},{"location":"modules/core/base/inputs/direction.keyboard.input.ts/#startinternal-method","title":"startInternal (method)","text":"<p>Called when the input handling should start.</p> <p>Signature</p> <pre><code>protected startInternal()\n</code></pre>"},{"location":"modules/core/base/inputs/direction.keyboard.input.ts/#directionkeyboardkeymap-type-alias","title":"DirectionKeyboardKeymap (type alias)","text":"<p>The type representing desired keymap for DirectionKeyboardInput</p> <p>Signature</p> <pre><code>export type DirectionKeyboardKeymap = 'arrows' | 'wasd' | 'wasd+arrows'\n</code></pre>"},{"location":"modules/core/base/inputs/direction.keyboard.input.ts/#directionkeyboardoutput-type-alias","title":"DirectionKeyboardOutput (type alias)","text":"<p>The type of DirectionKeyboardInput output value</p> <p>Signature</p> <pre><code>export type DirectionKeyboardOutput = { upDown?: boolean; leftRight?: boolean }\n</code></pre>"},{"location":"modules/core/base/inputs/i-input.ts/","title":"core/base/inputs/i-input.ts","text":""},{"location":"modules/core/base/inputs/i-input.ts/#i-input-overview","title":"i-input overviewTable of contents","text":"<ul> <li>utils</li> <li>IInput (class)<ul> <li>start (method)</li> <li>stop (method)</li> <li>startInternal (method)</li> <li>stopInternal (method)</li> <li>stop$ (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/inputs/i-input.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/inputs/i-input.ts/#iinput-class","title":"IInput (class)","text":"<p>An abstract class that provides basic implementation for Input class. Input is an entity for handling input from user, such as mouse movements, key presses etc. Inputs are not bound to World-s and working independently by design.</p> <p>TStartParams - A type representing an array of input arguments for the start method. Items are recommended to be named.</p> <p>TStopParams - A type representing an array of input arguments for the stop method. Items are recommended to be named.</p> <p>Signature</p> <pre><code>export declare class IInput&lt;TStartParams, TStopParams&gt;\n</code></pre>"},{"location":"modules/core/base/inputs/i-input.ts/#start-method","title":"start (method)","text":"<p>A method that starts the input. Do not override it</p> <p>Signature</p> <pre><code>start(...args: TStartParams): void\n</code></pre>"},{"location":"modules/core/base/inputs/i-input.ts/#stop-method","title":"stop (method)","text":"<p>A method that stops the input. Do not override it</p> <p>Signature</p> <pre><code>stop(...args: TStopParams): void\n</code></pre>"},{"location":"modules/core/base/inputs/i-input.ts/#startinternal-method","title":"startInternal (method)","text":"<p>An abstract method that starts the input.</p> <p>Signature</p> <pre><code>protected abstract startInternal(...args: TStartParams): void;\n</code></pre>"},{"location":"modules/core/base/inputs/i-input.ts/#stopinternal-method","title":"stopInternal (method)","text":"<p>A method that stops the input.</p> <p>Signature</p> <pre><code>protected stopInternal(...args: TStopParams): void\n</code></pre>"},{"location":"modules/core/base/inputs/i-input.ts/#stop-property","title":"stop$ (property)","text":"<p>A protected subject that emits a void value when the process is stopped. Subclasses, when subscribing to something using rxjs, have to add pipe takeUntil(this.stop$), so everything will be unsubscribed when stopping input</p> <p>Signature</p> <pre><code>readonly stop$: any\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/","title":"core/base/inputs/keyboard.input.ts","text":""},{"location":"modules/core/base/inputs/keyboard.input.ts/#keyboardinput-overview","title":"keyboard.input overviewTable of contents","text":"<ul> <li>utils</li> <li>KeyboardInput (class)<ul> <li>startInternal (method)</li> <li>stopInternal (method)</li> <li>bind (method)</li> <li>bindMany (method)</li> <li>emulateKeyDown (method)</li> <li>emulateKeyUp (method)</li> <li>emulateKeyPress (method)</li> <li>handleKeys (method)</li> <li>onPointerLockChange (method)</li> <li>resetAllKeys (method)</li> <li>skipKeyDownsOnExternalFocus (property)</li> <li>externalFocusBlacklist (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/inputs/keyboard.input.ts/#keyboardinput-class","title":"KeyboardInput (class)","text":"<p>A main keyboard input: it does not have own key bindings, but provides an API to bind keys. It is responsible for listening key up/down events (when running!) and emit the events to subscribers. Every World entity has its own dedicated instance of Keyboard input, which is running only when the world is running</p> <p>Signature</p> <pre><code>export declare class KeyboardInput {\n  constructor()\n}\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#startinternal-method","title":"startInternal (method)","text":"<p>Signature</p> <pre><code>protected startInternal()\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#stopinternal-method","title":"stopInternal (method)","text":"<p>Signature</p> <pre><code>protected stopInternal()\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#bind-method","title":"bind (method)","text":"<p>Creates an observable that emits a boolean whenever a key with the given code is pressed or released</p> <p>Signature</p> <pre><code>bind(code: string): Observable&lt;boolean&gt;\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#bindmany-method","title":"bindMany (method)","text":"<p>Creates an observable that emits a boolean indicating whether any of the keys with the given codes are pressed or released. Should be used when you have more than one keys, responsible for the same action.</p> <p>Signature</p> <pre><code>bindMany(...codes: string[]): Observable&lt;boolean&gt;\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#emulatekeydown-method","title":"emulateKeyDown (method)","text":"<p>Emulates a key down event for the given key code</p> <p>Signature</p> <pre><code>emulateKeyDown(code: string): void\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#emulatekeyup-method","title":"emulateKeyUp (method)","text":"<p>Emulates a key up event for the given key code</p> <p>Signature</p> <pre><code>emulateKeyUp(code: string): void\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#emulatekeypress-method","title":"emulateKeyPress (method)","text":"<p>Emulates a key press event (down and up) for the given key code</p> <p>Signature</p> <pre><code>emulateKeyPress(code: string): void\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#handlekeys-method","title":"handleKeys (method)","text":"<p>Signature</p> <pre><code>private handleKeys(e: KeyboardEvent)\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#onpointerlockchange-method","title":"onPointerLockChange (method)","text":"<p>Signature</p> <pre><code>private onPointerLockChange()\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#resetallkeys-method","title":"resetAllKeys (method)","text":"<p>Signature</p> <pre><code>public resetAllKeys()\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#skipkeydownsonexternalfocus-property","title":"skipKeyDownsOnExternalFocus (property)","text":"<p>Flag which disables handling key downs, when document has some \"typeable\" element focused</p> <p>Signature</p> <pre><code>skipKeyDownsOnExternalFocus: boolean\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#externalfocusblacklist-property","title":"externalFocusBlacklist (property)","text":"<p>Which element types should filter key downs when focused</p> <p>Signature</p> <pre><code>externalFocusBlacklist: (new () =&gt; HTMLElement)[]\n</code></pre>"},{"location":"modules/core/base/inputs/mouse.input.ts/","title":"core/base/inputs/mouse.input.ts","text":""},{"location":"modules/core/base/inputs/mouse.input.ts/#mouseinput-overview","title":"mouse.input overviewTable of contents","text":"<ul> <li>utils</li> <li>MouseInput (class)<ul> <li>isTouchDevice (static method)</li> <li>startInternal (method)</li> <li>stopInternal (method)</li> <li>canvasClickListener (method)</li> </ul> </li> <li>MouseInputOptions (type alias)</li> </ul>"},{"location":"modules/core/base/inputs/mouse.input.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/inputs/mouse.input.ts/#mouseinput-class","title":"MouseInput (class)","text":"<p>A class representing mouse input.</p> <p>Signature</p> <pre><code>export declare class MouseInput {\n  constructor(options: Partial&lt;MouseInputOptions&gt; = {})\n}\n</code></pre>"},{"location":"modules/core/base/inputs/mouse.input.ts/#istouchdevice-static-method","title":"isTouchDevice (static method)","text":"<p>Signature</p> <pre><code>static isTouchDevice(): boolean\n</code></pre>"},{"location":"modules/core/base/inputs/mouse.input.ts/#startinternal-method","title":"startInternal (method)","text":"<p>Signature</p> <pre><code>protected startInternal()\n</code></pre>"},{"location":"modules/core/base/inputs/mouse.input.ts/#stopinternal-method","title":"stopInternal (method)","text":"<p>Stop listening for mouse movement events.</p> <p>Signature</p> <pre><code>protected stopInternal(unlockPointer: boolean = true)\n</code></pre>"},{"location":"modules/core/base/inputs/mouse.input.ts/#canvasclicklistener-method","title":"canvasClickListener (method)","text":"<p>Request pointer lock on the canvas element.</p> <p>Signature</p> <pre><code>private canvasClickListener(): void\n</code></pre>"},{"location":"modules/core/base/inputs/mouse.input.ts/#mouseinputoptions-type-alias","title":"MouseInputOptions (type alias)","text":"<p>Options for a MouseInput.</p> <p>canvas?: Canvas element. If not provided, mouse events will be listened on the whole window pointerLock: The flag to enable pointer lock when clicking on canvas</p> <p>Signature</p> <pre><code>export type MouseInputOptions = {\n  canvas?: HTMLCanvasElement\n  pointerLock: boolean\n}\n</code></pre>"},{"location":"modules/core/base/interfaces/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/interfaces/i-debug-physics-drawer.ts</li> <li>core/base/interfaces/i-positionable.ts</li> </ul>"},{"location":"modules/core/base/interfaces/i-debug-physics-drawer.ts/","title":"core/base/interfaces/i-debug-physics-drawer.ts","text":""},{"location":"modules/core/base/interfaces/i-debug-physics-drawer.ts/#i-debug-physics-drawer-overview","title":"i-debug-physics-drawer overviewTable of contents","text":"<ul> <li>utils</li> <li>IDebugPhysicsDrawer (interface)</li> </ul>"},{"location":"modules/core/base/interfaces/i-debug-physics-drawer.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/interfaces/i-debug-physics-drawer.ts/#idebugphysicsdrawer-interface","title":"IDebugPhysicsDrawer (interface)","text":"<p>Signature</p> <pre><code>export interface IDebugPhysicsDrawer&lt;D, R, VS extends IVisualSceneComponent&lt;D, R&gt; = IVisualSceneComponent&lt;D, R&gt;&gt;\n  extends IDisplayObjectComponent&lt;D, R, VS&gt; {\n  drawContactPoint(point: D, normal: D, color?: Point3): void\n\n  drawLine(from: D, to: D, color?: Point3): void\n\n  update(): void\n}\n</code></pre>"},{"location":"modules/core/base/interfaces/i-positionable.ts/","title":"core/base/interfaces/i-positionable.ts","text":""},{"location":"modules/core/base/interfaces/i-positionable.ts/#i-positionable-overview","title":"i-positionable overviewTable of contents","text":"<ul> <li>utils</li> <li>IPositionable (interface)</li> </ul>"},{"location":"modules/core/base/interfaces/i-positionable.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/interfaces/i-positionable.ts/#ipositionable-interface","title":"IPositionable (interface)","text":"<p>Signature</p> <pre><code>export interface IPositionable&lt;D, R&gt; {\n  position: D\n  rotation: R\n}\n</code></pre>"},{"location":"modules/core/base/math/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/math/box.ts</li> <li>core/base/math/matrix4.ts</li> <li>core/base/math/numbers.ts</li> <li>core/base/math/point2.ts</li> <li>core/base/math/point3.ts</li> <li>core/base/math/quaternion.ts</li> <li>core/base/math/splines.ts</li> </ul>"},{"location":"modules/core/base/math/box.ts/","title":"core/base/math/box.ts","text":""},{"location":"modules/core/base/math/box.ts/#box-overview","title":"box overviewTable of contents","text":"<ul> <li>utils</li> <li>Box (class)<ul> <li>clone (static method)</li> <li>expandByPoint (static method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/math/box.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/box.ts/#box-class","title":"Box (class)","text":"<p>Signature</p> <pre><code>export declare class Box\n</code></pre>"},{"location":"modules/core/base/math/box.ts/#clone-static-method","title":"clone (static method)","text":"<p>Signature</p> <pre><code>static clone&lt;T&gt;(box: GgBox&lt;T&gt;): GgBox&lt;T&gt;\n</code></pre>"},{"location":"modules/core/base/math/box.ts/#expandbypoint-static-method","title":"expandByPoint (static method)","text":"<p>Signature</p> <pre><code>static expandByPoint&lt;T&gt;(box: GgBox&lt;T&gt;, point: T): GgBox&lt;T&gt;\n</code></pre>"},{"location":"modules/core/base/math/matrix4.ts/","title":"core/base/math/matrix4.ts","text":""},{"location":"modules/core/base/math/matrix4.ts/#matrix4-overview","title":"matrix4 overviewTable of contents","text":"<ul> <li>utils</li> <li>Mtrx4 (class)<ul> <li>lookAt (static method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/math/matrix4.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/matrix4.ts/#mtrx4-class","title":"Mtrx4 (class)","text":"<p>Signature</p> <pre><code>export declare class Mtrx4\n</code></pre>"},{"location":"modules/core/base/math/matrix4.ts/#lookat-static-method","title":"lookAt (static method)","text":"<p>creates a rotation matrix for object, so it will look at some point in space</p> <p>Signature</p> <pre><code>static lookAt(eye: Point3, target: Point3, up: Point3): number[]\n</code></pre>"},{"location":"modules/core/base/math/numbers.ts/","title":"core/base/math/numbers.ts","text":""},{"location":"modules/core/base/math/numbers.ts/#numbers-overview","title":"numbers overviewTable of contents","text":"<ul> <li>utils</li> <li>averageAngle</li> <li>lerpNumber</li> </ul>"},{"location":"modules/core/base/math/numbers.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/numbers.ts/#averageangle","title":"averageAngle","text":"<p>Signature</p> <pre><code>export declare const averageAngle: (angleA: number, angleB: number, factor?: number) =&gt; number\n</code></pre>"},{"location":"modules/core/base/math/numbers.ts/#lerpnumber","title":"lerpNumber","text":"<p>Signature</p> <pre><code>export declare const lerpNumber: (a: number, b: number, t: number) =&gt; number\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/","title":"core/base/math/point2.ts","text":""},{"location":"modules/core/base/math/point2.ts/#point2-overview","title":"point2 overviewTable of contents","text":"<ul> <li>utils</li> <li>Pnt2 (class)<ul> <li>clone (static method)</li> <li>add (static method)</li> <li>sub (static method)</li> <li>avg (static method)</li> <li>lenSq (static method)</li> <li>len (static method)</li> <li>dist (static method)</li> <li>norm (static method)</li> <li>scalarMult (static method)</li> <li>lerp (static method)</li> <li>angle (static method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/math/point2.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/point2.ts/#pnt2-class","title":"Pnt2 (class)","text":"<p>Signature</p> <pre><code>export declare class Pnt2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#clone-static-method","title":"clone (static method)","text":"<p>clone point</p> <p>Signature</p> <pre><code>static clone(p: Point2): Point2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#add-static-method","title":"add (static method)","text":"<p>add point b to point a</p> <p>Signature</p> <pre><code>static add(a: Point2, b: Point2): Point2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#sub-static-method","title":"sub (static method)","text":"<p>subtract point b from point a</p> <p>Signature</p> <pre><code>static sub(a: Point2, b: Point2): Point2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#avg-static-method","title":"avg (static method)","text":"<p>average point between a and b</p> <p>Signature</p> <pre><code>static avg(a: Point2, b: Point2): Point2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#lensq-static-method","title":"lenSq (static method)","text":"<p>calculate vector length (squared)</p> <p>Signature</p> <pre><code>static lenSq(v: Point2)\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#len-static-method","title":"len (static method)","text":"<p>calculate vector length</p> <p>Signature</p> <pre><code>static len(v: Point2)\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#dist-static-method","title":"dist (static method)","text":"<p>distance between points</p> <p>Signature</p> <pre><code>static dist(a: Point2, b: Point2): number\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#norm-static-method","title":"norm (static method)","text":"<p>normalize</p> <p>Signature</p> <pre><code>static norm(p: Point2): Point2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#scalarmult-static-method","title":"scalarMult (static method)","text":"<p>scalar multiplication</p> <p>Signature</p> <pre><code>static scalarMult(p: Point2, m: number): Point2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#lerp-static-method","title":"lerp (static method)","text":"<p>linear interpolation</p> <p>Signature</p> <pre><code>static lerp(a: Point2, b: Point2, t: number): Point2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#angle-static-method","title":"angle (static method)","text":"<p>angle between vectors in radians</p> <p>Signature</p> <pre><code>static angle(a: Point2, b: Point2): number\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/","title":"core/base/math/point3.ts","text":""},{"location":"modules/core/base/math/point3.ts/#point3-overview","title":"point3 overviewTable of contents","text":"<ul> <li>utils</li> <li>Pnt3 (class)<ul> <li>clone (static method)</li> <li>add (static method)</li> <li>sub (static method)</li> <li>avg (static method)</li> <li>lenSq (static method)</li> <li>len (static method)</li> <li>dist (static method)</li> <li>cross (static method)</li> <li>norm (static method)</li> <li>scalarMult (static method)</li> <li>lerp (static method)</li> <li>angle (static method)</li> <li>rot (static method)</li> <li>rotAround (static method)</li> <li>toSpherical (static method)</li> <li>fromSpherical (static method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/math/point3.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/point3.ts/#pnt3-class","title":"Pnt3 (class)","text":"<p>Signature</p> <pre><code>export declare class Pnt3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#clone-static-method","title":"clone (static method)","text":"<p>clone point</p> <p>Signature</p> <pre><code>static clone(p: Point3): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#add-static-method","title":"add (static method)","text":"<p>add point b to point a</p> <p>Signature</p> <pre><code>static add(a: Point3, b: Point3): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#sub-static-method","title":"sub (static method)","text":"<p>subtract point b from point a</p> <p>Signature</p> <pre><code>static sub(a: Point3, b: Point3): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#avg-static-method","title":"avg (static method)","text":"<p>average point between a and b</p> <p>Signature</p> <pre><code>static avg(a: Point3, b: Point3): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#lensq-static-method","title":"lenSq (static method)","text":"<p>calculate vector length (squared)</p> <p>Signature</p> <pre><code>static lenSq(v: Point3)\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#len-static-method","title":"len (static method)","text":"<p>calculate vector length</p> <p>Signature</p> <pre><code>static len(v: Point3)\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#dist-static-method","title":"dist (static method)","text":"<p>distance between points</p> <p>Signature</p> <pre><code>static dist(a: Point3, b: Point3): number\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#cross-static-method","title":"cross (static method)","text":"<p>cross vectors</p> <p>Signature</p> <pre><code>static cross(a: Point3, b: Point3): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#norm-static-method","title":"norm (static method)","text":"<p>normalize</p> <p>Signature</p> <pre><code>static norm(p: Point3): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#scalarmult-static-method","title":"scalarMult (static method)","text":"<p>scalar multiplication</p> <p>Signature</p> <pre><code>static scalarMult(p: Point3, m: number): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#lerp-static-method","title":"lerp (static method)","text":"<p>linear interpolation</p> <p>Signature</p> <pre><code>static lerp(a: Point3, b: Point3, t: number): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#angle-static-method","title":"angle (static method)","text":"<p>angle between vectors in radians</p> <p>Signature</p> <pre><code>static angle(a: Point3, b: Point3): number\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#rot-static-method","title":"rot (static method)","text":"<p>rotate point a with quaternion q</p> <p>Signature</p> <pre><code>static rot(p: Point3, q: Point4): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#rotaround-static-method","title":"rotAround (static method)","text":"<p>rotate point around axis a (normalized vector)</p> <p>Signature</p> <pre><code>static rotAround(p: Point3, axis: Point3, angle: number): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#tospherical-static-method","title":"toSpherical (static method)","text":"<p>Converts a cartesian 3D point to a spherical coordinate system, where theta is azimuth and phi is inclination, theta == 0 is faced towards X axis direction, and phi == 0 is faced towards zenith (Z axis)</p> <p>Signature</p> <pre><code>static toSpherical(p: Point3): Spherical\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#fromspherical-static-method","title":"fromSpherical (static method)","text":"<p>Converts a spherical coordinate system to a cartesian 3D point. Used spherical coordinates, where theta is azimuth and phi is inclination, theta == 0 is faced towards X axis direction, and phi == 0 is faced towards zenith (Z axis)</p> <p>Signature</p> <pre><code>static fromSpherical(s: Spherical): Point3\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/","title":"core/base/math/quaternion.ts","text":""},{"location":"modules/core/base/math/quaternion.ts/#quaternion-overview","title":"quaternion overviewTable of contents","text":"<ul> <li>utils</li> <li>Qtrn (class)<ul> <li>clone (static method)</li> <li>add (static method)</li> <li>mult (static method)</li> <li>combineRotations (static method)</li> <li>lerp (static method)</li> <li>slerp (static method)</li> <li>fromAngle (static method)</li> <li>fromMatrix4 (static method)</li> <li>fromEuler (static method)</li> <li>toEuler (static method)</li> <li>lookAt (static method)</li> <li>rotAround (static method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/math/quaternion.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/quaternion.ts/#qtrn-class","title":"Qtrn (class)","text":"<p>Helper class with static functions, containing util functions, related to Quaternion (represented as Point4 type). In terms of rotation, a quaternion is a mathematical representation of an orientation or rotation in 3D space. It consists of a scalar component and a vector component, and can be written as q = w + xi + yj + zk, where w is the scalar component, and i, j, and k are the vector components. The scalar component, w, represents the amount of rotation, and the vector component, (x, y, z), represents the axis of rotation. The length of the vector component represents the amount of rotation around the axis. Quaternions are often used in 3D computer graphics and animation because they can be used to interpolate between two rotations, and they can avoid some of the issues with using Euler angles (such as gimbal lock).</p> <p>Signature</p> <pre><code>export declare class Qtrn\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#clone-static-method","title":"clone (static method)","text":"<p>Returns a new quaternion instance with the same values as the given quaternion object.</p> <p>Signature</p> <pre><code>static clone(q: Point4): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#add-static-method","title":"add (static method)","text":"<p>Returns the sum of two Point4 objects.</p> <p>Signature</p> <pre><code>static add(a: Point4, b: Point4): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#mult-static-method","title":"mult (static method)","text":"<p>Returns the result of multiplying two Point4 objects. This can be used for combining rotations</p> <p>Signature</p> <pre><code>static mult(a: Point4, b: Point4): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#combinerotations-static-method","title":"combineRotations (static method)","text":"<p>Combines an arbitrary number of quaternions by multiplying them together in order.</p> <p>Signature</p> <pre><code>static combineRotations(...quaternions: Point4[]): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#lerp-static-method","title":"lerp (static method)","text":"<p>Performs a linear interpolation between two Point4 objects.</p> <p>Signature</p> <pre><code>static lerp(a: Point4, b: Point4, t: number): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#slerp-static-method","title":"slerp (static method)","text":"<p>Performs a spherical linear interpolation between two Point4 objects.</p> <p>Signature</p> <pre><code>static slerp(a: Point4, b: Point4, t: number): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#fromangle-static-method","title":"fromAngle (static method)","text":"<p>Converts an angle and an axis of rotation into a quaternion</p> <p>Signature</p> <pre><code>static fromAngle(axis: Point3, angle: number)\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#frommatrix4-static-method","title":"fromMatrix4 (static method)","text":"<p>Converts a 4x4 matrix representing a rotation into a quaternion</p> <p>Signature</p> <pre><code>static fromMatrix4(m: number[]): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#fromeuler-static-method","title":"fromEuler (static method)","text":"<p>Creates a quaternion from euler</p> <p>Signature</p> <pre><code>static fromEuler(e: Point3): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#toeuler-static-method","title":"toEuler (static method)","text":"<p>Converts a quaternion to euler</p> <p>Signature</p> <pre><code>static toEuler(q: Point4): Point3\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#lookat-static-method","title":"lookAt (static method)","text":"<p>Returns a quaternion that represents the rotation required to align an object to face towards a target point.</p> <p>Signature</p> <pre><code>static lookAt(eye: Point3, target: Point3, up: Point3 = Pnt3.Z): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#rotaround-static-method","title":"rotAround (static method)","text":"<p>Returns a quaternion that represents the input quaternion, rotated around provided axis vector by provided angle. Assumes that axis vector is already normalized</p> <p>Signature</p> <pre><code>static rotAround(q: Point4, axis: Point3, angle: number): Point4\n</code></pre>"},{"location":"modules/core/base/math/splines.ts/","title":"core/base/math/splines.ts","text":""},{"location":"modules/core/base/math/splines.ts/#splines-overview","title":"splines overviewTable of contents","text":"<ul> <li>utils</li> <li>cubicSplineInterpolation</li> </ul>"},{"location":"modules/core/base/math/splines.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/splines.ts/#cubicsplineinterpolation","title":"cubicSplineInterpolation","text":"<p>Signature</p> <pre><code>export declare const cubicSplineInterpolation: (\n  x: number,\n  x0: number,\n  x1: number,\n  y0: number,\n  y1: number,\n  m0: number,\n  m1: number\n) =&gt; number\n</code></pre>"},{"location":"modules/core/base/models/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/models/axis-directions.ts</li> <li>core/base/models/body-options.ts</li> <li>core/base/models/geometry-nodes.ts</li> <li>core/base/models/points.ts</li> </ul>"},{"location":"modules/core/base/models/axis-directions.ts/","title":"core/base/models/axis-directions.ts","text":""},{"location":"modules/core/base/models/axis-directions.ts/#axis-directions-overview","title":"axis-directions overviewTable of contents","text":"<ul> <li>utils</li> <li>AxisDirection2 (type alias)</li> <li>AxisDirection3 (type alias)</li> <li>AxisDirection4 (type alias)</li> </ul>"},{"location":"modules/core/base/models/axis-directions.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/models/axis-directions.ts/#axisdirection2-type-alias","title":"AxisDirection2 (type alias)","text":"<p>Signature</p> <pre><code>export type AxisDirection2 = 'x' | 'y' | '-x' | '-y'\n</code></pre>"},{"location":"modules/core/base/models/axis-directions.ts/#axisdirection3-type-alias","title":"AxisDirection3 (type alias)","text":"<p>Signature</p> <pre><code>export type AxisDirection3 = AxisDirection2 | 'z' | '-z'\n</code></pre>"},{"location":"modules/core/base/models/axis-directions.ts/#axisdirection4-type-alias","title":"AxisDirection4 (type alias)","text":"<p>Signature</p> <pre><code>export type AxisDirection4 = AxisDirection3 | 'w' | '-w'\n</code></pre>"},{"location":"modules/core/base/models/body-options.ts/","title":"core/base/models/body-options.ts","text":""},{"location":"modules/core/base/models/body-options.ts/#body-options-overview","title":"body-options overviewTable of contents","text":"<ul> <li>utils</li> <li>BodyOptions (interface)</li> </ul>"},{"location":"modules/core/base/models/body-options.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/models/body-options.ts/#bodyoptions-interface","title":"BodyOptions (interface)","text":"<p>Signature</p> <pre><code>export interface BodyOptions {\n  dynamic: boolean\n  mass: number\n  restitution: number\n  friction: number\n}\n</code></pre>"},{"location":"modules/core/base/models/geometry-nodes.ts/","title":"core/base/models/geometry-nodes.ts","text":""},{"location":"modules/core/base/models/geometry-nodes.ts/#geometry-nodes-overview","title":"geometry-nodes overviewTable of contents","text":"<ul> <li>utils</li> <li>GgBox (type alias)</li> <li>GgBox2d (type alias)</li> <li>GgBox3d (type alias)</li> </ul>"},{"location":"modules/core/base/models/geometry-nodes.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/models/geometry-nodes.ts/#ggbox-type-alias","title":"GgBox (type alias)","text":"<p>Signature</p> <pre><code>export type GgBox&lt;T&gt; = { min: T; max: T }\n</code></pre>"},{"location":"modules/core/base/models/geometry-nodes.ts/#ggbox2d-type-alias","title":"GgBox2d (type alias)","text":"<p>Signature</p> <pre><code>export type GgBox2d = GgBox&lt;Point2&gt;\n</code></pre>"},{"location":"modules/core/base/models/geometry-nodes.ts/#ggbox3d-type-alias","title":"GgBox3d (type alias)","text":"<p>Signature</p> <pre><code>export type GgBox3d = GgBox&lt;Point3&gt;\n</code></pre>"},{"location":"modules/core/base/models/points.ts/","title":"core/base/models/points.ts","text":""},{"location":"modules/core/base/models/points.ts/#points-overview","title":"points overviewTable of contents","text":"<ul> <li>utils</li> <li>MutableSpherical (type alias)</li> <li>Point2 (type alias)</li> <li>Point3 (type alias)</li> <li>Point4 (type alias)</li> <li>Spherical (type alias)</li> </ul>"},{"location":"modules/core/base/models/points.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/models/points.ts/#mutablespherical-type-alias","title":"MutableSpherical (type alias)","text":"<p>Signature</p> <pre><code>export type MutableSpherical = { radius: number; phi: number; theta: number }\n</code></pre>"},{"location":"modules/core/base/models/points.ts/#point2-type-alias","title":"Point2 (type alias)","text":"<p>Signature</p> <pre><code>export type Point2 = { readonly x: number; readonly y: number }\n</code></pre>"},{"location":"modules/core/base/models/points.ts/#point3-type-alias","title":"Point3 (type alias)","text":"<p>Signature</p> <pre><code>export type Point3 = { readonly x: number; readonly y: number; readonly z: number }\n</code></pre>"},{"location":"modules/core/base/models/points.ts/#point4-type-alias","title":"Point4 (type alias)","text":"<p>Signature</p> <pre><code>export type Point4 = { readonly x: number; readonly y: number; readonly z: number; readonly w: number }\n</code></pre>"},{"location":"modules/core/base/models/points.ts/#spherical-type-alias","title":"Spherical (type alias)","text":"<p>Signature</p> <pre><code>export type Spherical = { readonly radius: number; readonly phi: number; readonly theta: number }\n</code></pre>"},{"location":"modules/core/dev/","title":"Modules","text":"Directory table of contents <ul> <li>core/dev/gg-console.ui.ts</li> <li>core/dev/gg-debugger.ui.ts</li> <li>core/dev/gg-static.ts</li> <li>core/dev/index.ts</li> </ul>"},{"location":"modules/core/dev/gg-console.ui.ts/","title":"core/dev/gg-console.ui.ts","text":""},{"location":"modules/core/dev/gg-console.ui.ts/#gg-consoleui-overview","title":"gg-console.ui overviewTable of contents","text":"<ul> <li>utils</li> <li>GgConsoleUI (class)<ul> <li>createUI (method)</li> <li>destroyUI (method)</li> <li>onUsePreviousCommand (method)</li> <li>onUseNextCommand (method)</li> <li>onInput (method)</li> <li>stdout (method)</li> <li>setupDragging (method)</li> <li>elements (property)</li> </ul> </li> </ul>"},{"location":"modules/core/dev/gg-console.ui.ts/#utils","title":"utils","text":""},{"location":"modules/core/dev/gg-console.ui.ts/#ggconsoleui-class","title":"GgConsoleUI (class)","text":"<p>Signature</p> <pre><code>export declare class GgConsoleUI\n</code></pre>"},{"location":"modules/core/dev/gg-console.ui.ts/#createui-method","title":"createUI (method)","text":"<p>Signature</p> <pre><code>public createUI()\n</code></pre>"},{"location":"modules/core/dev/gg-console.ui.ts/#destroyui-method","title":"destroyUI (method)","text":"<p>Signature</p> <pre><code>public destroyUI()\n</code></pre>"},{"location":"modules/core/dev/gg-console.ui.ts/#onusepreviouscommand-method","title":"onUsePreviousCommand (method)","text":"<p>Signature</p> <pre><code>onUsePreviousCommand()\n</code></pre>"},{"location":"modules/core/dev/gg-console.ui.ts/#onusenextcommand-method","title":"onUseNextCommand (method)","text":"<p>Signature</p> <pre><code>onUseNextCommand()\n</code></pre>"},{"location":"modules/core/dev/gg-console.ui.ts/#oninput-method","title":"onInput (method)","text":"<p>Signature</p> <pre><code>async onInput()\n</code></pre>"},{"location":"modules/core/dev/gg-console.ui.ts/#stdout-method","title":"stdout (method)","text":"<p>Signature</p> <pre><code>private stdout(s: string = ''): void\n</code></pre>"},{"location":"modules/core/dev/gg-console.ui.ts/#setupdragging-method","title":"setupDragging (method)","text":"<p>Signature</p> <pre><code>setupDragging()\n</code></pre>"},{"location":"modules/core/dev/gg-console.ui.ts/#elements-property","title":"elements (property)","text":"<p>Signature</p> <pre><code>elements: { main: HTMLDivElement; input: HTMLInputElement; output: HTMLDivElement; } | null\n</code></pre>"},{"location":"modules/core/dev/gg-debugger.ui.ts/","title":"core/dev/gg-debugger.ui.ts","text":""},{"location":"modules/core/dev/gg-debugger.ui.ts/#gg-debuggerui-overview","title":"gg-debugger.ui overviewTable of contents","text":"<ul> <li>utils</li> <li>GgDebuggerUI (class)<ul> <li>setShowStats (method)</li> <li>setShowDebugControls (method)</li> </ul> </li> </ul>"},{"location":"modules/core/dev/gg-debugger.ui.ts/#utils","title":"utils","text":""},{"location":"modules/core/dev/gg-debugger.ui.ts/#ggdebuggerui-class","title":"GgDebuggerUI (class)","text":"<p>Signature</p> <pre><code>export declare class GgDebuggerUI\n</code></pre>"},{"location":"modules/core/dev/gg-debugger.ui.ts/#setshowstats-method","title":"setShowStats (method)","text":"<p>Signature</p> <pre><code>public setShowStats(selectedWorld: GgWorld&lt;any, any&gt;, value: boolean)\n</code></pre>"},{"location":"modules/core/dev/gg-debugger.ui.ts/#setshowdebugcontrols-method","title":"setShowDebugControls (method)","text":"<p>Signature</p> <pre><code>public setShowDebugControls(selectedWorld: GgWorld&lt;any, any&gt;, value: boolean)\n</code></pre>"},{"location":"modules/core/dev/gg-static.ts/","title":"core/dev/gg-static.ts","text":""},{"location":"modules/core/dev/gg-static.ts/#gg-static-overview","title":"gg-static overviewTable of contents","text":"<ul> <li>utils</li> <li>GgStatic (class)<ul> <li>registerConsoleCommand (method)</li> <li>deregisterWorldCommands (method)</li> <li>console (method)</li> <li>runConsoleCommand (method)</li> <li>consoleKeyPressEventListener (property)</li> <li>consoleCommands (property)</li> </ul> </li> </ul>"},{"location":"modules/core/dev/gg-static.ts/#utils","title":"utils","text":""},{"location":"modules/core/dev/gg-static.ts/#ggstatic-class","title":"GgStatic (class)","text":"<p>Signature</p> <pre><code>export declare class GgStatic {\n  private constructor()\n}\n</code></pre>"},{"location":"modules/core/dev/gg-static.ts/#registerconsolecommand-method","title":"registerConsoleCommand (method)","text":"<p>Signature</p> <pre><code>public registerConsoleCommand(\n    world: GgWorld&lt;any, any&gt; | null,\n    command: string,\n    handler: (...args: string[]) =&gt; Promise&lt;string&gt;,\n    doc?: string,\n  ): void\n</code></pre>"},{"location":"modules/core/dev/gg-static.ts/#deregisterworldcommands-method","title":"deregisterWorldCommands (method)","text":"<p>Signature</p> <pre><code>public deregisterWorldCommands(world: GgWorld&lt;any, any&gt; | null): void\n</code></pre>"},{"location":"modules/core/dev/gg-static.ts/#console-method","title":"console (method)","text":"<p>Signature</p> <pre><code>public async console(input: string): Promise&lt;string&gt;\n</code></pre>"},{"location":"modules/core/dev/gg-static.ts/#runconsolecommand-method","title":"runConsoleCommand (method)","text":"<p>Signature</p> <pre><code>public async runConsoleCommand(command: string, args: string[]): Promise&lt;string&gt;\n</code></pre>"},{"location":"modules/core/dev/gg-static.ts/#consolekeypresseventlistener-property","title":"consoleKeyPressEventListener (property)","text":"<p>Signature</p> <pre><code>consoleKeyPressEventListener: (event: KeyboardEvent) =&gt; void\n</code></pre>"},{"location":"modules/core/dev/gg-static.ts/#consolecommands-property","title":"consoleCommands (property)","text":"<p>Signature</p> <pre><code>consoleCommands: any\n</code></pre>"},{"location":"modules/core/dev/index.ts/","title":"core/dev/index.ts","text":""},{"location":"modules/core/dev/index.ts/#index-overview","title":"index overviewTable of contents","text":""},{"location":"modules/matter/","title":"Modules","text":"Directory table of contents <ul> <li>matter/components</li> <li>matter/matter-factory.ts</li> </ul>"},{"location":"modules/matter/matter-factory.ts/","title":"matter/matter-factory.ts","text":""},{"location":"modules/matter/matter-factory.ts/#matter-factory-overview","title":"matter-factory overviewTable of contents","text":"<ul> <li>utils</li> <li>MatterFactory (class)<ul> <li>createRigidBody (method)</li> <li>createTrigger (method)</li> <li>transformOptions (method)</li> </ul> </li> </ul>"},{"location":"modules/matter/matter-factory.ts/#utils","title":"utils","text":""},{"location":"modules/matter/matter-factory.ts/#matterfactory-class","title":"MatterFactory (class)","text":"<p>Signature</p> <pre><code>export declare class MatterFactory\n</code></pre>"},{"location":"modules/matter/matter-factory.ts/#createrigidbody-method","title":"createRigidBody (method)","text":"<p>Signature</p> <pre><code>createRigidBody(\n    descriptor: BodyShape2DDescriptor,\n    transform?: {\n      position?: Point2;\n      rotation?: number;\n    },\n  ): MatterRigidBodyComponent\n</code></pre>"},{"location":"modules/matter/matter-factory.ts/#createtrigger-method","title":"createTrigger (method)","text":"<p>Signature</p> <pre><code>createTrigger(\n    descriptor: Shape2DDescriptor,\n    transform?: {\n      position?: Point2;\n      rotation?: number;\n    },\n  ): any\n</code></pre>"},{"location":"modules/matter/matter-factory.ts/#transformoptions-method","title":"transformOptions (method)","text":"<p>Signature</p> <pre><code>private transformOptions(options: Partial&lt;Body2DOptions&gt;): IBodyDefinition\n</code></pre>"},{"location":"modules/matter/components/","title":"Modules","text":"Directory table of contents <ul> <li>matter/components/matter-rigid-body.component.ts</li> <li>matter/components/matter-world.component.ts</li> </ul>"},{"location":"modules/matter/components/matter-rigid-body.component.ts/","title":"matter/components/matter-rigid-body.component.ts","text":""},{"location":"modules/matter/components/matter-rigid-body.component.ts/#matter-rigid-bodycomponent-overview","title":"matter-rigid-body.component overviewTable of contents","text":"<ul> <li>utils</li> <li>MatterRigidBodyComponent (class)<ul> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>dispose (method)</li> <li>resetMotion (method)</li> <li>name (property)</li> <li>entity (property)</li> </ul> </li> </ul>"},{"location":"modules/matter/components/matter-rigid-body.component.ts/#utils","title":"utils","text":""},{"location":"modules/matter/components/matter-rigid-body.component.ts/#matterrigidbodycomponent-class","title":"MatterRigidBodyComponent (class)","text":"<p>Signature</p> <pre><code>export declare class MatterRigidBodyComponent {\n  constructor(public nativeBody: Body)\n}\n</code></pre>"},{"location":"modules/matter/components/matter-rigid-body.component.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): MatterRigidBodyComponent\n</code></pre>"},{"location":"modules/matter/components/matter-rigid-body.component.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg2dWorld&lt;IVisualScene2dComponent, MatterWorldComponent&gt;): void\n</code></pre>"},{"location":"modules/matter/components/matter-rigid-body.component.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg2dWorld&lt;IVisualScene2dComponent, MatterWorldComponent&gt;): void\n</code></pre>"},{"location":"modules/matter/components/matter-rigid-body.component.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/matter/components/matter-rigid-body.component.ts/#resetmotion-method","title":"resetMotion (method)","text":"<p>Signature</p> <pre><code>resetMotion(): void\n</code></pre>"},{"location":"modules/matter/components/matter-rigid-body.component.ts/#name-property","title":"name (property)","text":"<p>Signature</p> <pre><code>name: string\n</code></pre>"},{"location":"modules/matter/components/matter-rigid-body.component.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/matter/components/matter-world.component.ts/","title":"matter/components/matter-world.component.ts","text":""},{"location":"modules/matter/components/matter-world.component.ts/#matter-worldcomponent-overview","title":"matter-world.component overviewTable of contents","text":"<ul> <li>utils</li> <li>MatterWorldComponent (class)<ul> <li>init (method)</li> <li>simulate (method)</li> <li>startDebugger (method)</li> <li>stopDebugger (method)</li> <li>dispose (method)</li> <li>matterEngine (property)</li> <li>factory (property)</li> </ul> </li> </ul>"},{"location":"modules/matter/components/matter-world.component.ts/#utils","title":"utils","text":""},{"location":"modules/matter/components/matter-world.component.ts/#matterworldcomponent-class","title":"MatterWorldComponent (class)","text":"<p>Signature</p> <pre><code>export declare class MatterWorldComponent\n</code></pre>"},{"location":"modules/matter/components/matter-world.component.ts/#init-method","title":"init (method)","text":"<p>Signature</p> <pre><code>async init(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/matter/components/matter-world.component.ts/#simulate-method","title":"simulate (method)","text":"<p>Signature</p> <pre><code>simulate(delta: number): void\n</code></pre>"},{"location":"modules/matter/components/matter-world.component.ts/#startdebugger-method","title":"startDebugger (method)","text":"<p>Signature</p> <pre><code>startDebugger(world: Gg2dWorld, drawer: IDebugPhysicsDrawer&lt;Point2, number&gt;): void\n</code></pre>"},{"location":"modules/matter/components/matter-world.component.ts/#stopdebugger-method","title":"stopDebugger (method)","text":"<p>Signature</p> <pre><code>stopDebugger(): void\n</code></pre>"},{"location":"modules/matter/components/matter-world.component.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/matter/components/matter-world.component.ts/#matterengine-property","title":"matterEngine (property)","text":"<p>Signature</p> <pre><code>matterEngine: any\n</code></pre>"},{"location":"modules/matter/components/matter-world.component.ts/#factory-property","title":"factory (property)","text":"<p>Signature</p> <pre><code>readonly factory: MatterFactory\n</code></pre>"},{"location":"modules/pixi/","title":"Modules","text":"Directory table of contents <ul> <li>pixi/components</li> <li>pixi/pixi-factory.ts</li> </ul>"},{"location":"modules/pixi/pixi-factory.ts/","title":"pixi/pixi-factory.ts","text":""},{"location":"modules/pixi/pixi-factory.ts/#pixi-factory-overview","title":"pixi-factory overviewTable of contents","text":"<ul> <li>utils</li> <li>PixiFactory (class)<ul> <li>getRandomColor (method)</li> <li>createPrimitive (method)</li> </ul> </li> </ul>"},{"location":"modules/pixi/pixi-factory.ts/#utils","title":"utils","text":""},{"location":"modules/pixi/pixi-factory.ts/#pixifactory-class","title":"PixiFactory (class)","text":"<p>Signature</p> <pre><code>export declare class PixiFactory\n</code></pre>"},{"location":"modules/pixi/pixi-factory.ts/#getrandomcolor-method","title":"getRandomColor (method)","text":"<p>Signature</p> <pre><code>getRandomColor(): number\n</code></pre>"},{"location":"modules/pixi/pixi-factory.ts/#createprimitive-method","title":"createPrimitive (method)","text":"<p>Signature</p> <pre><code>createPrimitive(descriptor: Shape2DDescriptor, texture: Texture | null = null): PixiDisplayObjectComponent\n</code></pre>"},{"location":"modules/pixi/components/","title":"Modules","text":"Directory table of contents <ul> <li>pixi/components/pixi-display-object.component.ts</li> <li>pixi/components/pixi-renderer.component.ts</li> <li>pixi/components/pixi-scene.component.ts</li> </ul>"},{"location":"modules/pixi/components/pixi-display-object.component.ts/","title":"pixi/components/pixi-display-object.component.ts","text":""},{"location":"modules/pixi/components/pixi-display-object.component.ts/#pixi-display-objectcomponent-overview","title":"pixi-display-object.component overviewTable of contents","text":"<ul> <li>utils</li> <li>PixiDisplayObjectComponent (class)<ul> <li>isEmpty (method)</li> <li>popChild (method)</li> <li>getBoundings (method)</li> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>dispose (method)</li> <li>entity (property)</li> <li>name (property)</li> </ul> </li> </ul>"},{"location":"modules/pixi/components/pixi-display-object.component.ts/#utils","title":"utils","text":""},{"location":"modules/pixi/components/pixi-display-object.component.ts/#pixidisplayobjectcomponent-class","title":"PixiDisplayObjectComponent (class)","text":"<p>Signature</p> <pre><code>export declare class PixiDisplayObjectComponent {\n  constructor(public nativeSprite: DisplayObject)\n}\n</code></pre>"},{"location":"modules/pixi/components/pixi-display-object.component.ts/#isempty-method","title":"isEmpty (method)","text":"<p>Signature</p> <pre><code>public isEmpty(): boolean\n</code></pre>"},{"location":"modules/pixi/components/pixi-display-object.component.ts/#popchild-method","title":"popChild (method)","text":"<p>Signature</p> <pre><code>popChild(name: string): PixiDisplayObjectComponent | null\n</code></pre>"},{"location":"modules/pixi/components/pixi-display-object.component.ts/#getboundings-method","title":"getBoundings (method)","text":"<p>Signature</p> <pre><code>getBoundings(): GgBox2d\n</code></pre>"},{"location":"modules/pixi/components/pixi-display-object.component.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): PixiDisplayObjectComponent\n</code></pre>"},{"location":"modules/pixi/components/pixi-display-object.component.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg2dWorld&lt;PixiSceneComponent&gt;): void\n</code></pre>"},{"location":"modules/pixi/components/pixi-display-object.component.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg2dWorld&lt;PixiSceneComponent&gt;): void\n</code></pre>"},{"location":"modules/pixi/components/pixi-display-object.component.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/pixi/components/pixi-display-object.component.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/pixi/components/pixi-display-object.component.ts/#name-property","title":"name (property)","text":"<p>Signature</p> <pre><code>name: string\n</code></pre>"},{"location":"modules/pixi/components/pixi-renderer.component.ts/","title":"pixi/components/pixi-renderer.component.ts","text":""},{"location":"modules/pixi/components/pixi-renderer.component.ts/#pixi-renderercomponent-overview","title":"pixi-renderer.component overviewTable of contents","text":"<ul> <li>utils</li> <li>PixiRendererComponent (class)<ul> <li>resizeRenderer (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>render (method)</li> <li>dispose (method)</li> <li>application (property)</li> </ul> </li> </ul>"},{"location":"modules/pixi/components/pixi-renderer.component.ts/#utils","title":"utils","text":""},{"location":"modules/pixi/components/pixi-renderer.component.ts/#pixirenderercomponent-class","title":"PixiRendererComponent (class)","text":"<p>Signature</p> <pre><code>export declare class PixiRendererComponent {\n  constructor(\n    public readonly scene: PixiSceneComponent,\n    public readonly canvas?: HTMLCanvasElement,\n    options: Partial&lt;RendererOptions&gt; = {}\n  )\n}\n</code></pre>"},{"location":"modules/pixi/components/pixi-renderer.component.ts/#resizerenderer-method","title":"resizeRenderer (method)","text":"<p>Signature</p> <pre><code>resizeRenderer(newSize: Point2): void\n</code></pre>"},{"location":"modules/pixi/components/pixi-renderer.component.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg2dWorld&lt;PixiSceneComponent&gt;): void\n</code></pre>"},{"location":"modules/pixi/components/pixi-renderer.component.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg2dWorld&lt;PixiSceneComponent&gt;): void\n</code></pre>"},{"location":"modules/pixi/components/pixi-renderer.component.ts/#render-method","title":"render (method)","text":"<p>Signature</p> <pre><code>render(): void\n</code></pre>"},{"location":"modules/pixi/components/pixi-renderer.component.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/pixi/components/pixi-renderer.component.ts/#application-property","title":"application (property)","text":"<p>Signature</p> <pre><code>readonly application: any\n</code></pre>"},{"location":"modules/pixi/components/pixi-scene.component.ts/","title":"pixi/components/pixi-scene.component.ts","text":""},{"location":"modules/pixi/components/pixi-scene.component.ts/#pixi-scenecomponent-overview","title":"pixi-scene.component overviewTable of contents","text":"<ul> <li>utils</li> <li>PixiSceneComponent (class)<ul> <li>init (method)</li> <li>createRenderer (method)</li> <li>dispose (method)</li> <li>factory (property)</li> </ul> </li> </ul>"},{"location":"modules/pixi/components/pixi-scene.component.ts/#utils","title":"utils","text":""},{"location":"modules/pixi/components/pixi-scene.component.ts/#pixiscenecomponent-class","title":"PixiSceneComponent (class)","text":"<p>Signature</p> <pre><code>export declare class PixiSceneComponent\n</code></pre>"},{"location":"modules/pixi/components/pixi-scene.component.ts/#init-method","title":"init (method)","text":"<p>Signature</p> <pre><code>async init(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/pixi/components/pixi-scene.component.ts/#createrenderer-method","title":"createRenderer (method)","text":"<p>Signature</p> <pre><code>createRenderer(canvas?: HTMLCanvasElement, rendererOptions?: Partial&lt;RendererOptions&gt;): PixiRendererComponent\n</code></pre>"},{"location":"modules/pixi/components/pixi-scene.component.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/pixi/components/pixi-scene.component.ts/#factory-property","title":"factory (property)","text":"<p>Signature</p> <pre><code>readonly factory: PixiFactory\n</code></pre>"},{"location":"modules/rapier2d/","title":"Modules","text":"Directory table of contents <ul> <li>rapier2d/components</li> <li>rapier2d/index.ts</li> <li>rapier2d/rapier-2d-factory.ts</li> </ul>"},{"location":"modules/rapier2d/index.ts/","title":"rapier2d/index.ts","text":""},{"location":"modules/rapier2d/index.ts/#index-overview","title":"index overviewTable of contents","text":""},{"location":"modules/rapier2d/rapier-2d-factory.ts/","title":"rapier2d/rapier-2d-factory.ts","text":""},{"location":"modules/rapier2d/rapier-2d-factory.ts/#rapier-2d-factory-overview","title":"rapier-2d-factory overviewTable of contents","text":"<ul> <li>utils</li> <li>Rapier2dFactory (class)<ul> <li>createRigidBody (method)</li> <li>createTrigger (method)</li> <li>createColliderDescr (method)</li> <li>createRigidBodyDescr (method)</li> </ul> </li> </ul>"},{"location":"modules/rapier2d/rapier-2d-factory.ts/#utils","title":"utils","text":""},{"location":"modules/rapier2d/rapier-2d-factory.ts/#rapier2dfactory-class","title":"Rapier2dFactory (class)","text":"<p>Signature</p> <pre><code>export declare class Rapier2dFactory {\n  constructor(protected readonly world: Rapier2dWorldComponent)\n}\n</code></pre>"},{"location":"modules/rapier2d/rapier-2d-factory.ts/#createrigidbody-method","title":"createRigidBody (method)","text":"<p>Signature</p> <pre><code>createRigidBody(\n    descriptor: BodyShape2DDescriptor,\n    transform?: {\n      position?: Point2;\n      rotation?: number;\n    },\n  ): Rapier2dRigidBodyComponent\n</code></pre>"},{"location":"modules/rapier2d/rapier-2d-factory.ts/#createtrigger-method","title":"createTrigger (method)","text":"<p>Signature</p> <pre><code>createTrigger(\n    descriptor: Shape2DDescriptor,\n    transform?: {\n      position?: Point2;\n      rotation?: number;\n    },\n  ): Rapier2dTriggerComponent\n</code></pre>"},{"location":"modules/rapier2d/rapier-2d-factory.ts/#createcolliderdescr-method","title":"createColliderDescr (method)","text":"<p>Signature</p> <pre><code>public createColliderDescr(descriptor: Shape2DDescriptor): ColliderDesc[]\n</code></pre>"},{"location":"modules/rapier2d/rapier-2d-factory.ts/#createrigidbodydescr-method","title":"createRigidBodyDescr (method)","text":"<p>Signature</p> <pre><code>public createRigidBodyDescr(\n    options: Partial&lt;Body2DOptions&gt;,\n    transform?: { position?: Point2; rotation?: number },\n  ): RigidBodyDesc\n</code></pre>"},{"location":"modules/rapier2d/components/","title":"Modules","text":"Directory table of contents <ul> <li>rapier2d/components/rapier-2d-rigid-body.component.ts</li> <li>rapier2d/components/rapier-2d-trigger.component.ts</li> <li>rapier2d/components/rapier-2d-world.component.ts</li> </ul>"},{"location":"modules/rapier2d/components/rapier-2d-rigid-body.component.ts/","title":"rapier2d/components/rapier-2d-rigid-body.component.ts","text":""},{"location":"modules/rapier2d/components/rapier-2d-rigid-body.component.ts/#rapier-2d-rigid-bodycomponent-overview","title":"rapier-2d-rigid-body.component overviewTable of contents","text":"<ul> <li>utils</li> <li>Rapier2dRigidBodyComponent (class)<ul> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>resetMotion (method)</li> <li>dispose (method)</li> <li>entity (property)</li> <li>_nativeBody (property)</li> <li>_nativeBodyColliders (property)</li> <li>name (property)</li> </ul> </li> </ul>"},{"location":"modules/rapier2d/components/rapier-2d-rigid-body.component.ts/#utils","title":"utils","text":""},{"location":"modules/rapier2d/components/rapier-2d-rigid-body.component.ts/#rapier2drigidbodycomponent-class","title":"Rapier2dRigidBodyComponent (class)","text":"<p>Signature</p> <pre><code>export declare class Rapier2dRigidBodyComponent {\n  constructor(\n    protected readonly world: Rapier2dWorldComponent,\n    protected _colliderDescr: ColliderDesc[],\n    protected _bodyDescr: RigidBodyDesc,\n    protected _colliderOptions: Omit&lt;Omit&lt;Body2DOptions, 'dynamic'&gt;, 'mass'&gt;\n  )\n}\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-rigid-body.component.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): Rapier2dRigidBodyComponent\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-rigid-body.component.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg2dWorld&lt;IVisualScene2dComponent, Rapier2dWorldComponent&gt;): void\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-rigid-body.component.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg2dWorld&lt;IVisualScene2dComponent, Rapier2dWorldComponent&gt;): void\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-rigid-body.component.ts/#resetmotion-method","title":"resetMotion (method)","text":"<p>Signature</p> <pre><code>resetMotion(): void\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-rigid-body.component.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-rigid-body.component.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-rigid-body.component.ts/#_nativebody-property","title":"_nativeBody (property)","text":"<p>Signature</p> <pre><code>_nativeBody: any\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-rigid-body.component.ts/#_nativebodycolliders-property","title":"_nativeBodyColliders (property)","text":"<p>Signature</p> <pre><code>_nativeBodyColliders: any[] | null\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-rigid-body.component.ts/#name-property","title":"name (property)","text":"<p>Signature</p> <pre><code>name: string\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-trigger.component.ts/","title":"rapier2d/components/rapier-2d-trigger.component.ts","text":""},{"location":"modules/rapier2d/components/rapier-2d-trigger.component.ts/#rapier-2d-triggercomponent-overview","title":"rapier-2d-trigger.component overviewTable of contents","text":"<ul> <li>utils</li> <li>Rapier2dTriggerComponent (class)<ul> <li>addToWorld (method)</li> <li>checkOverlaps (method)</li> <li>clone (method)</li> <li>onEnter$ (property)</li> <li>onLeft$ (property)</li> </ul> </li> </ul>"},{"location":"modules/rapier2d/components/rapier-2d-trigger.component.ts/#utils","title":"utils","text":""},{"location":"modules/rapier2d/components/rapier-2d-trigger.component.ts/#rapier2dtriggercomponent-class","title":"Rapier2dTriggerComponent (class)","text":"<p>Signature</p> <pre><code>export declare class Rapier2dTriggerComponent {\n  constructor(\n    protected readonly world: Rapier2dWorldComponent,\n    protected _colliderDescr: ColliderDesc[],\n    protected _bodyDescr: RigidBodyDesc\n  )\n}\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-trigger.component.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg2dWorld&lt;IVisualScene2dComponent, Rapier2dWorldComponent&gt;): void\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-trigger.component.ts/#checkoverlaps-method","title":"checkOverlaps (method)","text":"<p>Signature</p> <pre><code>checkOverlaps(): void\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-trigger.component.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): Rapier2dTriggerComponent\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-trigger.component.ts/#onenter-property","title":"onEnter$ (property)","text":"<p>Signature</p> <pre><code>readonly onEnter$: any\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-trigger.component.ts/#onleft-property","title":"onLeft$ (property)","text":"<p>Signature</p> <pre><code>readonly onLeft$: any\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-world.component.ts/","title":"rapier2d/components/rapier-2d-world.component.ts","text":""},{"location":"modules/rapier2d/components/rapier-2d-world.component.ts/#rapier-2d-worldcomponent-overview","title":"rapier-2d-world.component overviewTable of contents","text":"<ul> <li>utils</li> <li>Rapier2dWorldComponent (class)<ul> <li>init (method)</li> <li>simulate (method)</li> <li>startDebugger (method)</li> <li>stopDebugger (method)</li> <li>dispose (method)</li> <li>_nativeWorld (property)</li> <li>handleIdEntityMap (property)</li> </ul> </li> </ul>"},{"location":"modules/rapier2d/components/rapier-2d-world.component.ts/#utils","title":"utils","text":""},{"location":"modules/rapier2d/components/rapier-2d-world.component.ts/#rapier2dworldcomponent-class","title":"Rapier2dWorldComponent (class)","text":"<p>Signature</p> <pre><code>export declare class Rapier2dWorldComponent\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-world.component.ts/#init-method","title":"init (method)","text":"<p>Signature</p> <pre><code>async init(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-world.component.ts/#simulate-method","title":"simulate (method)","text":"<p>Signature</p> <pre><code>simulate(delta: number): void\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-world.component.ts/#startdebugger-method","title":"startDebugger (method)","text":"<p>Signature</p> <pre><code>startDebugger(world: Gg2dWorld, drawer: IDebugPhysicsDrawer&lt;Point2, number&gt;): void\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-world.component.ts/#stopdebugger-method","title":"stopDebugger (method)","text":"<p>Signature</p> <pre><code>stopDebugger(): void\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-world.component.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-world.component.ts/#_nativeworld-property","title":"_nativeWorld (property)","text":"<p>Signature</p> <pre><code>_nativeWorld: any\n</code></pre>"},{"location":"modules/rapier2d/components/rapier-2d-world.component.ts/#handleidentitymap-property","title":"handleIdEntityMap (property)","text":"<p>Signature</p> <pre><code>readonly handleIdEntityMap: any\n</code></pre>"},{"location":"modules/rapier3d/","title":"Modules","text":"Directory table of contents <ul> <li>rapier3d/components</li> <li>rapier3d/index.ts</li> <li>rapier3d/rapier-3d-factory.ts</li> <li>rapier3d/rapier-3d-loader.ts</li> </ul>"},{"location":"modules/rapier3d/index.ts/","title":"rapier3d/index.ts","text":""},{"location":"modules/rapier3d/index.ts/#index-overview","title":"index overviewTable of contents","text":""},{"location":"modules/rapier3d/rapier-3d-factory.ts/","title":"rapier3d/rapier-3d-factory.ts","text":""},{"location":"modules/rapier3d/rapier-3d-factory.ts/#rapier-3d-factory-overview","title":"rapier-3d-factory overviewTable of contents","text":"<ul> <li>utils</li> <li>Rapier3dFactory (class)<ul> <li>createRigidBody (method)</li> <li>createTrigger (method)</li> <li>createColliderDescr (method)</li> <li>createRigidBodyDescr (method)</li> </ul> </li> </ul>"},{"location":"modules/rapier3d/rapier-3d-factory.ts/#utils","title":"utils","text":""},{"location":"modules/rapier3d/rapier-3d-factory.ts/#rapier3dfactory-class","title":"Rapier3dFactory (class)","text":"<p>Signature</p> <pre><code>export declare class Rapier3dFactory {\n  constructor(protected readonly world: Rapier3dWorldComponent)\n}\n</code></pre>"},{"location":"modules/rapier3d/rapier-3d-factory.ts/#createrigidbody-method","title":"createRigidBody (method)","text":"<p>Signature</p> <pre><code>createRigidBody(\n    descriptor: BodyShape3DDescriptor,\n    transform?: {\n      position?: Point3;\n      rotation?: Point4;\n    },\n  ): Rapier3dRigidBodyComponent\n</code></pre>"},{"location":"modules/rapier3d/rapier-3d-factory.ts/#createtrigger-method","title":"createTrigger (method)","text":"<p>Signature</p> <pre><code>createTrigger(\n    descriptor: Shape3DDescriptor,\n    transform?: {\n      position?: Point3;\n      rotation?: Point4;\n    },\n  ): Rapier3dTriggerComponent\n</code></pre>"},{"location":"modules/rapier3d/rapier-3d-factory.ts/#createcolliderdescr-method","title":"createColliderDescr (method)","text":"<p>Signature</p> <pre><code>public createColliderDescr(descriptor: Shape3DDescriptor): ColliderDesc[]\n</code></pre>"},{"location":"modules/rapier3d/rapier-3d-factory.ts/#createrigidbodydescr-method","title":"createRigidBodyDescr (method)","text":"<p>Signature</p> <pre><code>public createRigidBodyDescr(\n    options: Partial&lt;Body3DOptions&gt;,\n    transform?: { position?: Point3; rotation?: Point4 },\n  ): RigidBodyDesc\n</code></pre>"},{"location":"modules/rapier3d/rapier-3d-loader.ts/","title":"rapier3d/rapier-3d-loader.ts","text":""},{"location":"modules/rapier3d/rapier-3d-loader.ts/#rapier-3d-loader-overview","title":"rapier-3d-loader overviewTable of contents","text":"<ul> <li>utils</li> <li>Rapier3dLoader (class)</li> </ul>"},{"location":"modules/rapier3d/rapier-3d-loader.ts/#utils","title":"utils","text":""},{"location":"modules/rapier3d/rapier-3d-loader.ts/#rapier3dloader-class","title":"Rapier3dLoader (class)","text":"<p>Signature</p> <pre><code>export declare class Rapier3dLoader {\n  constructor(protected readonly world: Rapier3dWorldComponent)\n}\n</code></pre>"},{"location":"modules/rapier3d/components/","title":"Modules","text":"Directory table of contents <ul> <li>rapier3d/components/rapier-3d-raycast-vehicle.component.ts</li> <li>rapier3d/components/rapier-3d-rigid-body.component.ts</li> <li>rapier3d/components/rapier-3d-trigger.component.ts</li> <li>rapier3d/components/rapier-3d-world.component.ts</li> </ul>"},{"location":"modules/rapier3d/components/rapier-3d-raycast-vehicle.component.ts/","title":"rapier3d/components/rapier-3d-raycast-vehicle.component.ts","text":""},{"location":"modules/rapier3d/components/rapier-3d-raycast-vehicle.component.ts/#rapier-3d-raycast-vehiclecomponent-overview","title":"rapier-3d-raycast-vehicle.component overviewTable of contents","text":"<ul> <li>utils</li> <li>Rapier3dRaycastVehicleComponent (class)<ul> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>addWheel (method)</li> <li>setSteering (method)</li> <li>applyEngineForce (method)</li> <li>applyBrake (method)</li> <li>isWheelTouchesGround (method)</li> <li>getWheelTransform (method)</li> <li>resetSuspension (method)</li> <li>dispose (method)</li> <li>_nativeVehicle (property)</li> </ul> </li> </ul>"},{"location":"modules/rapier3d/components/rapier-3d-raycast-vehicle.component.ts/#utils","title":"utils","text":""},{"location":"modules/rapier3d/components/rapier-3d-raycast-vehicle.component.ts/#rapier3draycastvehiclecomponent-class","title":"Rapier3dRaycastVehicleComponent (class)","text":"<p>Signature</p> <pre><code>export declare class Rapier3dRaycastVehicleComponent {\n  constructor(protected readonly world: Rapier3dWorldComponent, private chassisBody: Rapier3dRigidBodyComponent)\n}\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-raycast-vehicle.component.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg3dWorld&lt;IVisualScene3dComponent, Rapier3dWorldComponent&gt;)\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-raycast-vehicle.component.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg3dWorld&lt;IVisualScene3dComponent, Rapier3dWorldComponent&gt;)\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-raycast-vehicle.component.ts/#addwheel-method","title":"addWheel (method)","text":"<p>Signature</p> <pre><code>addWheel(options: WheelOptions, suspensionOptions: SuspensionOptions): void\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-raycast-vehicle.component.ts/#setsteering-method","title":"setSteering (method)","text":"<p>Signature</p> <pre><code>setSteering(wheelIndex: number, steering: number): void\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-raycast-vehicle.component.ts/#applyengineforce-method","title":"applyEngineForce (method)","text":"<p>Signature</p> <pre><code>applyEngineForce(wheelIndex: number, force: number): void\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-raycast-vehicle.component.ts/#applybrake-method","title":"applyBrake (method)","text":"<p>Signature</p> <pre><code>applyBrake(wheelIndex: number, force: number): void\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-raycast-vehicle.component.ts/#iswheeltouchesground-method","title":"isWheelTouchesGround (method)","text":"<p>Signature</p> <pre><code>isWheelTouchesGround(wheelIndex: number): boolean\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-raycast-vehicle.component.ts/#getwheeltransform-method","title":"getWheelTransform (method)","text":"<p>Signature</p> <pre><code>getWheelTransform(wheelIndex: number): { position: Point3; rotation: Point4 }\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-raycast-vehicle.component.ts/#resetsuspension-method","title":"resetSuspension (method)","text":"<p>Signature</p> <pre><code>resetSuspension(): void\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-raycast-vehicle.component.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose()\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-raycast-vehicle.component.ts/#_nativevehicle-property","title":"_nativeVehicle (property)","text":"<p>Signature</p> <pre><code>_nativeVehicle: any\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-rigid-body.component.ts/","title":"rapier3d/components/rapier-3d-rigid-body.component.ts","text":""},{"location":"modules/rapier3d/components/rapier-3d-rigid-body.component.ts/#rapier-3d-rigid-bodycomponent-overview","title":"rapier-3d-rigid-body.component overviewTable of contents","text":"<ul> <li>utils</li> <li>Rapier3dRigidBodyComponent (class)<ul> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>resetMotion (method)</li> <li>dispose (method)</li> <li>entity (property)</li> <li>_nativeBody (property)</li> <li>_nativeBodyColliders (property)</li> <li>name (property)</li> </ul> </li> </ul>"},{"location":"modules/rapier3d/components/rapier-3d-rigid-body.component.ts/#utils","title":"utils","text":""},{"location":"modules/rapier3d/components/rapier-3d-rigid-body.component.ts/#rapier3drigidbodycomponent-class","title":"Rapier3dRigidBodyComponent (class)","text":"<p>Signature</p> <pre><code>export declare class Rapier3dRigidBodyComponent {\n  constructor(\n    protected readonly world: Rapier3dWorldComponent,\n    protected _colliderDescr: ColliderDesc[],\n    protected _bodyDescr: RigidBodyDesc,\n    protected _colliderOptions: Omit&lt;Omit&lt;Body3DOptions, 'dynamic'&gt;, 'mass'&gt;\n  )\n}\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-rigid-body.component.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): Rapier3dRigidBodyComponent\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-rigid-body.component.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg3dWorld&lt;IVisualScene3dComponent, Rapier3dWorldComponent&gt;): void\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-rigid-body.component.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg3dWorld&lt;IVisualScene3dComponent, Rapier3dWorldComponent&gt;): void\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-rigid-body.component.ts/#resetmotion-method","title":"resetMotion (method)","text":"<p>Signature</p> <pre><code>resetMotion(): void\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-rigid-body.component.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-rigid-body.component.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-rigid-body.component.ts/#_nativebody-property","title":"_nativeBody (property)","text":"<p>Signature</p> <pre><code>_nativeBody: any\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-rigid-body.component.ts/#_nativebodycolliders-property","title":"_nativeBodyColliders (property)","text":"<p>Signature</p> <pre><code>_nativeBodyColliders: any[] | null\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-rigid-body.component.ts/#name-property","title":"name (property)","text":"<p>Signature</p> <pre><code>name: string\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-trigger.component.ts/","title":"rapier3d/components/rapier-3d-trigger.component.ts","text":""},{"location":"modules/rapier3d/components/rapier-3d-trigger.component.ts/#rapier-3d-triggercomponent-overview","title":"rapier-3d-trigger.component overviewTable of contents","text":"<ul> <li>utils</li> <li>Rapier3dTriggerComponent (class)<ul> <li>addToWorld (method)</li> <li>checkOverlaps (method)</li> <li>clone (method)</li> <li>onEnter$ (property)</li> <li>onLeft$ (property)</li> </ul> </li> </ul>"},{"location":"modules/rapier3d/components/rapier-3d-trigger.component.ts/#utils","title":"utils","text":""},{"location":"modules/rapier3d/components/rapier-3d-trigger.component.ts/#rapier3dtriggercomponent-class","title":"Rapier3dTriggerComponent (class)","text":"<p>Signature</p> <pre><code>export declare class Rapier3dTriggerComponent {\n  constructor(\n    protected readonly world: Rapier3dWorldComponent,\n    protected _colliderDescr: ColliderDesc[],\n    protected _bodyDescr: RigidBodyDesc\n  )\n}\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-trigger.component.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg3dWorld&lt;IVisualScene3dComponent, Rapier3dWorldComponent&gt;): void\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-trigger.component.ts/#checkoverlaps-method","title":"checkOverlaps (method)","text":"<p>Signature</p> <pre><code>checkOverlaps(): void\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-trigger.component.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): Rapier3dTriggerComponent\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-trigger.component.ts/#onenter-property","title":"onEnter$ (property)","text":"<p>Signature</p> <pre><code>readonly onEnter$: any\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-trigger.component.ts/#onleft-property","title":"onLeft$ (property)","text":"<p>Signature</p> <pre><code>readonly onLeft$: any\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-world.component.ts/","title":"rapier3d/components/rapier-3d-world.component.ts","text":""},{"location":"modules/rapier3d/components/rapier-3d-world.component.ts/#rapier-3d-worldcomponent-overview","title":"rapier-3d-world.component overviewTable of contents","text":"<ul> <li>utils</li> <li>Rapier3dWorldComponent (class)<ul> <li>init (method)</li> <li>simulate (method)</li> <li>startDebugger (method)</li> <li>stopDebugger (method)</li> <li>dispose (method)</li> <li>_nativeWorld (property)</li> <li>handleIdEntityMap (property)</li> </ul> </li> </ul>"},{"location":"modules/rapier3d/components/rapier-3d-world.component.ts/#utils","title":"utils","text":""},{"location":"modules/rapier3d/components/rapier-3d-world.component.ts/#rapier3dworldcomponent-class","title":"Rapier3dWorldComponent (class)","text":"<p>Signature</p> <pre><code>export declare class Rapier3dWorldComponent\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-world.component.ts/#init-method","title":"init (method)","text":"<p>Signature</p> <pre><code>async init(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-world.component.ts/#simulate-method","title":"simulate (method)","text":"<p>Signature</p> <pre><code>simulate(delta: number): void\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-world.component.ts/#startdebugger-method","title":"startDebugger (method)","text":"<p>Signature</p> <pre><code>startDebugger(world: Gg3dWorld, drawer: IDebugPhysicsDrawer&lt;Point3, Point4&gt;): void\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-world.component.ts/#stopdebugger-method","title":"stopDebugger (method)","text":"<p>Signature</p> <pre><code>stopDebugger(): void\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-world.component.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-world.component.ts/#_nativeworld-property","title":"_nativeWorld (property)","text":"<p>Signature</p> <pre><code>_nativeWorld: any\n</code></pre>"},{"location":"modules/rapier3d/components/rapier-3d-world.component.ts/#handleidentitymap-property","title":"handleIdEntityMap (property)","text":"<p>Signature</p> <pre><code>readonly handleIdEntityMap: any\n</code></pre>"},{"location":"modules/three/","title":"Modules","text":"Directory table of contents <ul> <li>three/components</li> <li>three/three-factory.ts</li> <li>three/three-loader.ts</li> <li>three/three-physics-drawer.ts</li> </ul>"},{"location":"modules/three/three-factory.ts/","title":"three/three-factory.ts","text":""},{"location":"modules/three/three-factory.ts/#three-factory-overview","title":"three-factory overviewTable of contents","text":"<ul> <li>utils</li> <li>ThreeFactory (class)<ul> <li>getRandomMaterial (method)</li> <li>transformPrimitiveZUp (method)</li> <li>createPrimitive (method)</li> </ul> </li> </ul>"},{"location":"modules/three/three-factory.ts/#utils","title":"utils","text":""},{"location":"modules/three/three-factory.ts/#threefactory-class","title":"ThreeFactory (class)","text":"<p>Signature</p> <pre><code>export declare class ThreeFactory\n</code></pre>"},{"location":"modules/three/three-factory.ts/#getrandommaterial-method","title":"getRandomMaterial (method)","text":"<p>Signature</p> <pre><code>getRandomMaterial(): Material\n</code></pre>"},{"location":"modules/three/three-factory.ts/#transformprimitivezup-method","title":"transformPrimitiveZUp (method)","text":"<p>Signature</p> <pre><code>private transformPrimitiveZUp(object: Object3D): Group\n</code></pre>"},{"location":"modules/three/three-factory.ts/#createprimitive-method","title":"createPrimitive (method)","text":"<p>Signature</p> <pre><code>createPrimitive(\n    descriptor: Shape3DDescriptor,\n    material: Material = this.getRandomMaterial(),\n  ): ThreeDisplayObjectComponent\n</code></pre>"},{"location":"modules/three/three-loader.ts/","title":"three/three-loader.ts","text":""},{"location":"modules/three/three-loader.ts/#three-loader-overview","title":"three-loader overviewTable of contents","text":"<ul> <li>utils</li> <li>ThreeLoader (class)<ul> <li>registerGltfLoaderAddon (method)</li> <li>loadFromGgGlb (method)</li> </ul> </li> </ul>"},{"location":"modules/three/three-loader.ts/#utils","title":"utils","text":""},{"location":"modules/three/three-loader.ts/#threeloader-class","title":"ThreeLoader (class)","text":"<p>Signature</p> <pre><code>export declare class ThreeLoader\n</code></pre>"},{"location":"modules/three/three-loader.ts/#registergltfloaderaddon-method","title":"registerGltfLoaderAddon (method)","text":"<p>Signature</p> <pre><code>public registerGltfLoaderAddon(gltf: any): void\n</code></pre>"},{"location":"modules/three/three-loader.ts/#loadfromggglb-method","title":"loadFromGgGlb (method)","text":"<p>Signature</p> <pre><code>public async loadFromGgGlb(glbFile: ArrayBuffer, meta: GgMeta): Promise&lt;ThreeDisplayObjectComponent | null&gt;\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/","title":"three/three-physics-drawer.ts","text":""},{"location":"modules/three/three-physics-drawer.ts/#three-physics-drawer-overview","title":"three-physics-drawer overviewTable of contents","text":"<ul> <li>utils</li> <li>ThreePhysicsDrawer (class)<ul> <li>drawContactPoint (method)</li> <li>drawLine (method)</li> <li>update (method)</li> <li>setXYZ (method)</li> <li>entity (property)</li> <li>debugBufferSize (property)</li> <li>debugVertices (property)</li> <li>debugColors (property)</li> </ul> </li> </ul>"},{"location":"modules/three/three-physics-drawer.ts/#utils","title":"utils","text":""},{"location":"modules/three/three-physics-drawer.ts/#threephysicsdrawer-class","title":"ThreePhysicsDrawer (class)","text":"<p>Signature</p> <pre><code>export declare class ThreePhysicsDrawer {\n  constructor()\n}\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#drawcontactpoint-method","title":"drawContactPoint (method)","text":"<p>Signature</p> <pre><code>drawContactPoint(point: Point3, normal: Point3, color?: Point3): void\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#drawline-method","title":"drawLine (method)","text":"<p>Signature</p> <pre><code>drawLine(from: Point3, to: Point3, color?: Point3): void\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#update-method","title":"update (method)","text":"<p>Signature</p> <pre><code>update()\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#setxyz-method","title":"setXYZ (method)","text":"<p>Signature</p> <pre><code>private setXYZ(array: Float32Array, index: number, x: number, y: number, z: number)\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#debugbuffersize-property","title":"debugBufferSize (property)","text":"<p>Signature</p> <pre><code>readonly debugBufferSize: number\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#debugvertices-property","title":"debugVertices (property)","text":"<p>Signature</p> <pre><code>readonly debugVertices: Float32Array\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#debugcolors-property","title":"debugColors (property)","text":"<p>Signature</p> <pre><code>readonly debugColors: Float32Array\n</code></pre>"},{"location":"modules/three/components/","title":"Modules","text":"Directory table of contents <ul> <li>three/components/three-camera.component.ts</li> <li>three/components/three-display-object.component.ts</li> <li>three/components/three-renderer-component.ts</li> <li>three/components/three-scene.component.ts</li> </ul>"},{"location":"modules/three/components/three-camera.component.ts/","title":"three/components/three-camera.component.ts","text":""},{"location":"modules/three/components/three-camera.component.ts/#three-cameracomponent-overview","title":"three-camera.component overviewTable of contents","text":"<ul> <li>utils</li> <li>ThreeCameraComponent (class)</li> </ul>"},{"location":"modules/three/components/three-camera.component.ts/#utils","title":"utils","text":""},{"location":"modules/three/components/three-camera.component.ts/#threecameracomponent-class","title":"ThreeCameraComponent (class)","text":"<p>Signature</p> <pre><code>export declare class ThreeCameraComponent {\n  constructor(public readonly nativeCamera: Camera)\n}\n</code></pre>"},{"location":"modules/three/components/three-display-object.component.ts/","title":"three/components/three-display-object.component.ts","text":""},{"location":"modules/three/components/three-display-object.component.ts/#three-display-objectcomponent-overview","title":"three-display-object.component overviewTable of contents","text":"<ul> <li>utils</li> <li>ThreeDisplayObjectComponent (class)<ul> <li>isEmpty (method)</li> <li>popChild (method)</li> <li>getBoundings (method)</li> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>dispose (method)</li> <li>disposeMesh (method)</li> <li>entity (property)</li> </ul> </li> </ul>"},{"location":"modules/three/components/three-display-object.component.ts/#utils","title":"utils","text":""},{"location":"modules/three/components/three-display-object.component.ts/#threedisplayobjectcomponent-class","title":"ThreeDisplayObjectComponent (class)","text":"<p>Signature</p> <pre><code>export declare class ThreeDisplayObjectComponent {\n  constructor(public nativeMesh: Object3D)\n}\n</code></pre>"},{"location":"modules/three/components/three-display-object.component.ts/#isempty-method","title":"isEmpty (method)","text":"<p>Signature</p> <pre><code>public isEmpty(): boolean\n</code></pre>"},{"location":"modules/three/components/three-display-object.component.ts/#popchild-method","title":"popChild (method)","text":"<p>Signature</p> <pre><code>popChild(name: string): ThreeDisplayObjectComponent | null\n</code></pre>"},{"location":"modules/three/components/three-display-object.component.ts/#getboundings-method","title":"getBoundings (method)","text":"<p>Signature</p> <pre><code>getBoundings(): GgBox3d\n</code></pre>"},{"location":"modules/three/components/three-display-object.component.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): ThreeDisplayObjectComponent\n</code></pre>"},{"location":"modules/three/components/three-display-object.component.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg3dWorld&lt;ThreeSceneComponent&gt;): void\n</code></pre>"},{"location":"modules/three/components/three-display-object.component.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg3dWorld&lt;ThreeSceneComponent&gt;): void\n</code></pre>"},{"location":"modules/three/components/three-display-object.component.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/three/components/three-display-object.component.ts/#disposemesh-method","title":"disposeMesh (method)","text":"<p>Signature</p> <pre><code>private disposeMesh(mesh: Mesh)\n</code></pre>"},{"location":"modules/three/components/three-display-object.component.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/three/components/three-renderer-component.ts/","title":"three/components/three-renderer-component.ts","text":""},{"location":"modules/three/components/three-renderer-component.ts/#three-renderer-component-overview","title":"three-renderer-component overviewTable of contents","text":"<ul> <li>utils</li> <li>ThreeRendererComponent (class)<ul> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>resizeRenderer (method)</li> <li>render (method)</li> <li>dispose (method)</li> <li>nativeRenderer (property)</li> </ul> </li> </ul>"},{"location":"modules/three/components/three-renderer-component.ts/#utils","title":"utils","text":""},{"location":"modules/three/components/three-renderer-component.ts/#threerenderercomponent-class","title":"ThreeRendererComponent (class)","text":"<p>Signature</p> <pre><code>export declare class ThreeRendererComponent {\n  constructor(\n    public readonly scene: ThreeSceneComponent,\n    public readonly canvas?: HTMLCanvasElement,\n    rendererOptions: Partial&lt;RendererOptions&gt; = {},\n    public camera: ThreeCameraComponent = new ThreeCameraComponent(new PerspectiveCamera(75, 1, 1, 10000))\n  )\n}\n</code></pre>"},{"location":"modules/three/components/three-renderer-component.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg3dWorld&lt;ThreeSceneComponent&gt;)\n</code></pre>"},{"location":"modules/three/components/three-renderer-component.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg3dWorld&lt;ThreeSceneComponent&gt;)\n</code></pre>"},{"location":"modules/three/components/three-renderer-component.ts/#resizerenderer-method","title":"resizeRenderer (method)","text":"<p>Signature</p> <pre><code>resizeRenderer(newSize: Point2): void\n</code></pre>"},{"location":"modules/three/components/three-renderer-component.ts/#render-method","title":"render (method)","text":"<p>Signature</p> <pre><code>render(): void\n</code></pre>"},{"location":"modules/three/components/three-renderer-component.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/three/components/three-renderer-component.ts/#nativerenderer-property","title":"nativeRenderer (property)","text":"<p>Signature</p> <pre><code>readonly nativeRenderer: any\n</code></pre>"},{"location":"modules/three/components/three-scene.component.ts/","title":"three/components/three-scene.component.ts","text":""},{"location":"modules/three/components/three-scene.component.ts/#three-scenecomponent-overview","title":"three-scene.component overviewTable of contents","text":"<ul> <li>utils</li> <li>ThreeSceneComponent (class)<ul> <li>init (method)</li> <li>createRenderer (method)</li> <li>dispose (method)</li> <li>factory (property)</li> <li>loader (property)</li> <li>debugPhysicsDrawerClass (property)</li> </ul> </li> </ul>"},{"location":"modules/three/components/three-scene.component.ts/#utils","title":"utils","text":""},{"location":"modules/three/components/three-scene.component.ts/#threescenecomponent-class","title":"ThreeSceneComponent (class)","text":"<p>Signature</p> <pre><code>export declare class ThreeSceneComponent\n</code></pre>"},{"location":"modules/three/components/three-scene.component.ts/#init-method","title":"init (method)","text":"<p>Signature</p> <pre><code>async init(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/three/components/three-scene.component.ts/#createrenderer-method","title":"createRenderer (method)","text":"<p>Signature</p> <pre><code>createRenderer(\n    camera: ThreeCameraComponent,\n    canvas?: HTMLCanvasElement,\n    rendererOptions?: Partial&lt;RendererOptions&gt;,\n  ): ThreeRendererComponent\n</code></pre>"},{"location":"modules/three/components/three-scene.component.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/three/components/three-scene.component.ts/#factory-property","title":"factory (property)","text":"<p>Signature</p> <pre><code>readonly factory: ThreeFactory\n</code></pre>"},{"location":"modules/three/components/three-scene.component.ts/#loader-property","title":"loader (property)","text":"<p>Signature</p> <pre><code>readonly loader: ThreeLoader\n</code></pre>"},{"location":"modules/three/components/three-scene.component.ts/#debugphysicsdrawerclass-property","title":"debugPhysicsDrawerClass (property)","text":"<p>Signature</p> <pre><code>readonly debugPhysicsDrawerClass: typeof ThreePhysicsDrawer\n</code></pre>"}]}