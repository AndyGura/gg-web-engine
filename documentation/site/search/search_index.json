{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"modules/","title":"Modules","text":"Directory table of contents <ul> <li>ammo</li> <li>core</li> <li>matter</li> <li>pixi</li> <li>three</li> </ul> All modules <ul> <li>index</li> <li>ammo/ammo-debugger.ts</li> <li>ammo/ammo-utils.ts</li> <li>ammo/impl/gg-3d-body-factory.ts</li> <li>ammo/impl/gg-3d-body-loader.ts</li> <li>ammo/impl/gg-3d-physics-world.ts</li> <li>ammo/impl/gg-3d-raycast-vehicle.ts</li> <li>ammo/impl/bodies/base-ammo-gg-body.ts</li> <li>ammo/impl/bodies/gg-3d-body.ts</li> <li>ammo/impl/bodies/gg-3d-trigger.ts</li> <li>core/2d/factories.ts</li> <li>core/2d/gg-2d-world.ts</li> <li>core/2d/interfaces.ts</li> <li>core/2d/entities/gg-2d-entity.ts</li> <li>core/2d/entities/gg-2d-trigger.entity.ts</li> <li>core/2d/entities/gg-positionable-2d-entity.ts</li> <li>core/2d/models/body-options.ts</li> <li>core/2d/models/shapes.ts</li> <li>core/3d/factories.ts</li> <li>core/3d/gg-3d-world.ts</li> <li>core/3d/interfaces.ts</li> <li>core/3d/loader.ts</li> <li>core/3d/controllers/car-keyboard.controller.ts</li> <li>core/3d/controllers/free-camera.controller.ts</li> <li>core/3d/entities/gg-3d-camera.entity.ts</li> <li>core/3d/entities/gg-3d-entity.ts</li> <li>core/3d/entities/gg-3d-map-graph.entity.ts</li> <li>core/3d/entities/gg-3d-raycast-vehicle.entity.ts</li> <li>core/3d/entities/gg-3d-trigger.entity.ts</li> <li>core/3d/entities/gg-positionable-3d-entity.ts</li> <li>core/3d/entities/controllers/entity-motion.controller.ts</li> <li>core/3d/models/body-options.ts</li> <li>core/3d/models/gg-meta.ts</li> <li>core/3d/models/shapes.ts</li> <li>core/base/clock.ts</li> <li>core/base/gg-static.ts</li> <li>core/base/gg-viewport-manager.ts</li> <li>core/base/gg-viewport.ts</li> <li>core/base/gg-world.ts</li> <li>core/base/controllers/common.ts</li> <li>core/base/controllers/i-controller.ts</li> <li>core/base/controllers/keyboard.controller.ts</li> <li>core/base/controllers/mouse.controller.ts</li> <li>core/base/data-structures/graph.ts</li> <li>core/base/entities/base-gg-renderer.ts</li> <li>core/base/entities/gg-entity.ts</li> <li>core/base/entities/gg-positionable-entity.ts</li> <li>core/base/entities/inline-controller.ts</li> <li>core/base/entities/interfaces/i-tick-listener.ts</li> <li>core/base/interfaces/gg-body.ts</li> <li>core/base/interfaces/gg-debug-physics-drawer.ts</li> <li>core/base/interfaces/gg-object.ts</li> <li>core/base/interfaces/gg-physics-world.ts</li> <li>core/base/interfaces/gg-trigger.ts</li> <li>core/base/interfaces/gg-visual-scene.ts</li> <li>core/base/math/box.ts</li> <li>core/base/math/matrix4.ts</li> <li>core/base/math/numbers.ts</li> <li>core/base/math/point2.ts</li> <li>core/base/math/point3.ts</li> <li>core/base/math/quaternion.ts</li> <li>core/base/models/axis-directions.ts</li> <li>core/base/models/body-options.ts</li> <li>core/base/models/geometry-nodes.ts</li> <li>core/base/models/points.ts</li> <li>core/base/ui/gg-console.ui.ts</li> <li>core/base/ui/gg-debugger.ui.ts</li> <li>matter/impl/gg-2d-body-factory.ts</li> <li>matter/impl/gg-2d-body.ts</li> <li>matter/impl/gg-2d-physics-world.ts</li> <li>pixi/impl/gg-2d-object-factory.ts</li> <li>pixi/impl/gg-2d-object.ts</li> <li>pixi/impl/gg-2d-visual-scene.ts</li> <li>pixi/impl/gg-renderer.ts</li> <li>three/three-physics-drawer.ts</li> <li>three/impl/gg-3d-object-factory.ts</li> <li>three/impl/gg-3d-object-loader.ts</li> <li>three/impl/gg-3d-object.ts</li> <li>three/impl/gg-3d-visual-scene.ts</li> <li>three/impl/gg-renderer.ts</li> <li>three/impl/three-camera.entity.ts</li> <li>three/impl/three-camera.ts</li> </ul>"},{"location":"modules/ammo/","title":"Modules","text":"Directory table of contents <ul> <li>ammo/ammo-debugger.ts</li> <li>ammo/ammo-utils.ts</li> <li>ammo/impl</li> </ul>"},{"location":"modules/ammo/ammo-debugger.ts/","title":"ammo/ammo-debugger.ts","text":""},{"location":"modules/ammo/ammo-debugger.ts/#ammo-debugger-overview","title":"ammo-debugger overviewTable of contents","text":"<ul> <li>utils</li> <li>AmmoDebugger (class)<ul> <li>draw3dText (method)</li> <li>drawContactPoint (method)</li> <li>drawLine (method)</li> <li>getDebugMode (method)</li> <li>update (method)</li> <li>setDebugFlags (method)</li> <li>setDebugMode (method)</li> <li>reportErrorWarning (method)</li> <li>ammoInstance (property)</li> </ul> </li> <li>DebugBufferSize</li> </ul>"},{"location":"modules/ammo/ammo-debugger.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/ammo-debugger.ts/#ammodebugger-class","title":"AmmoDebugger (class)","text":"<p>Signature</p> <pre><code>export declare class AmmoDebugger {\n  constructor(private readonly world: Gg3dPhysicsWorld, private readonly drawer: GgDebugPhysicsDrawer&lt;Point3, Point4&gt;)\n}\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#draw3dtext-method","title":"draw3dText (method)","text":"<p>Signature</p> <pre><code>draw3dText(location: Ammo.btVector3, textString: string): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#drawcontactpoint-method","title":"drawContactPoint (method)","text":"<p>Signature</p> <pre><code>drawContactPoint(\n    pointOnB: Ammo.btVector3,\n    normalOnB: Ammo.btVector3,\n    distance: number,\n    lifeTime: number,\n    color: Ammo.btVector3,\n  ): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#drawline-method","title":"drawLine (method)","text":"<p>Signature</p> <pre><code>drawLine(from: Ammo.btVector3, to: Ammo.btVector3, color: Ammo.btVector3): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#getdebugmode-method","title":"getDebugMode (method)","text":"<p>Signature</p> <pre><code>getDebugMode(): number\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#update-method","title":"update (method)","text":"<p>Signature</p> <pre><code>update(): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#setdebugflags-method","title":"setDebugFlags (method)","text":"<p>Signature</p> <pre><code>setDebugFlags(flags: AmmoDebugMode[]): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#setdebugmode-method","title":"setDebugMode (method)","text":"<p>Signature</p> <pre><code>setDebugMode(debugMode: number): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#reporterrorwarning-method","title":"reportErrorWarning (method)","text":"<p>Signature</p> <pre><code>reportErrorWarning(warningString: string): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#ammoinstance-property","title":"ammoInstance (property)","text":"<p>Signature</p> <pre><code>readonly ammoInstance: any\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#debugbuffersize","title":"DebugBufferSize","text":"<p>Signature</p> <pre><code>export declare const DebugBufferSize: number\n</code></pre>"},{"location":"modules/ammo/ammo-utils.ts/","title":"ammo/ammo-utils.ts","text":""},{"location":"modules/ammo/ammo-utils.ts/#ammo-utils-overview","title":"ammo-utils overviewTable of contents","text":"<ul> <li>utils</li> <li>ammoId</li> </ul>"},{"location":"modules/ammo/ammo-utils.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/ammo-utils.ts/#ammoid","title":"ammoId","text":"<p>Signature</p> <pre><code>export declare const ammoId: (body: any) =&gt; number\n</code></pre>"},{"location":"modules/ammo/impl/","title":"Modules","text":"Directory table of contents <ul> <li>ammo/impl/bodies</li> <li>ammo/impl/gg-3d-body-factory.ts</li> <li>ammo/impl/gg-3d-body-loader.ts</li> <li>ammo/impl/gg-3d-physics-world.ts</li> <li>ammo/impl/gg-3d-raycast-vehicle.ts</li> </ul>"},{"location":"modules/ammo/impl/gg-3d-body-factory.ts/","title":"ammo/impl/gg-3d-body-factory.ts","text":""},{"location":"modules/ammo/impl/gg-3d-body-factory.ts/#gg-3d-body-factory-overview","title":"gg-3d-body-factory overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dBodyFactory (class)<ul> <li>createRigidBody (method)</li> <li>createTrigger (method)</li> <li>createShape (method)</li> <li>createRigidBodyFromShape (method)</li> <li>createTriggerFromShape (method)</li> </ul> </li> </ul>"},{"location":"modules/ammo/impl/gg-3d-body-factory.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/impl/gg-3d-body-factory.ts/#gg3dbodyfactory-class","title":"Gg3dBodyFactory (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dBodyFactory {\n  constructor(private readonly world: Gg3dPhysicsWorld)\n}\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-body-factory.ts/#createrigidbody-method","title":"createRigidBody (method)","text":"<p>Signature</p> <pre><code>createRigidBody(\n    descriptor: BodyShape3DDescriptor,\n    transform?: {\n      position?: Point3;\n      rotation?: Point4;\n    },\n  ): Gg3dBody\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-body-factory.ts/#createtrigger-method","title":"createTrigger (method)","text":"<p>Signature</p> <pre><code>createTrigger(\n    descriptor: Shape3DDescriptor,\n    transform?: {\n      position?: Point3;\n      rotation?: Point4;\n    },\n  ): Gg3dTrigger\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-body-factory.ts/#createshape-method","title":"createShape (method)","text":"<p>Signature</p> <pre><code>private createShape(descriptor: Shape3DDescriptor): Ammo.btCollisionShape\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-body-factory.ts/#createrigidbodyfromshape-method","title":"createRigidBodyFromShape (method)","text":"<p>Signature</p> <pre><code>public createRigidBodyFromShape(\n    shape: Ammo.btCollisionShape,\n    options: Partial&lt;Body3DOptions&gt;,\n    transform?: { position?: Point3; rotation?: Point4 },\n  ): Gg3dBody\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-body-factory.ts/#createtriggerfromshape-method","title":"createTriggerFromShape (method)","text":"<p>Signature</p> <pre><code>public createTriggerFromShape(\n    shape: Ammo.btCollisionShape,\n    transform?: { position?: Point3; rotation?: Point4 },\n  ): Gg3dTrigger\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-body-loader.ts/","title":"ammo/impl/gg-3d-body-loader.ts","text":""},{"location":"modules/ammo/impl/gg-3d-body-loader.ts/#gg-3d-body-loader-overview","title":"gg-3d-body-loader overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dBodyLoader (class)</li> </ul>"},{"location":"modules/ammo/impl/gg-3d-body-loader.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/impl/gg-3d-body-loader.ts/#gg3dbodyloader-class","title":"Gg3dBodyLoader (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dBodyLoader {\n  constructor(protected readonly world: Gg3dPhysicsWorld)\n}\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/","title":"ammo/impl/gg-3d-physics-world.ts","text":""},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/#gg-3d-physics-world-overview","title":"gg-3d-physics-world overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dPhysicsWorld (class)<ul> <li>init (method)</li> <li>simulate (method)</li> <li>startDebugger (method)</li> <li>stopDebugger (method)</li> <li>dispose (method)</li> </ul> </li> </ul>"},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/#gg3dphysicsworld-class","title":"Gg3dPhysicsWorld (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dPhysicsWorld\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/#init-method","title":"init (method)","text":"<p>Signature</p> <pre><code>async init(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/#simulate-method","title":"simulate (method)","text":"<p>Signature</p> <pre><code>simulate(delta: number): void\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/#startdebugger-method","title":"startDebugger (method)","text":"<p>Signature</p> <pre><code>startDebugger(world: Gg3dWorld, drawer: GgDebugPhysicsDrawer&lt;Point3, Point4&gt;): void\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/#stopdebugger-method","title":"stopDebugger (method)","text":"<p>Signature</p> <pre><code>stopDebugger(world: Gg3dWorld): void\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/","title":"ammo/impl/gg-3d-raycast-vehicle.ts","text":""},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#gg-3d-raycast-vehicle-overview","title":"gg-3d-raycast-vehicle overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dRaycastVehicle (class)<ul> <li>addToWorld (method)</li> <li>addWheel (method)</li> <li>setSteering (method)</li> <li>applyEngineForce (method)</li> <li>applyBrake (method)</li> <li>isWheelTouchesGround (method)</li> <li>getWheelTransform (method)</li> <li>resetSuspension (method)</li> <li>nativeVehicle (property)</li> <li>vehicleTuning (property)</li> <li>wheelDirectionCS0 (property)</li> <li>wheelAxleCS (property)</li> <li>entity (property)</li> </ul> </li> </ul>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#gg3draycastvehicle-class","title":"Gg3dRaycastVehicle (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dRaycastVehicle {\n  constructor(protected readonly world: Gg3dPhysicsWorld, public chassisBody: Ammo.btRigidBody)\n}\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg3dPhysicsWorld)\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#addwheel-method","title":"addWheel (method)","text":"<p>Signature</p> <pre><code>addWheel(options: WheelOptions, suspensionOptions: SuspensionOptions): void\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#setsteering-method","title":"setSteering (method)","text":"<p>Signature</p> <pre><code>setSteering(wheelIndex: number, steering: number): void\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#applyengineforce-method","title":"applyEngineForce (method)","text":"<p>Signature</p> <pre><code>applyEngineForce(wheelIndex: number, force: number): void\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#applybrake-method","title":"applyBrake (method)","text":"<p>Signature</p> <pre><code>applyBrake(wheelIndex: number, force: number): void\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#iswheeltouchesground-method","title":"isWheelTouchesGround (method)","text":"<p>Signature</p> <pre><code>isWheelTouchesGround(wheelIndex: number): boolean\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#getwheeltransform-method","title":"getWheelTransform (method)","text":"<p>Signature</p> <pre><code>getWheelTransform(wheelIndex: number): { position: Point3; rotation: Point4 }\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#resetsuspension-method","title":"resetSuspension (method)","text":"<p>Signature</p> <pre><code>resetSuspension(): void\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#nativevehicle-property","title":"nativeVehicle (property)","text":"<p>Signature</p> <pre><code>readonly nativeVehicle: any\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#vehicletuning-property","title":"vehicleTuning (property)","text":"<p>Signature</p> <pre><code>readonly vehicleTuning: any\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#wheeldirectioncs0-property","title":"wheelDirectionCS0 (property)","text":"<p>Signature</p> <pre><code>readonly wheelDirectionCS0: any\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#wheelaxlecs-property","title":"wheelAxleCS (property)","text":"<p>Signature</p> <pre><code>readonly wheelAxleCS: any\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/ammo/impl/bodies/","title":"Modules","text":"Directory table of contents <ul> <li>ammo/impl/bodies/base-ammo-gg-body.ts</li> <li>ammo/impl/bodies/gg-3d-body.ts</li> <li>ammo/impl/bodies/gg-3d-trigger.ts</li> </ul>"},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/","title":"ammo/impl/bodies/base-ammo-gg-body.ts","text":""},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#base-ammo-gg-body-overview","title":"base-ammo-gg-body overviewTable of contents","text":"<ul> <li>utils</li> <li>BaseAmmoGGBody (class)<ul> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>dispose (method)</li> <li>resetMotion (method)</li> <li>name (property)</li> <li>entity (property)</li> </ul> </li> </ul>"},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#baseammoggbody-class","title":"BaseAmmoGGBody (class)","text":"<p>Signature</p> <pre><code>export declare class BaseAmmoGGBody&lt;T&gt; {\n  protected constructor(protected readonly world: Gg3dPhysicsWorld, protected _nativeBody: T)\n}\n</code></pre>"},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>abstract clone(): BaseAmmoGGBody&lt;T&gt;;\n</code></pre>"},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>abstract addToWorld(world: Gg3dPhysicsWorld): void;\n</code></pre>"},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>abstract removeFromWorld(world: Gg3dPhysicsWorld): void;\n</code></pre>"},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#resetmotion-method","title":"resetMotion (method)","text":"<p>Signature</p> <pre><code>abstract resetMotion(): void;\n</code></pre>"},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#name-property","title":"name (property)","text":"<p>Signature</p> <pre><code>name: string\n</code></pre>"},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-body.ts/","title":"ammo/impl/bodies/gg-3d-body.ts","text":""},{"location":"modules/ammo/impl/bodies/gg-3d-body.ts/#gg-3d-body-overview","title":"gg-3d-body overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dBody (class)<ul> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>resetMotion (method)</li> <li>entity (property)</li> </ul> </li> </ul>"},{"location":"modules/ammo/impl/bodies/gg-3d-body.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/impl/bodies/gg-3d-body.ts/#gg3dbody-class","title":"Gg3dBody (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dBody {\n  constructor(protected readonly world: Gg3dPhysicsWorld, protected _nativeBody: Ammo.btRigidBody)\n}\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-body.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): Gg3dBody\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-body.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg3dPhysicsWorld): void\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-body.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg3dPhysicsWorld): void\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-body.ts/#resetmotion-method","title":"resetMotion (method)","text":"<p>Signature</p> <pre><code>resetMotion(): void\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-body.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/","title":"ammo/impl/bodies/gg-3d-trigger.ts","text":""},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#gg-3d-trigger-overview","title":"gg-3d-trigger overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dTrigger (class)<ul> <li>checkOverlaps (method)</li> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>dispose (method)</li> <li>resetMotion (method)</li> <li>entity (property)</li> </ul> </li> </ul>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#gg3dtrigger-class","title":"Gg3dTrigger (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dTrigger {\n  constructor(protected readonly world: Gg3dPhysicsWorld, protected _nativeBody: Ammo.btPairCachingGhostObject)\n}\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#checkoverlaps-method","title":"checkOverlaps (method)","text":"<p>Signature</p> <pre><code>checkOverlaps(): void\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): Gg3dTrigger\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg3dPhysicsWorld)\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg3dPhysicsWorld): void\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#resetmotion-method","title":"resetMotion (method)","text":"<p>Signature</p> <pre><code>resetMotion(): void\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/core/","title":"Modules","text":"Directory table of contents <ul> <li>core/2d</li> <li>core/3d</li> <li>core/base</li> </ul>"},{"location":"modules/core/2d/","title":"Modules","text":"Directory table of contents <ul> <li>core/2d/entities</li> <li>core/2d/factories.ts</li> <li>core/2d/gg-2d-world.ts</li> <li>core/2d/interfaces.ts</li> <li>core/2d/models</li> </ul>"},{"location":"modules/core/2d/factories.ts/","title":"core/2d/factories.ts","text":""},{"location":"modules/core/2d/factories.ts/#factories-overview","title":"factories overviewTable of contents","text":"<ul> <li>utils</li> <li>IGg2dBodyFactory (interface)</li> <li>IGg2dObjectFactory (class)<ul> <li>createPrimitive (method)</li> <li>createSquare (method)</li> <li>createCircle (method)</li> </ul> </li> </ul>"},{"location":"modules/core/2d/factories.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/factories.ts/#igg2dbodyfactory-interface","title":"IGg2dBodyFactory (interface)","text":"<p>Signature</p> <pre><code>export interface IGg2dBodyFactory&lt;T extends IGg2dBody = IGg2dBody, K extends IGg2dTrigger = IGg2dTrigger&gt; {\n  createRigidBody(descriptor: BodyShape2DDescriptor, transform?: { position?: Point2; rotation?: number }): T\n  createTrigger(descriptor: Shape2DDescriptor, transform?: { position?: Point2; rotation?: number }): K\n}\n</code></pre>"},{"location":"modules/core/2d/factories.ts/#igg2dobjectfactory-class","title":"IGg2dObjectFactory (class)","text":"<p>Signature</p> <pre><code>export declare class IGg2dObjectFactory&lt;T&gt;\n</code></pre>"},{"location":"modules/core/2d/factories.ts/#createprimitive-method","title":"createPrimitive (method)","text":"<p>Signature</p> <pre><code>abstract createPrimitive(descriptor: Shape2DDescriptor): T;\n</code></pre>"},{"location":"modules/core/2d/factories.ts/#createsquare-method","title":"createSquare (method)","text":"<p>Signature</p> <pre><code>createSquare(dimensions: Point2): T\n</code></pre>"},{"location":"modules/core/2d/factories.ts/#createcircle-method","title":"createCircle (method)","text":"<p>Signature</p> <pre><code>createCircle(radius: number): T\n</code></pre>"},{"location":"modules/core/2d/gg-2d-world.ts/","title":"core/2d/gg-2d-world.ts","text":""},{"location":"modules/core/2d/gg-2d-world.ts/#gg-2d-world-overview","title":"gg-2d-world overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dWorld (class)</li> </ul>"},{"location":"modules/core/2d/gg-2d-world.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/gg-2d-world.ts/#gg2dworld-class","title":"Gg2dWorld (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dWorld&lt;V, P&gt; {\n  constructor(\n    public readonly visualScene: V,\n    public readonly physicsWorld: P,\n    protected readonly consoleEnabled: boolean = false\n  )\n}\n</code></pre>"},{"location":"modules/core/2d/interfaces.ts/","title":"core/2d/interfaces.ts","text":""},{"location":"modules/core/2d/interfaces.ts/#interfaces-overview","title":"interfaces overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dRenderer (class)</li> <li>IGg2dBody (interface)</li> <li>IGg2dObject (interface)</li> <li>IGg2dPhysicsWorld (interface)</li> <li>IGg2dTrigger (interface)</li> <li>IGg2dVisualScene (interface)</li> </ul>"},{"location":"modules/core/2d/interfaces.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/interfaces.ts/#gg2drenderer-class","title":"Gg2dRenderer (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dRenderer\n</code></pre>"},{"location":"modules/core/2d/interfaces.ts/#igg2dbody-interface","title":"IGg2dBody (interface)","text":"<p>Signature</p> <pre><code>export interface IGg2dBody extends GgBody&lt;Point2, number&gt; {}\n</code></pre>"},{"location":"modules/core/2d/interfaces.ts/#igg2dobject-interface","title":"IGg2dObject (interface)","text":"<p>Signature</p> <pre><code>export interface IGg2dObject extends GgObject&lt;Point2, number&gt; {}\n</code></pre>"},{"location":"modules/core/2d/interfaces.ts/#igg2dphysicsworld-interface","title":"IGg2dPhysicsWorld (interface)","text":"<p>Signature</p> <pre><code>export interface IGg2dPhysicsWorld extends GgPhysicsWorld&lt;Point2, number&gt; {\n  readonly factory: IGg2dBodyFactory\n}\n</code></pre>"},{"location":"modules/core/2d/interfaces.ts/#igg2dtrigger-interface","title":"IGg2dTrigger (interface)","text":"<p>Signature</p> <pre><code>export interface IGg2dTrigger extends GgTrigger&lt;Point2, number&gt; {\n</code></pre>"},{"location":"modules/core/2d/interfaces.ts/#igg2dvisualscene-interface","title":"IGg2dVisualScene (interface)","text":"<p>Signature</p> <pre><code>export interface IGg2dVisualScene extends GgVisualScene&lt;Point2, number&gt; {\n  readonly factory: IGg2dObjectFactory\n}\n</code></pre>"},{"location":"modules/core/2d/entities/","title":"Modules","text":"Directory table of contents <ul> <li>core/2d/entities/gg-2d-entity.ts</li> <li>core/2d/entities/gg-2d-trigger.entity.ts</li> <li>core/2d/entities/gg-positionable-2d-entity.ts</li> </ul>"},{"location":"modules/core/2d/entities/gg-2d-entity.ts/","title":"core/2d/entities/gg-2d-entity.ts","text":""},{"location":"modules/core/2d/entities/gg-2d-entity.ts/#gg-2d-entity-overview","title":"gg-2d-entity overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dEntity (class)<ul> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>dispose (method)</li> <li>tick$ (property)</li> <li>tickOrder (property)</li> </ul> </li> </ul>"},{"location":"modules/core/2d/entities/gg-2d-entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/entities/gg-2d-entity.ts/#gg2dentity-class","title":"Gg2dEntity (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dEntity {\n  constructor(public readonly object2D: IGg2dObject | null, public readonly objectBody: IGg2dBody | null)\n}\n</code></pre>"},{"location":"modules/core/2d/entities/gg-2d-entity.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: Gg2dWorld)\n</code></pre>"},{"location":"modules/core/2d/entities/gg-2d-entity.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>onRemoved()\n</code></pre>"},{"location":"modules/core/2d/entities/gg-2d-entity.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/core/2d/entities/gg-2d-entity.ts/#tick-property","title":"tick$ (property)","text":"<p>Signature</p> <pre><code>readonly tick$: any\n</code></pre>"},{"location":"modules/core/2d/entities/gg-2d-entity.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: 750\n</code></pre>"},{"location":"modules/core/2d/entities/gg-2d-trigger.entity.ts/","title":"core/2d/entities/gg-2d-trigger.entity.ts","text":""},{"location":"modules/core/2d/entities/gg-2d-trigger.entity.ts/#gg-2d-triggerentity-overview","title":"gg-2d-trigger.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dTriggerEntity (class)</li> </ul>"},{"location":"modules/core/2d/entities/gg-2d-trigger.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/entities/gg-2d-trigger.entity.ts/#gg2dtriggerentity-class","title":"Gg2dTriggerEntity (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dTriggerEntity {\n  constructor(public readonly objectBody: IGg2dTrigger)\n}\n</code></pre>"},{"location":"modules/core/2d/entities/gg-positionable-2d-entity.ts/","title":"core/2d/entities/gg-positionable-2d-entity.ts","text":""},{"location":"modules/core/2d/entities/gg-positionable-2d-entity.ts/#gg-positionable-2d-entity-overview","title":"gg-positionable-2d-entity overviewTable of contents","text":"<ul> <li>utils</li> <li>GgPositionable2dEntity (class)<ul> <li>getDefaultPosition (method)</li> <li>getDefaultRotation (method)</li> <li>getDefaultScale (method)</li> </ul> </li> </ul>"},{"location":"modules/core/2d/entities/gg-positionable-2d-entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/entities/gg-positionable-2d-entity.ts/#ggpositionable2dentity-class","title":"GgPositionable2dEntity (class)","text":"<p>Signature</p> <pre><code>export declare class GgPositionable2dEntity\n</code></pre>"},{"location":"modules/core/2d/entities/gg-positionable-2d-entity.ts/#getdefaultposition-method","title":"getDefaultPosition (method)","text":"<p>Signature</p> <pre><code>getDefaultPosition(): Point2\n</code></pre>"},{"location":"modules/core/2d/entities/gg-positionable-2d-entity.ts/#getdefaultrotation-method","title":"getDefaultRotation (method)","text":"<p>Signature</p> <pre><code>getDefaultRotation(): number\n</code></pre>"},{"location":"modules/core/2d/entities/gg-positionable-2d-entity.ts/#getdefaultscale-method","title":"getDefaultScale (method)","text":"<p>Signature</p> <pre><code>getDefaultScale(): Point2\n</code></pre>"},{"location":"modules/core/2d/models/","title":"Modules","text":"Directory table of contents <ul> <li>core/2d/models/body-options.ts</li> <li>core/2d/models/shapes.ts</li> </ul>"},{"location":"modules/core/2d/models/body-options.ts/","title":"core/2d/models/body-options.ts","text":""},{"location":"modules/core/2d/models/body-options.ts/#body-options-overview","title":"body-options overviewTable of contents","text":"<ul> <li>utils</li> <li>Body2DOptions (interface)</li> </ul>"},{"location":"modules/core/2d/models/body-options.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/models/body-options.ts/#body2doptions-interface","title":"Body2DOptions (interface)","text":"<p>Signature</p> <pre><code>export interface Body2DOptions extends BodyOptions {}\n</code></pre>"},{"location":"modules/core/2d/models/shapes.ts/","title":"core/2d/models/shapes.ts","text":""},{"location":"modules/core/2d/models/shapes.ts/#shapes-overview","title":"shapes overviewTable of contents","text":"<ul> <li>utils</li> <li>BodyShape2DDescriptor (type alias)</li> <li>Shape2DDescriptor (type alias)</li> </ul>"},{"location":"modules/core/2d/models/shapes.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/models/shapes.ts/#bodyshape2ddescriptor-type-alias","title":"BodyShape2DDescriptor (type alias)","text":"<p>Signature</p> <pre><code>export type BodyShape2DDescriptor = { shape: Shape2DDescriptor; body: Partial&lt;Body2DOptions&gt; }\n</code></pre>"},{"location":"modules/core/2d/models/shapes.ts/#shape2ddescriptor-type-alias","title":"Shape2DDescriptor (type alias)","text":"<p>Signature</p> <pre><code>export type Shape2DDescriptor = { shape: 'SQUARE'; dimensions: Point2 } | { shape: 'CIRCLE'; radius: number }\n</code></pre>"},{"location":"modules/core/3d/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/controllers</li> <li>core/3d/entities</li> <li>core/3d/factories.ts</li> <li>core/3d/gg-3d-world.ts</li> <li>core/3d/interfaces.ts</li> <li>core/3d/loader.ts</li> <li>core/3d/models</li> </ul>"},{"location":"modules/core/3d/factories.ts/","title":"core/3d/factories.ts","text":""},{"location":"modules/core/3d/factories.ts/#factories-overview","title":"factories overviewTable of contents","text":"<ul> <li>utils</li> <li>IGg3dBodyFactory (interface)</li> <li>IGg3dObjectFactory (class)<ul> <li>createPrimitive (method)</li> <li>createBox (method)</li> <li>createCapsule (method)</li> <li>createCylinder (method)</li> <li>createCone (method)</li> <li>createSphere (method)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/factories.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/factories.ts/#igg3dbodyfactory-interface","title":"IGg3dBodyFactory (interface)","text":"<p>Signature</p> <pre><code>export interface IGg3dBodyFactory&lt;T extends IGg3dBody = IGg3dBody, K extends IGg3dTrigger = IGg3dTrigger&gt; {\n  createRigidBody(descriptor: BodyShape3DDescriptor, transform?: { position?: Point3; rotation?: Point4 }): T\n  createTrigger(descriptor: Shape3DDescriptor, transform?: { position?: Point3; rotation?: Point4 }): K\n}\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#igg3dobjectfactory-class","title":"IGg3dObjectFactory (class)","text":"<p>Signature</p> <pre><code>export declare class IGg3dObjectFactory&lt;T&gt;\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#createprimitive-method","title":"createPrimitive (method)","text":"<p>Signature</p> <pre><code>abstract createPrimitive(descriptor: Shape3DDescriptor, material?: any): T;\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#createbox-method","title":"createBox (method)","text":"<p>Signature</p> <pre><code>createBox(dimensions: Point3, material?: any): T\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#createcapsule-method","title":"createCapsule (method)","text":"<p>Signature</p> <pre><code>createCapsule(radius: number, centersDistance: number, material?: any): T\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#createcylinder-method","title":"createCylinder (method)","text":"<p>Signature</p> <pre><code>createCylinder(radius: number, height: number, material?: any): T\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#createcone-method","title":"createCone (method)","text":"<p>Signature</p> <pre><code>createCone(radius: number, height: number, material?: any): T\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#createsphere-method","title":"createSphere (method)","text":"<p>Signature</p> <pre><code>createSphere(radius: number): T\n</code></pre>"},{"location":"modules/core/3d/gg-3d-world.ts/","title":"core/3d/gg-3d-world.ts","text":""},{"location":"modules/core/3d/gg-3d-world.ts/#gg-3d-world-overview","title":"gg-3d-world overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dWorld (class)<ul> <li>loader (property)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/gg-3d-world.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/gg-3d-world.ts/#gg3dworld-class","title":"Gg3dWorld (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dWorld&lt;V, P&gt; {\n  constructor(\n    public readonly visualScene: V,\n    public readonly physicsWorld: P,\n    protected readonly consoleEnabled: boolean = false\n  )\n}\n</code></pre>"},{"location":"modules/core/3d/gg-3d-world.ts/#loader-property","title":"loader (property)","text":"<p>Signature</p> <pre><code>readonly loader: Gg3dLoader\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/","title":"core/3d/interfaces.ts","text":""},{"location":"modules/core/3d/interfaces.ts/#interfaces-overview","title":"interfaces overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dRenderer (class)<ul> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>camera (property)</li> </ul> </li> <li>IGg3dBody (interface)</li> <li>IGg3dBodyLoader (class)<ul> <li>loadFromGgGlb (method)</li> </ul> </li> <li>IGg3dCamera (interface)</li> <li>IGg3dObject (interface)</li> <li>IGg3dObjectLoader (interface)</li> <li>IGg3dPhysicsWorld (interface)</li> <li>IGg3dRaycastVehicle (interface)</li> <li>IGg3dTrigger (interface)</li> <li>IGg3dVisualScene (interface)</li> </ul>"},{"location":"modules/core/3d/interfaces.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/interfaces.ts/#gg3drenderer-class","title":"Gg3dRenderer (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dRenderer\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>public onSpawned(world: GgWorld&lt;any, any&gt;)\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>onRemoved()\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#camera-property","title":"camera (property)","text":"<p>Signature</p> <pre><code>readonly camera: Gg3dCameraEntity&lt;IGg3dCamera&gt;\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#igg3dbody-interface","title":"IGg3dBody (interface)","text":"<p>Signature</p> <pre><code>export interface IGg3dBody extends GgBody&lt;Point3, Point4&gt; {}\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#igg3dbodyloader-class","title":"IGg3dBodyLoader (class)","text":"<p>Signature</p> <pre><code>export declare class IGg3dBodyLoader {\n  protected constructor(protected readonly world: IGg3dPhysicsWorld)\n}\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#loadfromggglb-method","title":"loadFromGgGlb (method)","text":"<p>Signature</p> <pre><code>async loadFromGgGlb(glbFile: ArrayBuffer, meta: GgMeta): Promise&lt;IGg3dBody[]&gt;\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#igg3dcamera-interface","title":"IGg3dCamera (interface)","text":"<p>Signature</p> <pre><code>export interface IGg3dCamera extends IGg3dObject {\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#igg3dobject-interface","title":"IGg3dObject (interface)","text":"<p>Signature</p> <pre><code>export interface IGg3dObject extends GgObject&lt;Point3, Point4&gt; {}\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#igg3dobjectloader-interface","title":"IGg3dObjectLoader (interface)","text":"<p>Signature</p> <pre><code>export interface IGg3dObjectLoader {\n  loadFromGgGlb(glbFile: ArrayBuffer, meta: GgMeta): Promise&lt;IGg3dObject | null&gt;\n}\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#igg3dphysicsworld-interface","title":"IGg3dPhysicsWorld (interface)","text":"<p>Signature</p> <pre><code>export interface IGg3dPhysicsWorld extends GgPhysicsWorld&lt;Point3, Point4&gt; {\n  readonly factory: IGg3dBodyFactory\n  readonly loader: IGg3dBodyLoader\n}\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#igg3draycastvehicle-interface","title":"IGg3dRaycastVehicle (interface)","text":"<p>Signature</p> <pre><code>export interface IGg3dRaycastVehicle extends IGg3dBody {\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#igg3dtrigger-interface","title":"IGg3dTrigger (interface)","text":"<p>Signature</p> <pre><code>export interface IGg3dTrigger extends GgTrigger&lt;Point3, Point4&gt; {\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#igg3dvisualscene-interface","title":"IGg3dVisualScene (interface)","text":"<p>Signature</p> <pre><code>export interface IGg3dVisualScene extends GgVisualScene&lt;Point3, Point4&gt; {\n  readonly factory: IGg3dObjectFactory\n  readonly loader: IGg3dObjectLoader\n}\n</code></pre>"},{"location":"modules/core/3d/loader.ts/","title":"core/3d/loader.ts","text":""},{"location":"modules/core/3d/loader.ts/#loader-overview","title":"loader overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dLoader (class)<ul> <li>loadGgGlbFiles (method)</li> <li>loadGgGlbResources (method)</li> <li>loadGgGlb (method)</li> <li>filesCache (property)</li> <li>loadResultCache (property)</li> </ul> </li> <li>LoadOptions (type alias)</li> <li>LoadResourcesResult (type alias)</li> <li>LoadResult (type alias)</li> <li>LoadResultWithProps (type alias)</li> </ul>"},{"location":"modules/core/3d/loader.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/loader.ts/#gg3dloader-class","title":"Gg3dLoader (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dLoader {\n  constructor(protected readonly world: Gg3dWorld)\n}\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadggglbfiles-method","title":"loadGgGlbFiles (method)","text":"<p>Signature</p> <pre><code>public async loadGgGlbFiles(path: string, useCache: boolean = false): Promise&lt;[ArrayBuffer, GgMeta]&gt;\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadggglbresources-method","title":"loadGgGlbResources (method)","text":"<p>Signature</p> <pre><code>public async loadGgGlbResources(\n    path: string,\n    cachingStrategy: CachingStrategy = CachingStrategy.Nothing,\n  ): Promise&lt;LoadResourcesResult&gt;\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadggglb-method","title":"loadGgGlb (method)","text":"<p>Signature</p> <pre><code>public async loadGgGlb(\n    path: string,\n    options: Partial&lt;LoadOptions&gt; = defaultLoadOptions,\n  ): Promise&lt;LoadResultWithProps&gt;\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#filescache-property","title":"filesCache (property)","text":"<p>Signature</p> <pre><code>readonly filesCache: any\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadresultcache-property","title":"loadResultCache (property)","text":"<p>Signature</p> <pre><code>readonly loadResultCache: any\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadoptions-type-alias","title":"LoadOptions (type alias)","text":"<p>Signature</p> <pre><code>export type LoadOptions = {\n  // whether to cache anything\n  // \"Nothing\" does not cache anything\n  // \"Files\" caches GLB+Meta file contents\n  // \"Entities\" clones and saves parsed from GLB+Meta objects and bodies\n  cachingStrategy: CachingStrategy\n  // initial position\n  position: Point3\n  // initial rotation\n  rotation: Point4\n  // process dummies with flag is_prop\n  loadProps: boolean\n  // path where to find prop scenes\n  propsPath?: string\n}\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadresourcesresult-type-alias","title":"LoadResourcesResult (type alias)","text":"<p>Signature</p> <pre><code>export type LoadResourcesResult = {\n  resources: { object3D: IGg3dObject | null; body: IGg3dBody | null }[]\n  meta: GgMeta\n}\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadresult-type-alias","title":"LoadResult (type alias)","text":"<p>Signature</p> <pre><code>export type LoadResult = {\n  entities: Gg3dEntity[]\n  meta: GgMeta\n}\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadresultwithprops-type-alias","title":"LoadResultWithProps (type alias)","text":"<p>Signature</p> <pre><code>export type LoadResultWithProps = LoadResult &amp; { props?: LoadResult[] }\n</code></pre>"},{"location":"modules/core/3d/controllers/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/controllers/car-keyboard.controller.ts</li> <li>core/3d/controllers/free-camera.controller.ts</li> </ul>"},{"location":"modules/core/3d/controllers/car-keyboard.controller.ts/","title":"core/3d/controllers/car-keyboard.controller.ts","text":""},{"location":"modules/core/3d/controllers/car-keyboard.controller.ts/#car-keyboardcontroller-overview","title":"car-keyboard.controller overviewTable of contents","text":"<ul> <li>utils</li> <li>CarKeyboardController (class)<ul> <li>start (method)</li> <li>stop (method)</li> <li>car$ (property)</li> <li>pairTickerPipe (property)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/controllers/car-keyboard.controller.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/controllers/car-keyboard.controller.ts/#carkeyboardcontroller-class","title":"CarKeyboardController (class)","text":"<p>Signature</p> <pre><code>export declare class CarKeyboardController {\n  constructor(\n    private readonly keyboardController: KeyboardController,\n    car: Gg3dRaycastVehicleEntity,\n    private readonly options: CarKeyboardControllerOptions = { keymap: 'arrows', gearUpDownKeys: ['KeyA', 'KeyZ'] }\n  )\n}\n</code></pre>"},{"location":"modules/core/3d/controllers/car-keyboard.controller.ts/#start-method","title":"start (method)","text":"<p>Signature</p> <pre><code>async start(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/3d/controllers/car-keyboard.controller.ts/#stop-method","title":"stop (method)","text":"<p>Signature</p> <pre><code>async stop(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/3d/controllers/car-keyboard.controller.ts/#car-property","title":"car$ (property)","text":"<p>Signature</p> <pre><code>readonly car$: any\n</code></pre>"},{"location":"modules/core/3d/controllers/car-keyboard.controller.ts/#pairtickerpipe-property","title":"pairTickerPipe (property)","text":"<p>Signature</p> <pre><code>pairTickerPipe: any\n</code></pre>"},{"location":"modules/core/3d/controllers/free-camera.controller.ts/","title":"core/3d/controllers/free-camera.controller.ts","text":""},{"location":"modules/core/3d/controllers/free-camera.controller.ts/#free-cameracontroller-overview","title":"free-camera.controller overviewTable of contents","text":"<ul> <li>utils</li> <li>FreeCameraController (class)<ul> <li>start (method)</li> <li>stop (method)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/controllers/free-camera.controller.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/controllers/free-camera.controller.ts/#freecameracontroller-class","title":"FreeCameraController (class)","text":"<p>Signature</p> <pre><code>export declare class FreeCameraController {\n  constructor(\n    private readonly keyboardController: KeyboardController,\n    private readonly camera: Gg3dCameraEntity,\n    private readonly options: FreeCameraControllerOptions = {\n      keymap: 'wasd',\n      movementOptions: { speed: 0.5 },\n      mouseOptions: {},\n    }\n  )\n}\n</code></pre>"},{"location":"modules/core/3d/controllers/free-camera.controller.ts/#start-method","title":"start (method)","text":"<p>Signature</p> <pre><code>async start(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/3d/controllers/free-camera.controller.ts/#stop-method","title":"stop (method)","text":"<p>Signature</p> <pre><code>async stop(unlockPointer: boolean = true): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/entities/controllers</li> <li>core/3d/entities/gg-3d-camera.entity.ts</li> <li>core/3d/entities/gg-3d-entity.ts</li> <li>core/3d/entities/gg-3d-map-graph.entity.ts</li> <li>core/3d/entities/gg-3d-raycast-vehicle.entity.ts</li> <li>core/3d/entities/gg-3d-trigger.entity.ts</li> <li>core/3d/entities/gg-positionable-3d-entity.ts</li> </ul>"},{"location":"modules/core/3d/entities/gg-3d-camera.entity.ts/","title":"core/3d/entities/gg-3d-camera.entity.ts","text":""},{"location":"modules/core/3d/entities/gg-3d-camera.entity.ts/#gg-3d-cameraentity-overview","title":"gg-3d-camera.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dCameraEntity (class)</li> </ul>"},{"location":"modules/core/3d/entities/gg-3d-camera.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/gg-3d-camera.entity.ts/#gg3dcameraentity-class","title":"Gg3dCameraEntity (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dCameraEntity&lt;T&gt; {\n  constructor(public readonly object3D: T, public readonly objectBody: IGg3dBody | null = null)\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-entity.ts/","title":"core/3d/entities/gg-3d-entity.ts","text":""},{"location":"modules/core/3d/entities/gg-3d-entity.ts/#gg-3d-entity-overview","title":"gg-3d-entity overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dEntity (class)<ul> <li>runTransformBinding (method)</li> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>dispose (method)</li> <li>tick$ (property)</li> <li>tickOrder (property)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/entities/gg-3d-entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/gg-3d-entity.ts/#gg3dentity-class","title":"Gg3dEntity (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dEntity {\n  constructor(public readonly object3D: IGg3dObject | null, public readonly objectBody: IGg3dBody | null = null)\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-entity.ts/#runtransformbinding-method","title":"runTransformBinding (method)","text":"<p>Signature</p> <pre><code>protected runTransformBinding(objectBody: IGg3dBody, object3D: IGg3dObject): void\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-entity.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: Gg3dWorld)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-entity.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>onRemoved()\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-entity.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-entity.ts/#tick-property","title":"tick$ (property)","text":"<p>Signature</p> <pre><code>readonly tick$: any\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-entity.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: 750\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/","title":"core/3d/entities/gg-3d-map-graph.entity.ts","text":""},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#gg-3d-map-graphentity-overview","title":"gg-3d-map-graph.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dMapGraphEntity (class)<ul> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>loadChunk (method)</li> <li>disposeChunk (method)</li> <li>tick$ (property)</li> <li>tickOrder (property)</li> <li>loaderCursorEntity$ (property)</li> <li>loaded (property)</li> <li>_world (property)</li> <li>options (property)</li> </ul> </li> <li>Gg3dMapGraphEntityOptions (type alias)</li> <li>MapGraph (class)<ul> <li>fromMapArray (static method)</li> <li>fromMapSquareGrid (static method)</li> <li>getNearestDummy (method)</li> <li>nodes (method)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#gg3dmapgraphentity-class","title":"Gg3dMapGraphEntity (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dMapGraphEntity {\n  constructor(public readonly mapGraph: MapGraph, options: Partial&lt;Gg3dMapGraphEntityOptions&gt; = {})\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: Gg3dWorld)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>onRemoved()\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#loadchunk-method","title":"loadChunk (method)","text":"<p>Signature</p> <pre><code>protected async loadChunk(node: MapGraphNodeType): Promise&lt;Gg3dEntity[]&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#disposechunk-method","title":"disposeChunk (method)","text":"<p>Signature</p> <pre><code>protected disposeChunk(node: MapGraphNodeType)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#tick-property","title":"tick$ (property)","text":"<p>Signature</p> <pre><code>readonly tick$: any\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: 1500\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#loadercursorentity-property","title":"loaderCursorEntity$ (property)","text":"<p>Signature</p> <pre><code>readonly loaderCursorEntity$: any\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#loaded-property","title":"loaded (property)","text":"<p>Signature</p> <pre><code>readonly loaded: any\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#_world-property","title":"_world (property)","text":"<p>Signature</p> <pre><code>_world: Gg3dWorld&lt;IGg3dVisualScene, IGg3dPhysicsWorld&gt; | null\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#options-property","title":"options (property)","text":"<p>Signature</p> <pre><code>readonly options: Gg3dMapGraphEntityOptions\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#gg3dmapgraphentityoptions-type-alias","title":"Gg3dMapGraphEntityOptions (type alias)","text":"<p>Signature</p> <pre><code>export type Gg3dMapGraphEntityOptions = {\n  // depth in tree to load. 0 means load only the nearest node, 1 means nearest + all of it's neighbours etc.\n  loadDepth: number\n  // additional depth, means unload delay. Nodes with this depth won't load, but if already loaded, will not be destroyed\n  inertia: number\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#mapgraph-class","title":"MapGraph (class)","text":"<p>Signature</p> <pre><code>export declare class MapGraph\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#frommaparray-static-method","title":"fromMapArray (static method)","text":"<p>Signature</p> <pre><code>static fromMapArray(array: MapGraphNodeType[]): MapGraph\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#frommapsquaregrid-static-method","title":"fromMapSquareGrid (static method)","text":"<p>Signature</p> <pre><code>static fromMapSquareGrid(grid: MapGraphNodeType[][]): MapGraph\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#getnearestdummy-method","title":"getNearestDummy (method)","text":"<p>Signature</p> <pre><code>public getNearestDummy(thisNodes: Graph&lt;MapGraphNodeType&gt;[], cursor: Point3): Graph&lt;MapGraphNodeType&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#nodes-method","title":"nodes (method)","text":"<p>Signature</p> <pre><code>nodes(): MapGraph[]\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/","title":"core/3d/entities/gg-3d-raycast-vehicle.entity.ts","text":""},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#gg-3d-raycast-vehicleentity-overview","title":"gg-3d-raycast-vehicle.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>CarProperties (type alias)</li> <li>Gg3dRaycastVehicleEntity (class)<ul> <li>getSpeed (method)</li> <li>calculateRpmFromCarSpeed (method)</li> <li>getDisplaySpeed (method)</li> <li>getMaxStableSteerVal (method)</li> <li>setTailLightsOn (method)</li> <li>setSteeringValue (method)</li> <li>onSpawned (method)</li> <li>runTransformBinding (method)</li> <li>updateEngine (method)</li> <li>resetTo (method)</li> <li>setXAxisControlValue (method)</li> <li>setYAxisControlValue (method)</li> <li>frontWheelsIndices (property)</li> <li>tractionWheelIndices (property)</li> <li>tractionWheelRadius (property)</li> <li>_rpm$ (property)</li> <li>_acceleration$ (property)</li> <li>brake$ (property)</li> </ul> </li> <li>SuspensionOptions (type alias)</li> <li>WheelOptions (type alias)</li> </ul>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#carproperties-type-alias","title":"CarProperties (type alias)","text":"<p>Signature</p> <pre><code>export type CarProperties = {\n  typeOfDrive: 'RWD' | 'FWD' | '4WD' // FIXME 4WD car won't brake\n  wheelOptions: WheelOptions[]\n  mpsToRpmFactor?: number\n  engine: {\n    minRpm: number\n    maxRpm: number\n    torques: { rpm: number; torque: number }[]\n    maxRpmIncreasePerSecond: number\n    maxRpmDecreasePerSecond: number\n  }\n  transmission: {\n    isAuto: boolean\n    reverseGearRatio: number\n    gearRatios: number[]\n    drivelineEfficiency: number\n    finalDriveRatio: number // differential\n    upShifts: number[]\n  }\n  suspension: SuspensionOptions\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#gg3draycastvehicleentity-class","title":"Gg3dRaycastVehicleEntity (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dRaycastVehicleEntity {\n  constructor(\n    public readonly carProperties: CarProperties,\n    public readonly chassis3D: IGg3dObject | null,\n    public readonly chassisBody: IGg3dRaycastVehicle,\n    public readonly wheelObject: IGg3dObject | null = null,\n    public readonly wheelObjectDirection: AxisDirection3 = 'x'\n  )\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#getspeed-method","title":"getSpeed (method)","text":"<p>Signature</p> <pre><code>public getSpeed(): number\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#calculaterpmfromcarspeed-method","title":"calculateRpmFromCarSpeed (method)","text":"<p>Signature</p> <pre><code>public calculateRpmFromCarSpeed(): number\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#getdisplayspeed-method","title":"getDisplaySpeed (method)","text":"<p>Signature</p> <pre><code>public getDisplaySpeed(units: 'ms' | 'kmh' | 'mph' = 'ms'): number\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#getmaxstablesteerval-method","title":"getMaxStableSteerVal (method)","text":"<p>Signature</p> <pre><code>private getMaxStableSteerVal(): number\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#settaillightson-method","title":"setTailLightsOn (method)","text":"<p>Signature</p> <pre><code>protected setTailLightsOn(value: boolean)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#setsteeringvalue-method","title":"setSteeringValue (method)","text":"<p>Signature</p> <pre><code>protected setSteeringValue(value: number)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: Gg3dWorld)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#runtransformbinding-method","title":"runTransformBinding (method)","text":"<p>Signature</p> <pre><code>protected runTransformBinding(objectBody: IGg3dBody, object3D: IGg3dObject): void\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#updateengine-method","title":"updateEngine (method)","text":"<p>Signature</p> <pre><code>private updateEngine(delta: number)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#resetto-method","title":"resetTo (method)","text":"<p>Signature</p> <pre><code>resetTo(options: { position?: Point3; rotation?: Point4 } = {})\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#setxaxiscontrolvalue-method","title":"setXAxisControlValue (method)","text":"<p>Signature</p> <pre><code>public setXAxisControlValue(value: number)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#setyaxiscontrolvalue-method","title":"setYAxisControlValue (method)","text":"<p>Signature</p> <pre><code>public setYAxisControlValue(value: number)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#frontwheelsindices-property","title":"frontWheelsIndices (property)","text":"<p>Signature</p> <pre><code>readonly frontWheelsIndices: number[]\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#tractionwheelindices-property","title":"tractionWheelIndices (property)","text":"<p>Signature</p> <pre><code>readonly tractionWheelIndices: number[]\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#tractionwheelradius-property","title":"tractionWheelRadius (property)","text":"<p>Signature</p> <pre><code>readonly tractionWheelRadius: number\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#_rpm-property","title":"_rpm$ (property)","text":"<p>Signature</p> <pre><code>readonly _rpm$: any\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#_acceleration-property","title":"_acceleration$ (property)","text":"<p>Signature</p> <pre><code>_acceleration$: any\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#brake-property","title":"brake$ (property)","text":"<p>Signature</p> <pre><code>brake$: any\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#suspensionoptions-type-alias","title":"SuspensionOptions (type alias)","text":"<p>Signature</p> <pre><code>export type SuspensionOptions = {\n  stiffness: number\n  damping: number\n  compression: number\n  restLength: number\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#wheeloptions-type-alias","title":"WheelOptions (type alias)","text":"<p>Signature</p> <pre><code>export type WheelOptions = {\n  tyre_width: number\n  tyre_radius: number\n  wheelObject?: IGg3dObject\n  wheelObjectDirection?: AxisDirection3\n  isLeft: boolean\n  isFront: boolean\n  position: Point3\n  frictionSlip: number // friction with road\n  rollInfluence: number\n  maxTravel: number\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-trigger.entity.ts/","title":"core/3d/entities/gg-3d-trigger.entity.ts","text":""},{"location":"modules/core/3d/entities/gg-3d-trigger.entity.ts/#gg-3d-triggerentity-overview","title":"gg-3d-trigger.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dTriggerEntity (class)</li> </ul>"},{"location":"modules/core/3d/entities/gg-3d-trigger.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/gg-3d-trigger.entity.ts/#gg3dtriggerentity-class","title":"Gg3dTriggerEntity (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dTriggerEntity {\n  constructor(public readonly objectBody: IGg3dTrigger)\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-positionable-3d-entity.ts/","title":"core/3d/entities/gg-positionable-3d-entity.ts","text":""},{"location":"modules/core/3d/entities/gg-positionable-3d-entity.ts/#gg-positionable-3d-entity-overview","title":"gg-positionable-3d-entity overviewTable of contents","text":"<ul> <li>utils</li> <li>GgPositionable3dEntity (class)<ul> <li>getDefaultPosition (method)</li> <li>getDefaultRotation (method)</li> <li>getDefaultScale (method)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/entities/gg-positionable-3d-entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/gg-positionable-3d-entity.ts/#ggpositionable3dentity-class","title":"GgPositionable3dEntity (class)","text":"<p>Signature</p> <pre><code>export declare class GgPositionable3dEntity\n</code></pre>"},{"location":"modules/core/3d/entities/gg-positionable-3d-entity.ts/#getdefaultposition-method","title":"getDefaultPosition (method)","text":"<p>Signature</p> <pre><code>getDefaultPosition(): Point3\n</code></pre>"},{"location":"modules/core/3d/entities/gg-positionable-3d-entity.ts/#getdefaultrotation-method","title":"getDefaultRotation (method)","text":"<p>Signature</p> <pre><code>getDefaultRotation(): Point4\n</code></pre>"},{"location":"modules/core/3d/entities/gg-positionable-3d-entity.ts/#getdefaultscale-method","title":"getDefaultScale (method)","text":"<p>Signature</p> <pre><code>getDefaultScale(): Point3\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/entities/controllers/entity-motion.controller.ts</li> </ul>"},{"location":"modules/core/3d/entities/controllers/entity-motion.controller.ts/","title":"core/3d/entities/controllers/entity-motion.controller.ts","text":""},{"location":"modules/core/3d/entities/controllers/entity-motion.controller.ts/#entity-motioncontroller-overview","title":"entity-motion.controller overviewTable of contents","text":"<ul> <li>utils</li> <li>EntityMotionController (class)<ul> <li>transitFromStaticState (method)</li> <li>transitControlFunction (method)</li> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>dispose (method)</li> <li>tick$ (property)</li> <li>removed$ (property)</li> <li>tickOrder (property)</li> <li>lastValue (property)</li> </ul> </li> <li>MotionControlFuncReturn (type alias)</li> <li>MotionControlFunction (type alias)</li> </ul>"},{"location":"modules/core/3d/entities/controllers/entity-motion.controller.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/controllers/entity-motion.controller.ts/#entitymotioncontroller-class","title":"EntityMotionController (class)","text":"<p>Signature</p> <pre><code>export declare class EntityMotionController {\n  constructor(\n    public target: GgPositionable3dEntity,\n    protected _motionControlFunction: MotionControlFunction,\n    public customParametersHandleFunc: (target: GgPositionable3dEntity, params: any) =&gt; void = () =&gt; {}\n  )\n}\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/entity-motion.controller.ts/#transitfromstaticstate-method","title":"transitFromStaticState (method)","text":"<p>Signature</p> <pre><code>transitFromStaticState(\n    state: MotionControlFuncReturn,\n    newFunc: MotionControlFunction,\n    transitionDuration: number,\n    easing: (t: number) =&gt; number = x =&gt; x,\n    customParametersLerpFunc: (a: any, b: any, t: number) =&gt; any = (a, b, t) =&gt; b,\n  )\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/entity-motion.controller.ts/#transitcontrolfunction-method","title":"transitControlFunction (method)","text":"<p>Signature</p> <pre><code>transitControlFunction(\n    newFunc: MotionControlFunction,\n    transitionDuration: number,\n    easing: (t: number) =&gt; number = x =&gt; x,\n    customParametersLerpFunc: (a: any, b: any, t: number) =&gt; any = (a, b, t) =&gt; b,\n  )\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/entity-motion.controller.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: Gg3dWorld)\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/entity-motion.controller.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>onRemoved()\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/entity-motion.controller.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/entity-motion.controller.ts/#tick-property","title":"tick$ (property)","text":"<p>Signature</p> <pre><code>readonly tick$: any\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/entity-motion.controller.ts/#removed-property","title":"removed$ (property)","text":"<p>Signature</p> <pre><code>readonly removed$: any\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/entity-motion.controller.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: number\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/entity-motion.controller.ts/#lastvalue-property","title":"lastValue (property)","text":"<p>Signature</p> <pre><code>lastValue: MotionControlFuncReturn | undefined\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/entity-motion.controller.ts/#motioncontrolfuncreturn-type-alias","title":"MotionControlFuncReturn (type alias)","text":"<p>Signature</p> <pre><code>export type MotionControlFuncReturn = { position: Point3; rotation: Point4; customParameters: { [key: string]: any } }\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/entity-motion.controller.ts/#motioncontrolfunction-type-alias","title":"MotionControlFunction (type alias)","text":"<p>Signature</p> <pre><code>export type MotionControlFunction = (delta: number) =&gt; MotionControlFuncReturn\n</code></pre>"},{"location":"modules/core/3d/models/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/models/body-options.ts</li> <li>core/3d/models/gg-meta.ts</li> <li>core/3d/models/shapes.ts</li> </ul>"},{"location":"modules/core/3d/models/body-options.ts/","title":"core/3d/models/body-options.ts","text":""},{"location":"modules/core/3d/models/body-options.ts/#body-options-overview","title":"body-options overviewTable of contents","text":"<ul> <li>utils</li> <li>Body3DOptions (interface)</li> </ul>"},{"location":"modules/core/3d/models/body-options.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/models/body-options.ts/#body3doptions-interface","title":"Body3DOptions (interface)","text":"<p>Signature</p> <pre><code>export interface Body3DOptions extends BodyOptions {}\n</code></pre>"},{"location":"modules/core/3d/models/gg-meta.ts/","title":"core/3d/models/gg-meta.ts","text":""},{"location":"modules/core/3d/models/gg-meta.ts/#gg-meta-overview","title":"gg-meta overviewTable of contents","text":"<ul> <li>utils</li> <li>GgCurve (type alias)</li> <li>GgDummy (type alias)</li> <li>GgMeta (type alias)</li> <li>GgRigidBody (type alias)</li> </ul>"},{"location":"modules/core/3d/models/gg-meta.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/models/gg-meta.ts/#ggcurve-type-alias","title":"GgCurve (type alias)","text":"<p>Signature</p> <pre><code>export type GgCurve = { name: string; cyclic: boolean; points: Point3[] } &amp; any\n</code></pre>"},{"location":"modules/core/3d/models/gg-meta.ts/#ggdummy-type-alias","title":"GgDummy (type alias)","text":"<p>Signature</p> <pre><code>export type GgDummy = { name: string; position: Point3; rotation: Point4 } &amp; any\n</code></pre>"},{"location":"modules/core/3d/models/gg-meta.ts/#ggmeta-type-alias","title":"GgMeta (type alias)","text":"<p>Signature</p> <pre><code>export type GgMeta = {\n  dummies: GgDummy[]\n  curves: GgCurve[]\n  rigidBodies: GgRigidBody[]\n}\n</code></pre>"},{"location":"modules/core/3d/models/gg-meta.ts/#ggrigidbody-type-alias","title":"GgRigidBody (type alias)","text":"<p>Signature</p> <pre><code>export type GgRigidBody = { name: string; position: Point3; rotation: Point4 } &amp; BodyShape3DDescriptor\n</code></pre>"},{"location":"modules/core/3d/models/shapes.ts/","title":"core/3d/models/shapes.ts","text":""},{"location":"modules/core/3d/models/shapes.ts/#shapes-overview","title":"shapes overviewTable of contents","text":"<ul> <li>utils</li> <li>BodyShape3DDescriptor (type alias)</li> <li>Shape3DDescriptor (type alias)</li> </ul>"},{"location":"modules/core/3d/models/shapes.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/models/shapes.ts/#bodyshape3ddescriptor-type-alias","title":"BodyShape3DDescriptor (type alias)","text":"<p>Signature</p> <pre><code>export type BodyShape3DDescriptor = { shape: Shape3DDescriptor; body: Partial&lt;Body3DOptions&gt; }\n</code></pre>"},{"location":"modules/core/3d/models/shapes.ts/#shape3ddescriptor-type-alias","title":"Shape3DDescriptor (type alias)","text":"<p>Signature</p> <pre><code>export type Shape3DDescriptor =\n  | { shape: 'BOX'; dimensions: Point3 }\n  | { shape: 'CONE' | 'CYLINDER'; radius: number; height: number }\n  | { shape: 'CAPSULE'; radius: number; centersDistance: number }\n  | { shape: 'SPHERE'; radius: number }\n  | { shape: 'COMPOUND'; children: { position?: Point3; rotation?: Point4; shape: Shape3DDescriptor }[] }\n  | { shape: 'CONVEX_HULL'; vertices: Point3[] }\n  | { shape: 'MESH'; vertices: Point3[]; faces: [number, number, number][] }\n</code></pre>"},{"location":"modules/core/base/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/clock.ts</li> <li>core/base/controllers</li> <li>core/base/data-structures</li> <li>core/base/entities</li> <li>core/base/gg-static.ts</li> <li>core/base/gg-viewport-manager.ts</li> <li>core/base/gg-viewport.ts</li> <li>core/base/gg-world.ts</li> <li>core/base/interfaces</li> <li>core/base/math</li> <li>core/base/models</li> <li>core/base/ui</li> </ul>"},{"location":"modules/core/base/clock.ts/","title":"core/base/clock.ts","text":""},{"location":"modules/core/base/clock.ts/#clock-overview","title":"clock overviewTable of contents","text":"<ul> <li>utils</li> <li>Clock (class)<ul> <li>start (method)</li> <li>stop (method)</li> <li>pause (method)</li> <li>resume (method)</li> <li>startListeningTicks (method)</li> <li>stopListeningTicks (method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/clock.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/clock.ts/#clock-class","title":"Clock (class)","text":"<p>A class, providing ability to track time, fire ticks, provide time elapsed + tick delta with ability to suspend/resume it.</p> <p>Signature</p> <pre><code>export declare class Clock {\n  constructor(private readonly tickSource: Observable&lt;any&gt;, autoStart: boolean = false)\n}\n</code></pre>"},{"location":"modules/core/base/clock.ts/#start-method","title":"start (method)","text":"<p>Signature</p> <pre><code>start()\n</code></pre>"},{"location":"modules/core/base/clock.ts/#stop-method","title":"stop (method)","text":"<p>Signature</p> <pre><code>stop()\n</code></pre>"},{"location":"modules/core/base/clock.ts/#pause-method","title":"pause (method)","text":"<p>Signature</p> <pre><code>pause()\n</code></pre>"},{"location":"modules/core/base/clock.ts/#resume-method","title":"resume (method)","text":"<p>Signature</p> <pre><code>resume()\n</code></pre>"},{"location":"modules/core/base/clock.ts/#startlisteningticks-method","title":"startListeningTicks (method)","text":"<p>Signature</p> <pre><code>private startListeningTicks()\n</code></pre>"},{"location":"modules/core/base/clock.ts/#stoplisteningticks-method","title":"stopListeningTicks (method)","text":"<p>Signature</p> <pre><code>private stopListeningTicks()\n</code></pre>"},{"location":"modules/core/base/gg-static.ts/","title":"core/base/gg-static.ts","text":""},{"location":"modules/core/base/gg-static.ts/#gg-static-overview","title":"gg-static overviewTable of contents","text":"<ul> <li>utils</li> <li>GgStatic (class)<ul> <li>console (method)</li> <li>worlds (property)</li> <li>selectedWorld (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/gg-static.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/gg-static.ts/#ggstatic-class","title":"GgStatic (class)","text":"<p>Signature</p> <pre><code>export declare class GgStatic {\n  private constructor()\n}\n</code></pre>"},{"location":"modules/core/base/gg-static.ts/#console-method","title":"console (method)","text":"<p>Signature</p> <pre><code>async console(input: string): Promise&lt;string&gt;\n</code></pre>"},{"location":"modules/core/base/gg-static.ts/#worlds-property","title":"worlds (property)","text":"<p>Signature</p> <pre><code>readonly worlds: GgWorld&lt;any, any, GgVisualScene&lt;any, any&gt;, GgPhysicsWorld&lt;any, any&gt;&gt;[]\n</code></pre>"},{"location":"modules/core/base/gg-static.ts/#selectedworld-property","title":"selectedWorld (property)","text":"<p>Signature</p> <pre><code>selectedWorld: GgWorld&lt;any, any, GgVisualScene&lt;any, any&gt;, GgPhysicsWorld&lt;any, any&gt;&gt; | null\n</code></pre>"},{"location":"modules/core/base/gg-viewport-manager.ts/","title":"core/base/gg-viewport-manager.ts","text":""},{"location":"modules/core/base/gg-viewport-manager.ts/#gg-viewport-manager-overview","title":"gg-viewport-manager overviewTable of contents","text":"<ul> <li>utils</li> <li>GgViewportManager (class)<ul> <li>getStageAsync (method)</li> <li>createCanvas (method)</li> <li>registerCanvas (method)</li> <li>assignRendererToCanvas (method)</li> <li>destroyed (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/gg-viewport-manager.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/gg-viewport-manager.ts/#ggviewportmanager-class","title":"GgViewportManager (class)","text":"<p>Signature</p> <pre><code>export declare class GgViewportManager {\n  private constructor()\n}\n</code></pre>"},{"location":"modules/core/base/gg-viewport-manager.ts/#getstageasync-method","title":"getStageAsync (method)","text":"<p>Signature</p> <pre><code>private getStageAsync(): Promise&lt;HTMLDivElement&gt;\n</code></pre>"},{"location":"modules/core/base/gg-viewport-manager.ts/#createcanvas-method","title":"createCanvas (method)","text":"<p>Signature</p> <pre><code>public async createCanvas(zIndex: number): Promise&lt;HTMLCanvasElement&gt;\n</code></pre>"},{"location":"modules/core/base/gg-viewport-manager.ts/#registercanvas-method","title":"registerCanvas (method)","text":"<p>Signature</p> <pre><code>public async registerCanvas(canvas: HTMLCanvasElement, zIndex: number): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/base/gg-viewport-manager.ts/#assignrenderertocanvas-method","title":"assignRendererToCanvas (method)","text":"<p>Signature</p> <pre><code>public async assignRendererToCanvas(renderer: BaseGgRenderer, canvas: HTMLCanvasElement): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/base/gg-viewport-manager.ts/#destroyed-property","title":"destroyed (property)","text":"<p>Signature</p> <pre><code>destroyed: any\n</code></pre>"},{"location":"modules/core/base/gg-viewport.ts/","title":"core/base/gg-viewport.ts","text":""},{"location":"modules/core/base/gg-viewport.ts/#gg-viewport-overview","title":"gg-viewport overviewTable of contents","text":"<ul> <li>utils</li> <li>GgViewport (class)<ul> <li>activate (method)</li> <li>deactivate (method)</li> <li>getCurrentViewportSize (method)</li> <li>subscribeOnViewportSize (method)</li> <li>isMouseEnabled (method)</li> <li>isTouchDevice (method)</li> <li>subscribeOnMouseMove (method)</li> <li>subscribeOnIsMouseDown (method)</li> <li>subscribeOnMouseClick (method)</li> <li>destroy$ (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/gg-viewport.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/gg-viewport.ts/#ggviewport-class","title":"GgViewport (class)","text":"<p>Signature</p> <pre><code>export declare class GgViewport {\n  private constructor()\n}\n</code></pre>"},{"location":"modules/core/base/gg-viewport.ts/#activate-method","title":"activate (method)","text":"<p>Signature</p> <pre><code>public activate()\n</code></pre>"},{"location":"modules/core/base/gg-viewport.ts/#deactivate-method","title":"deactivate (method)","text":"<p>Signature</p> <pre><code>public deactivate(): void\n</code></pre>"},{"location":"modules/core/base/gg-viewport.ts/#getcurrentviewportsize-method","title":"getCurrentViewportSize (method)","text":"<p>Signature</p> <pre><code>getCurrentViewportSize(): Point2\n</code></pre>"},{"location":"modules/core/base/gg-viewport.ts/#subscribeonviewportsize-method","title":"subscribeOnViewportSize (method)","text":"<p>Signature</p> <pre><code>subscribeOnViewportSize(): Observable&lt;Point2&gt;\n</code></pre>"},{"location":"modules/core/base/gg-viewport.ts/#ismouseenabled-method","title":"isMouseEnabled (method)","text":"<p>Signature</p> <pre><code>isMouseEnabled(): boolean\n</code></pre>"},{"location":"modules/core/base/gg-viewport.ts/#istouchdevice-method","title":"isTouchDevice (method)","text":"<p>Signature</p> <pre><code>isTouchDevice(): boolean\n</code></pre>"},{"location":"modules/core/base/gg-viewport.ts/#subscribeonmousemove-method","title":"subscribeOnMouseMove (method)","text":"<p>Signature</p> <pre><code>subscribeOnMouseMove(): Observable&lt;Point2&gt;\n</code></pre>"},{"location":"modules/core/base/gg-viewport.ts/#subscribeonismousedown-method","title":"subscribeOnIsMouseDown (method)","text":"<p>Signature</p> <pre><code>subscribeOnIsMouseDown(): Observable&lt;boolean&gt;\n</code></pre>"},{"location":"modules/core/base/gg-viewport.ts/#subscribeonmouseclick-method","title":"subscribeOnMouseClick (method)","text":"<p>Signature</p> <pre><code>subscribeOnMouseClick(): Observable&lt;Point2&gt;\n</code></pre>"},{"location":"modules/core/base/gg-viewport.ts/#destroy-property","title":"destroy$ (property)","text":"<p>Signature</p> <pre><code>destroy$: any\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/","title":"core/base/gg-world.ts","text":""},{"location":"modules/core/base/gg-world.ts/#gg-world-overview","title":"gg-world overviewTable of contents","text":"<ul> <li>utils</li> <li>GgWorld (class)<ul> <li>init (method)</li> <li>start (method)</li> <li>pauseWorld (method)</li> <li>resumeWorld (method)</li> <li>dispose (method)</li> <li>addEntity (method)</li> <li>removeEntity (method)</li> <li>registerConsoleCommand (method)</li> <li>runConsoleCommand (method)</li> <li>triggerPhysicsDebugView (method)</li> <li>keyboardController (property)</li> <li>children (property)</li> <li>tickListeners (property)</li> <li>commands (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/gg-world.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/gg-world.ts/#ggworld-class","title":"GgWorld (class)","text":"<p>Signature</p> <pre><code>export declare class GgWorld&lt;D, R, V, P&gt; {\n  constructor(\n    public readonly visualScene: V,\n    public readonly physicsWorld: P,\n    protected readonly consoleEnabled: boolean = false\n  )\n}\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#init-method","title":"init (method)","text":"<p>Signature</p> <pre><code>public async init()\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#start-method","title":"start (method)","text":"<p>Signature</p> <pre><code>public start()\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#pauseworld-method","title":"pauseWorld (method)","text":"<p>Signature</p> <pre><code>public pauseWorld()\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#resumeworld-method","title":"resumeWorld (method)","text":"<p>Signature</p> <pre><code>public resumeWorld()\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>public dispose(): void\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#addentity-method","title":"addEntity (method)","text":"<p>Signature</p> <pre><code>public addEntity(entity: GgEntity): void\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#removeentity-method","title":"removeEntity (method)","text":"<p>Signature</p> <pre><code>public removeEntity(entity: GgEntity, dispose = true): void\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#registerconsolecommand-method","title":"registerConsoleCommand (method)","text":"<p>Signature</p> <pre><code>public registerConsoleCommand(command: string, handler: (...args: string[]) =&gt; Promise&lt;string&gt;, doc?: string): void\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#runconsolecommand-method","title":"runConsoleCommand (method)","text":"<p>Signature</p> <pre><code>public async runConsoleCommand(command: string, args: string[]): Promise&lt;string&gt;\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#triggerphysicsdebugview-method","title":"triggerPhysicsDebugView (method)","text":"<p>Signature</p> <pre><code>public triggerPhysicsDebugView()\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#keyboardcontroller-property","title":"keyboardController (property)","text":"<p>Signature</p> <pre><code>readonly keyboardController: KeyboardController\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#children-property","title":"children (property)","text":"<p>Signature</p> <pre><code>readonly children: GgEntity[]\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#ticklisteners-property","title":"tickListeners (property)","text":"<p>Signature</p> <pre><code>readonly tickListeners: ITickListener[]\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#commands-property","title":"commands (property)","text":"<p>Signature</p> <pre><code>commands: { [key: string]: { handler: (...args: string[]) =&gt; Promise&lt;string&gt;; doc?: string | undefined; }; }\n</code></pre>"},{"location":"modules/core/base/controllers/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/controllers/common.ts</li> <li>core/base/controllers/i-controller.ts</li> <li>core/base/controllers/keyboard.controller.ts</li> <li>core/base/controllers/mouse.controller.ts</li> </ul>"},{"location":"modules/core/base/controllers/common.ts/","title":"core/base/controllers/common.ts","text":""},{"location":"modules/core/base/controllers/common.ts/#common-overview","title":"common overviewTable of contents","text":"<ul> <li>utils</li> <li>DirectionKeymap (type alias)</li> <li>DirectionOutput (type alias)</li> <li>bindDirectionKeys</li> </ul>"},{"location":"modules/core/base/controllers/common.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/controllers/common.ts/#directionkeymap-type-alias","title":"DirectionKeymap (type alias)","text":"<p>Signature</p> <pre><code>export type DirectionKeymap = 'arrows' | 'wasd' | 'wasd+arrows'\n</code></pre>"},{"location":"modules/core/base/controllers/common.ts/#directionoutput-type-alias","title":"DirectionOutput (type alias)","text":"<p>Signature</p> <pre><code>export type DirectionOutput = { upDown?: boolean; leftRight?: boolean }\n</code></pre>"},{"location":"modules/core/base/controllers/common.ts/#binddirectionkeys","title":"bindDirectionKeys","text":"<p>Signature</p> <pre><code>export declare const bindDirectionKeys: (keyboard: KeyboardController, keymap: DirectionKeymap) =&gt; any\n</code></pre>"},{"location":"modules/core/base/controllers/i-controller.ts/","title":"core/base/controllers/i-controller.ts","text":""},{"location":"modules/core/base/controllers/i-controller.ts/#i-controller-overview","title":"i-controller overviewTable of contents","text":"<ul> <li>utils</li> <li>IController (interface)</li> </ul>"},{"location":"modules/core/base/controllers/i-controller.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/controllers/i-controller.ts/#icontroller-interface","title":"IController (interface)","text":"<p>Signature</p> <pre><code>export interface IController {\n  start(): Promise&lt;void&gt;\n\n  stop(): Promise&lt;void&gt;\n}\n</code></pre>"},{"location":"modules/core/base/controllers/keyboard.controller.ts/","title":"core/base/controllers/keyboard.controller.ts","text":""},{"location":"modules/core/base/controllers/keyboard.controller.ts/#keyboardcontroller-overview","title":"keyboard.controller overviewTable of contents","text":"<ul> <li>utils</li> <li>KeyboardController (class)<ul> <li>bind (method)</li> <li>bindMany (method)</li> <li>emulateKeyDown (method)</li> <li>emulateKeyUp (method)</li> <li>emulateKeyPress (method)</li> <li>start (method)</li> <li>handleKeys (method)</li> <li>stop (method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/controllers/keyboard.controller.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/controllers/keyboard.controller.ts/#keyboardcontroller-class","title":"KeyboardController (class)","text":"<p>Signature</p> <pre><code>export declare class KeyboardController {\n  constructor()\n}\n</code></pre>"},{"location":"modules/core/base/controllers/keyboard.controller.ts/#bind-method","title":"bind (method)","text":"<p>Signature</p> <pre><code>bind(code: string): Observable&lt;boolean&gt;\n</code></pre>"},{"location":"modules/core/base/controllers/keyboard.controller.ts/#bindmany-method","title":"bindMany (method)","text":"<p>Signature</p> <pre><code>bindMany(...codes: string[]): Observable&lt;boolean&gt;\n</code></pre>"},{"location":"modules/core/base/controllers/keyboard.controller.ts/#emulatekeydown-method","title":"emulateKeyDown (method)","text":"<p>Signature</p> <pre><code>emulateKeyDown(code: string): void\n</code></pre>"},{"location":"modules/core/base/controllers/keyboard.controller.ts/#emulatekeyup-method","title":"emulateKeyUp (method)","text":"<p>Signature</p> <pre><code>emulateKeyUp(code: string): void\n</code></pre>"},{"location":"modules/core/base/controllers/keyboard.controller.ts/#emulatekeypress-method","title":"emulateKeyPress (method)","text":"<p>Signature</p> <pre><code>emulateKeyPress(code: string): void\n</code></pre>"},{"location":"modules/core/base/controllers/keyboard.controller.ts/#start-method","title":"start (method)","text":"<p>Signature</p> <pre><code>async start()\n</code></pre>"},{"location":"modules/core/base/controllers/keyboard.controller.ts/#handlekeys-method","title":"handleKeys (method)","text":"<p>Signature</p> <pre><code>private handleKeys(e: KeyboardEvent)\n</code></pre>"},{"location":"modules/core/base/controllers/keyboard.controller.ts/#stop-method","title":"stop (method)","text":"<p>Signature</p> <pre><code>async stop()\n</code></pre>"},{"location":"modules/core/base/controllers/mouse.controller.ts/","title":"core/base/controllers/mouse.controller.ts","text":""},{"location":"modules/core/base/controllers/mouse.controller.ts/#mousecontroller-overview","title":"mouse.controller overviewTable of contents","text":"<ul> <li>utils</li> <li>MouseController (class)<ul> <li>start (method)</li> <li>canvasClickListener (method)</li> <li>stop (method)</li> </ul> </li> <li>MouseControllerOptions (type alias)</li> <li>MouseControllerPointLockOptions (type alias)</li> </ul>"},{"location":"modules/core/base/controllers/mouse.controller.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/controllers/mouse.controller.ts/#mousecontroller-class","title":"MouseController (class)","text":"<p>Signature</p> <pre><code>export declare class MouseController {\n  constructor(private readonly options: MouseControllerOptions = {})\n}\n</code></pre>"},{"location":"modules/core/base/controllers/mouse.controller.ts/#start-method","title":"start (method)","text":"<p>Signature</p> <pre><code>async start()\n</code></pre>"},{"location":"modules/core/base/controllers/mouse.controller.ts/#canvasclicklistener-method","title":"canvasClickListener (method)","text":"<p>Signature</p> <pre><code>private canvasClickListener(): void\n</code></pre>"},{"location":"modules/core/base/controllers/mouse.controller.ts/#stop-method","title":"stop (method)","text":"<p>Signature</p> <pre><code>async stop(unlockPointer: boolean = true)\n</code></pre>"},{"location":"modules/core/base/controllers/mouse.controller.ts/#mousecontrolleroptions-type-alias","title":"MouseControllerOptions (type alias)","text":"<p>Signature</p> <pre><code>export type MouseControllerOptions = {\n  pointerLock?: MouseControllerPointLockOptions\n}\n</code></pre>"},{"location":"modules/core/base/controllers/mouse.controller.ts/#mousecontrollerpointlockoptions-type-alias","title":"MouseControllerPointLockOptions (type alias)","text":"<p>Signature</p> <pre><code>export type MouseControllerPointLockOptions = { ignoreMovementWhenNotLocked: boolean; canvas: HTMLCanvasElement }\n</code></pre>"},{"location":"modules/core/base/data-structures/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/data-structures/graph.ts</li> </ul>"},{"location":"modules/core/base/data-structures/graph.ts/","title":"core/base/data-structures/graph.ts","text":""},{"location":"modules/core/base/data-structures/graph.ts/#graph-overview","title":"graph overviewTable of contents","text":"<ul> <li>utils</li> <li>Graph (class)<ul> <li>fromArray (static method)</li> <li>fromSquareGrid (static method)</li> <li>addAdjacent (method)</li> <li>removeAdjacent (method)</li> <li>addEdge (method)</li> <li>removeEdge (method)</li> <li>walkRead (method)</li> <li>walkReadPreserveDepth (method)</li> <li>nodes (method)</li> <li>data (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/data-structures/graph.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/data-structures/graph.ts/#graph-class","title":"Graph (class)","text":"<p>Signature</p> <pre><code>export declare class Graph&lt;T&gt; {\n  constructor(data: T)\n}\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#fromarray-static-method","title":"fromArray (static method)","text":"<p>Signature</p> <pre><code>static fromArray&lt;T&gt;(array: T[]): Graph&lt;T&gt;\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#fromsquaregrid-static-method","title":"fromSquareGrid (static method)","text":"<p>Signature</p> <pre><code>static fromSquareGrid&lt;T&gt;(grid: T[][]): Graph&lt;T&gt;\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#addadjacent-method","title":"addAdjacent (method)","text":"<p>Signature</p> <pre><code>addAdjacent(node: Graph&lt;T&gt;): boolean\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#removeadjacent-method","title":"removeAdjacent (method)","text":"<p>Signature</p> <pre><code>removeAdjacent(node: Graph&lt;T&gt;): boolean\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#addedge-method","title":"addEdge (method)","text":"<p>Create an edge between two nodes</p> <p>Signature</p> <pre><code>addEdge(source: Graph&lt;T&gt;, destination: Graph&lt;T&gt;): boolean\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#removeedge-method","title":"removeEdge (method)","text":"<p>Remove an edge between two nodes</p> <p>Signature</p> <pre><code>removeEdge(source: Graph&lt;T&gt;, destination: Graph&lt;T&gt;): boolean\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#walkread-method","title":"walkRead (method)","text":"<p>Signature</p> <pre><code>walkRead(depth: number): Set&lt;Graph&lt;T&gt;&gt;\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#walkreadpreservedepth-method","title":"walkReadPreserveDepth (method)","text":"<p>Signature</p> <pre><code>walkReadPreserveDepth(depth: number): Set&lt;Graph&lt;T&gt;&gt;[]\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#nodes-method","title":"nodes (method)","text":"<p>Signature</p> <pre><code>nodes(): Graph&lt;T&gt;[]\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#data-property","title":"data (property)","text":"<p>Signature</p> <pre><code>data: T\n</code></pre>"},{"location":"modules/core/base/entities/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/entities/base-gg-renderer.ts</li> <li>core/base/entities/gg-entity.ts</li> <li>core/base/entities/gg-positionable-entity.ts</li> <li>core/base/entities/inline-controller.ts</li> <li>core/base/entities/interfaces</li> </ul>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/","title":"core/base/entities/base-gg-renderer.ts","text":""},{"location":"modules/core/base/entities/base-gg-renderer.ts/#base-gg-renderer-overview","title":"base-gg-renderer overviewTable of contents","text":"<ul> <li>utils</li> <li>BaseGgRenderer (class)<ul> <li>activate (method)</li> <li>deactivate (method)</li> <li>init (method)</li> <li>render (method)</li> <li>resize (method)</li> <li>dispose (method)</li> <li>_permanentRenderMethods (property)</li> <li>_singularRenderMethods (property)</li> <li>tick$ (property)</li> <li>tickOrder (property)</li> <li>tickListener (property)</li> <li>rendererOptions (property)</li> </ul> </li> <li>RendererOptions (type alias)</li> </ul>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/entities/base-gg-renderer.ts/#baseggrenderer-class","title":"BaseGgRenderer (class)","text":"<p>Signature</p> <pre><code>export declare class BaseGgRenderer {\n  protected constructor(canvas?: HTMLCanvasElement, options: Partial&lt;RendererOptions&gt; = {})\n}\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#activate-method","title":"activate (method)","text":"<p>Signature</p> <pre><code>public activate(): void\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#deactivate-method","title":"deactivate (method)","text":"<p>Signature</p> <pre><code>public deactivate(): void\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#init-method","title":"init (method)","text":"<p>Signature</p> <pre><code>init(): void\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#render-method","title":"render (method)","text":"<p>Signature</p> <pre><code>abstract render(): void;\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#resize-method","title":"resize (method)","text":"<p>Signature</p> <pre><code>abstract resize(newSize: Point2): void;\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>abstract dispose(): void;\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#_permanentrendermethods-property","title":"_permanentRenderMethods (property)","text":"<p>Signature</p> <pre><code>_permanentRenderMethods: any\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#_singularrendermethods-property","title":"_singularRenderMethods (property)","text":"<p>Signature</p> <pre><code>_singularRenderMethods: any\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#tick-property","title":"tick$ (property)","text":"<p>Signature</p> <pre><code>readonly tick$: any\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: 1000\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#ticklistener-property","title":"tickListener (property)","text":"<p>Signature</p> <pre><code>tickListener: any\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#rendereroptions-property","title":"rendererOptions (property)","text":"<p>Signature</p> <pre><code>readonly rendererOptions: RendererOptions\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#rendereroptions-type-alias","title":"RendererOptions (type alias)","text":"<p>Signature</p> <pre><code>export type RendererOptions = {\n  transparent: boolean\n  background: number\n  forceRendererSize?: Point2\n  forceResolution?: number\n  antialias: boolean\n}\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/","title":"core/base/entities/gg-entity.ts","text":""},{"location":"modules/core/base/entities/gg-entity.ts/#gg-entity-overview","title":"gg-entity overviewTable of contents","text":"<ul> <li>utils</li> <li>GgEntity (class)<ul> <li>addChildren (method)</li> <li>removeChildren (method)</li> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>dispose (method)</li> <li>_world (property)</li> <li>_name (property)</li> <li>_children (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/entities/gg-entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/entities/gg-entity.ts/#ggentity-class","title":"GgEntity (class)","text":"<p>Signature</p> <pre><code>export declare class GgEntity\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#addchildren-method","title":"addChildren (method)","text":"<p>Signature</p> <pre><code>public addChildren(...entities: GgEntity[])\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#removechildren-method","title":"removeChildren (method)","text":"<p>Signature</p> <pre><code>public removeChildren(entities: GgEntity[], dispose: boolean = false)\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>public onSpawned(world: GgWorld&lt;any, any&gt;)\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>public onRemoved()\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>public dispose(): void\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#_world-property","title":"_world (property)","text":"<p>Signature</p> <pre><code>_world: GgWorld&lt;any, any, GgVisualScene&lt;any, any&gt;, GgPhysicsWorld&lt;any, any&gt;&gt; | null\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#_name-property","title":"_name (property)","text":"<p>Signature</p> <pre><code>_name: string\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#_children-property","title":"_children (property)","text":"<p>Signature</p> <pre><code>_children: GgEntity[]\n</code></pre>"},{"location":"modules/core/base/entities/gg-positionable-entity.ts/","title":"core/base/entities/gg-positionable-entity.ts","text":""},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#gg-positionable-entity-overview","title":"gg-positionable-entity overviewTable of contents","text":"<ul> <li>utils</li> <li>GgPositionableEntity (class)<ul> <li>getDefaultPosition (method)</li> <li>getDefaultRotation (method)</li> <li>getDefaultScale (method)</li> <li>onSpawned (method)</li> <li>_position$ (property)</li> <li>_rotation$ (property)</li> <li>_scale$ (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#ggpositionableentity-class","title":"GgPositionableEntity (class)","text":"<p>Signature</p> <pre><code>export declare class GgPositionableEntity&lt;D, R&gt; {\n  protected constructor()\n}\n</code></pre>"},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#getdefaultposition-method","title":"getDefaultPosition (method)","text":"<p>Signature</p> <pre><code>abstract getDefaultPosition(): D;\n</code></pre>"},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#getdefaultrotation-method","title":"getDefaultRotation (method)","text":"<p>Signature</p> <pre><code>abstract getDefaultRotation(): R;\n</code></pre>"},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#getdefaultscale-method","title":"getDefaultScale (method)","text":"<p>Signature</p> <pre><code>abstract getDefaultScale(): D;\n</code></pre>"},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: GgWorld&lt;D, R&gt;)\n</code></pre>"},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#_position-property","title":"_position$ (property)","text":"<p>Signature</p> <pre><code>readonly _position$: any\n</code></pre>"},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#_rotation-property","title":"_rotation$ (property)","text":"<p>Signature</p> <pre><code>readonly _rotation$: any\n</code></pre>"},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#_scale-property","title":"_scale$ (property)","text":"<p>Signature</p> <pre><code>readonly _scale$: any\n</code></pre>"},{"location":"modules/core/base/entities/inline-controller.ts/","title":"core/base/entities/inline-controller.ts","text":""},{"location":"modules/core/base/entities/inline-controller.ts/#inline-controller-overview","title":"inline-controller overviewTable of contents","text":"<ul> <li>utils</li> <li>createInlineTickController</li> </ul>"},{"location":"modules/core/base/entities/inline-controller.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/entities/inline-controller.ts/#createinlinetickcontroller","title":"createInlineTickController","text":"<p>Signature</p> <pre><code>export declare function createInlineTickController(\n  world: GgWorld&lt;any, any&gt;,\n  tickOrder: number = 750\n): Observable&lt;[number, number]&gt;\n</code></pre>"},{"location":"modules/core/base/entities/interfaces/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/entities/interfaces/i-tick-listener.ts</li> </ul>"},{"location":"modules/core/base/entities/interfaces/i-tick-listener.ts/","title":"core/base/entities/interfaces/i-tick-listener.ts","text":""},{"location":"modules/core/base/entities/interfaces/i-tick-listener.ts/#i-tick-listener-overview","title":"i-tick-listener overviewTable of contents","text":"<ul> <li>utils</li> <li>ITickListener (interface)</li> <li>isITickListener</li> </ul>"},{"location":"modules/core/base/entities/interfaces/i-tick-listener.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/entities/interfaces/i-tick-listener.ts/#iticklistener-interface","title":"ITickListener (interface)","text":"<p>Signature</p> <pre><code>export interface ITickListener {\n  // will receive [elapsed time, delta] of each world clock tick\n  tick$: Subject&lt;[number, number]&gt;\n  // the priority of ticker: the less value, the earlier tick will be run.\n  // 500 is a physics tick order\n  // 750 is a default objects binding tick order\n  // 1000 is a rendering tick order\n  // e.g. 499 will run before physics, 1001 will run after rendering\n  readonly tickOrder: number\n}\n</code></pre>"},{"location":"modules/core/base/entities/interfaces/i-tick-listener.ts/#isiticklistener","title":"isITickListener","text":"<p>Signature</p> <pre><code>export declare const isITickListener: (entity: GgEntity) =&gt; boolean\n</code></pre>"},{"location":"modules/core/base/interfaces/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/interfaces/gg-body.ts</li> <li>core/base/interfaces/gg-debug-physics-drawer.ts</li> <li>core/base/interfaces/gg-object.ts</li> <li>core/base/interfaces/gg-physics-world.ts</li> <li>core/base/interfaces/gg-trigger.ts</li> <li>core/base/interfaces/gg-visual-scene.ts</li> </ul>"},{"location":"modules/core/base/interfaces/gg-body.ts/","title":"core/base/interfaces/gg-body.ts","text":""},{"location":"modules/core/base/interfaces/gg-body.ts/#gg-body-overview","title":"gg-body overviewTable of contents","text":"<ul> <li>utils</li> <li>GgBody (interface)</li> </ul>"},{"location":"modules/core/base/interfaces/gg-body.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/interfaces/gg-body.ts/#ggbody-interface","title":"GgBody (interface)","text":"<p>Signature</p> <pre><code>export interface GgBody&lt;D, R&gt; {\n  position: D\n  rotation: R\n  scale: D\n\n  name: string\n\n  entity: GgEntity | null\n\n  clone(): GgBody&lt;D, R&gt;\n\n  addToWorld(world: GgPhysicsWorld&lt;D, R&gt;): void\n\n  removeFromWorld(world: GgPhysicsWorld&lt;D, R&gt;): void\n\n  dispose(): void\n\n  /** clear velocities etc. */\n  resetMotion(): void\n}\n</code></pre>"},{"location":"modules/core/base/interfaces/gg-debug-physics-drawer.ts/","title":"core/base/interfaces/gg-debug-physics-drawer.ts","text":""},{"location":"modules/core/base/interfaces/gg-debug-physics-drawer.ts/#gg-debug-physics-drawer-overview","title":"gg-debug-physics-drawer overviewTable of contents","text":"<ul> <li>utils</li> <li>GgDebugPhysicsDrawer (interface)</li> </ul>"},{"location":"modules/core/base/interfaces/gg-debug-physics-drawer.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/interfaces/gg-debug-physics-drawer.ts/#ggdebugphysicsdrawer-interface","title":"GgDebugPhysicsDrawer (interface)","text":"<p>Signature</p> <pre><code>export interface GgDebugPhysicsDrawer&lt;D, R&gt; extends GgObject&lt;D, R&gt; {\n  drawContactPoint(point: D, normal: D, color?: Point3): void\n\n  drawLine(from: D, to: D, color?: Point3): void\n\n  update(): void\n}\n</code></pre>"},{"location":"modules/core/base/interfaces/gg-object.ts/","title":"core/base/interfaces/gg-object.ts","text":""},{"location":"modules/core/base/interfaces/gg-object.ts/#gg-object-overview","title":"gg-object overviewTable of contents","text":"<ul> <li>utils</li> <li>GgObject (interface)</li> </ul>"},{"location":"modules/core/base/interfaces/gg-object.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/interfaces/gg-object.ts/#ggobject-interface","title":"GgObject (interface)","text":"<p>Signature</p> <pre><code>export interface GgObject&lt;D, R&gt; {\n  position: D\n  rotation: R\n  scale: D\n\n  visible: boolean\n\n  name: string\n\n  isEmpty(): boolean\n\n  popChild(name: string): GgObject&lt;D, R&gt; | null\n\n  getBoundings(): GgBox&lt;D&gt;\n\n  clone(): GgObject&lt;D, R&gt;\n\n  addToWorld(world: GgVisualScene&lt;D, R&gt;): void\n\n  removeFromWorld(world: GgVisualScene&lt;D, R&gt;): void\n\n  dispose(): void\n}\n</code></pre>"},{"location":"modules/core/base/interfaces/gg-physics-world.ts/","title":"core/base/interfaces/gg-physics-world.ts","text":""},{"location":"modules/core/base/interfaces/gg-physics-world.ts/#gg-physics-world-overview","title":"gg-physics-world overviewTable of contents","text":"<ul> <li>utils</li> <li>GgPhysicsWorld (interface)</li> </ul>"},{"location":"modules/core/base/interfaces/gg-physics-world.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/interfaces/gg-physics-world.ts/#ggphysicsworld-interface","title":"GgPhysicsWorld (interface)","text":"<p>Signature</p> <pre><code>export interface GgPhysicsWorld&lt;D, R&gt; {\n  readonly factory: any; // type defined in sub-interfaces\n  gravity: D;\n  timeScale: number;\n</code></pre>"},{"location":"modules/core/base/interfaces/gg-trigger.ts/","title":"core/base/interfaces/gg-trigger.ts","text":""},{"location":"modules/core/base/interfaces/gg-trigger.ts/#gg-trigger-overview","title":"gg-trigger overviewTable of contents","text":"<ul> <li>utils</li> <li>GgTrigger (interface)</li> </ul>"},{"location":"modules/core/base/interfaces/gg-trigger.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/interfaces/gg-trigger.ts/#ggtrigger-interface","title":"GgTrigger (interface)","text":"<p>Signature</p> <pre><code>export interface GgTrigger&lt;D, R&gt; extends GgBody&lt;D, R&gt; {\n</code></pre>"},{"location":"modules/core/base/interfaces/gg-visual-scene.ts/","title":"core/base/interfaces/gg-visual-scene.ts","text":""},{"location":"modules/core/base/interfaces/gg-visual-scene.ts/#gg-visual-scene-overview","title":"gg-visual-scene overviewTable of contents","text":"<ul> <li>utils</li> <li>GgVisualScene (interface)</li> </ul>"},{"location":"modules/core/base/interfaces/gg-visual-scene.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/interfaces/gg-visual-scene.ts/#ggvisualscene-interface","title":"GgVisualScene (interface)","text":"<p>Signature</p> <pre><code>export interface GgVisualScene&lt;D, R&gt; {\n  readonly factory: any // type defined in sub-interfaces\n\n  readonly debugPhysicsDrawerClass?: { new (): GgDebugPhysicsDrawer&lt;D, R&gt; }\n\n  init(): Promise&lt;void&gt;\n\n  dispose(): void\n}\n</code></pre>"},{"location":"modules/core/base/math/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/math/box.ts</li> <li>core/base/math/matrix4.ts</li> <li>core/base/math/numbers.ts</li> <li>core/base/math/point2.ts</li> <li>core/base/math/point3.ts</li> <li>core/base/math/quaternion.ts</li> </ul>"},{"location":"modules/core/base/math/box.ts/","title":"core/base/math/box.ts","text":""},{"location":"modules/core/base/math/box.ts/#box-overview","title":"box overviewTable of contents","text":"<ul> <li>utils</li> <li>Box (class)<ul> <li>clone (static method)</li> <li>expandByPoint (static method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/math/box.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/box.ts/#box-class","title":"Box (class)","text":"<p>Signature</p> <pre><code>export declare class Box\n</code></pre>"},{"location":"modules/core/base/math/box.ts/#clone-static-method","title":"clone (static method)","text":"<p>Signature</p> <pre><code>static clone&lt;T&gt;(box: GgBox&lt;T&gt;): GgBox&lt;T&gt;\n</code></pre>"},{"location":"modules/core/base/math/box.ts/#expandbypoint-static-method","title":"expandByPoint (static method)","text":"<p>Signature</p> <pre><code>static expandByPoint&lt;T&gt;(box: GgBox&lt;T&gt;, point: T): GgBox&lt;T&gt;\n</code></pre>"},{"location":"modules/core/base/math/matrix4.ts/","title":"core/base/math/matrix4.ts","text":""},{"location":"modules/core/base/math/matrix4.ts/#matrix4-overview","title":"matrix4 overviewTable of contents","text":"<ul> <li>utils</li> <li>Mtrx4 (class)<ul> <li>lookAt (static method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/math/matrix4.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/matrix4.ts/#mtrx4-class","title":"Mtrx4 (class)","text":"<p>Signature</p> <pre><code>export declare class Mtrx4\n</code></pre>"},{"location":"modules/core/base/math/matrix4.ts/#lookat-static-method","title":"lookAt (static method)","text":"<p>creates a rotation matrix for object, so it will look at some point in space</p> <p>Signature</p> <pre><code>static lookAt(eye: Point3, target: Point3, up: Point3): number[]\n</code></pre>"},{"location":"modules/core/base/math/numbers.ts/","title":"core/base/math/numbers.ts","text":""},{"location":"modules/core/base/math/numbers.ts/#numbers-overview","title":"numbers overviewTable of contents","text":"<ul> <li>utils</li> <li>averageAngle</li> <li>lerpNumber</li> </ul>"},{"location":"modules/core/base/math/numbers.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/numbers.ts/#averageangle","title":"averageAngle","text":"<p>Signature</p> <pre><code>export declare const averageAngle: (angleA: number, angleB: number, factor?: number) =&gt; number\n</code></pre>"},{"location":"modules/core/base/math/numbers.ts/#lerpnumber","title":"lerpNumber","text":"<p>Signature</p> <pre><code>export declare const lerpNumber: (a: number, b: number, t: number) =&gt; number\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/","title":"core/base/math/point2.ts","text":""},{"location":"modules/core/base/math/point2.ts/#point2-overview","title":"point2 overviewTable of contents","text":"<ul> <li>utils</li> <li>Pnt2 (class)<ul> <li>clone (static method)</li> <li>add (static method)</li> <li>sub (static method)</li> <li>norm (static method)</li> <li>scalarMult (static method)</li> <li>lerp (static method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/math/point2.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/point2.ts/#pnt2-class","title":"Pnt2 (class)","text":"<p>Signature</p> <pre><code>export declare class Pnt2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#clone-static-method","title":"clone (static method)","text":"<p>clone point</p> <p>Signature</p> <pre><code>static clone(p: Point2): Point2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#add-static-method","title":"add (static method)","text":"<p>add point b to point a</p> <p>Signature</p> <pre><code>static add(a: Point2, b: Point2): Point2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#sub-static-method","title":"sub (static method)","text":"<p>subtract point b from point a</p> <p>Signature</p> <pre><code>static sub(a: Point2, b: Point2): Point2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#norm-static-method","title":"norm (static method)","text":"<p>normalize</p> <p>Signature</p> <pre><code>static norm(p: Point2): Point2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#scalarmult-static-method","title":"scalarMult (static method)","text":"<p>scalar multiplication</p> <p>Signature</p> <pre><code>static scalarMult(p: Point2, m: number): Point2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#lerp-static-method","title":"lerp (static method)","text":"<p>linear interpolation</p> <p>Signature</p> <pre><code>static lerp(a: Point2, b: Point2, t: number): Point2\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/","title":"core/base/math/point3.ts","text":""},{"location":"modules/core/base/math/point3.ts/#point3-overview","title":"point3 overviewTable of contents","text":"<ul> <li>utils</li> <li>Pnt3 (class)<ul> <li>clone (static method)</li> <li>add (static method)</li> <li>sub (static method)</li> <li>lenSq (static method)</li> <li>len (static method)</li> <li>cross (static method)</li> <li>norm (static method)</li> <li>scalarMult (static method)</li> <li>lerp (static method)</li> <li>rot (static method)</li> <li>rotAround (static method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/math/point3.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/point3.ts/#pnt3-class","title":"Pnt3 (class)","text":"<p>Signature</p> <pre><code>export declare class Pnt3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#clone-static-method","title":"clone (static method)","text":"<p>clone point</p> <p>Signature</p> <pre><code>static clone(p: Point3): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#add-static-method","title":"add (static method)","text":"<p>add point b to point a</p> <p>Signature</p> <pre><code>static add(a: Point3, b: Point3): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#sub-static-method","title":"sub (static method)","text":"<p>subtract point b from point a</p> <p>Signature</p> <pre><code>static sub(a: Point3, b: Point3): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#lensq-static-method","title":"lenSq (static method)","text":"<p>calculate vector length (squared)</p> <p>Signature</p> <pre><code>static lenSq(v: Point3)\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#len-static-method","title":"len (static method)","text":"<p>calculate vector length</p> <p>Signature</p> <pre><code>static len(v: Point3)\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#cross-static-method","title":"cross (static method)","text":"<p>cross vectors</p> <p>Signature</p> <pre><code>static cross(a: Point3, b: Point3): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#norm-static-method","title":"norm (static method)","text":"<p>normalize</p> <p>Signature</p> <pre><code>static norm(p: Point3): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#scalarmult-static-method","title":"scalarMult (static method)","text":"<p>scalar multiplication</p> <p>Signature</p> <pre><code>static scalarMult(p: Point3, m: number): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#lerp-static-method","title":"lerp (static method)","text":"<p>linear interpolation</p> <p>Signature</p> <pre><code>static lerp(a: Point3, b: Point3, t: number): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#rot-static-method","title":"rot (static method)","text":"<p>rotate point a with quaternion q</p> <p>Signature</p> <pre><code>static rot(p: Point3, q: Point4): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#rotaround-static-method","title":"rotAround (static method)","text":"<p>rotate point around axis a (normalized vector)</p> <p>Signature</p> <pre><code>static rotAround(p: Point3, axis: Point3, angle: number): Point3\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/","title":"core/base/math/quaternion.ts","text":""},{"location":"modules/core/base/math/quaternion.ts/#quaternion-overview","title":"quaternion overviewTable of contents","text":"<ul> <li>utils</li> <li>Qtrn (class)<ul> <li>clone (static method)</li> <li>add (static method)</li> <li>mult (static method)</li> <li>combineRotations (static method)</li> <li>lerp (static method)</li> <li>slerp (static method)</li> <li>fromAngle (static method)</li> <li>fromMatrix4 (static method)</li> <li>fromEuler (static method)</li> <li>toEuler (static method)</li> <li>lookAt (static method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/math/quaternion.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/quaternion.ts/#qtrn-class","title":"Qtrn (class)","text":"<p>Signature</p> <pre><code>export declare class Qtrn\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#clone-static-method","title":"clone (static method)","text":"<p>clone quaternion</p> <p>Signature</p> <pre><code>static clone(q: Point4): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#add-static-method","title":"add (static method)","text":"<p>add quaternion b to quaternion a</p> <p>Signature</p> <pre><code>static add(a: Point4, b: Point4): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#mult-static-method","title":"mult (static method)","text":"<p>Signature</p> <pre><code>static mult(a: Point4, b: Point4): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#combinerotations-static-method","title":"combineRotations (static method)","text":"<p>Signature</p> <pre><code>static combineRotations(...quaternions: Point4[]): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#lerp-static-method","title":"lerp (static method)","text":"<p>linear interpolation</p> <p>Signature</p> <pre><code>static lerp(a: Point4, b: Point4, t: number): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#slerp-static-method","title":"slerp (static method)","text":"<p>spherical interpolation</p> <p>Signature</p> <pre><code>static slerp(a: Point4, b: Point4, t: number): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#fromangle-static-method","title":"fromAngle (static method)","text":"<p>creates quaternion from simple angle around axis. Assumes that axis vector is normalized</p> <p>Signature</p> <pre><code>static fromAngle(axis: Point3, angle: number)\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#frommatrix4-static-method","title":"fromMatrix4 (static method)","text":"<p>creates quaternion from 4-dimension rotation matrix</p> <p>Signature</p> <pre><code>static fromMatrix4(m: number[]): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#fromeuler-static-method","title":"fromEuler (static method)","text":"<p>creates a quaternion from euler</p> <p>Signature</p> <pre><code>static fromEuler(e: Point3): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#toeuler-static-method","title":"toEuler (static method)","text":"<p>converts a quaternion to euler</p> <p>Signature</p> <pre><code>static toEuler(q: Point4): Point3\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#lookat-static-method","title":"lookAt (static method)","text":"<p>creates a rotation for object, so it will look at some point in space</p> <p>Signature</p> <pre><code>static lookAt(eye: Point3, target: Point3, up: Point3): Point4\n</code></pre>"},{"location":"modules/core/base/models/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/models/axis-directions.ts</li> <li>core/base/models/body-options.ts</li> <li>core/base/models/geometry-nodes.ts</li> <li>core/base/models/points.ts</li> </ul>"},{"location":"modules/core/base/models/axis-directions.ts/","title":"core/base/models/axis-directions.ts","text":""},{"location":"modules/core/base/models/axis-directions.ts/#axis-directions-overview","title":"axis-directions overviewTable of contents","text":"<ul> <li>utils</li> <li>AxisDirection2 (type alias)</li> <li>AxisDirection3 (type alias)</li> <li>AxisDirection4 (type alias)</li> </ul>"},{"location":"modules/core/base/models/axis-directions.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/models/axis-directions.ts/#axisdirection2-type-alias","title":"AxisDirection2 (type alias)","text":"<p>Signature</p> <pre><code>export type AxisDirection2 = 'x' | 'y' | '-x' | '-y'\n</code></pre>"},{"location":"modules/core/base/models/axis-directions.ts/#axisdirection3-type-alias","title":"AxisDirection3 (type alias)","text":"<p>Signature</p> <pre><code>export type AxisDirection3 = AxisDirection2 | 'z' | '-z'\n</code></pre>"},{"location":"modules/core/base/models/axis-directions.ts/#axisdirection4-type-alias","title":"AxisDirection4 (type alias)","text":"<p>Signature</p> <pre><code>export type AxisDirection4 = AxisDirection3 | 'w' | '-w'\n</code></pre>"},{"location":"modules/core/base/models/body-options.ts/","title":"core/base/models/body-options.ts","text":""},{"location":"modules/core/base/models/body-options.ts/#body-options-overview","title":"body-options overviewTable of contents","text":"<ul> <li>utils</li> <li>BodyOptions (interface)</li> </ul>"},{"location":"modules/core/base/models/body-options.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/models/body-options.ts/#bodyoptions-interface","title":"BodyOptions (interface)","text":"<p>Signature</p> <pre><code>export interface BodyOptions {\n  dynamic: boolean\n  mass: number\n  restitution: number\n  friction: number\n}\n</code></pre>"},{"location":"modules/core/base/models/geometry-nodes.ts/","title":"core/base/models/geometry-nodes.ts","text":""},{"location":"modules/core/base/models/geometry-nodes.ts/#geometry-nodes-overview","title":"geometry-nodes overviewTable of contents","text":"<ul> <li>utils</li> <li>GgBox (type alias)</li> <li>GgBox2d (type alias)</li> <li>GgBox3d (type alias)</li> </ul>"},{"location":"modules/core/base/models/geometry-nodes.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/models/geometry-nodes.ts/#ggbox-type-alias","title":"GgBox (type alias)","text":"<p>Signature</p> <pre><code>export type GgBox&lt;T&gt; = { min: T; max: T }\n</code></pre>"},{"location":"modules/core/base/models/geometry-nodes.ts/#ggbox2d-type-alias","title":"GgBox2d (type alias)","text":"<p>Signature</p> <pre><code>export type GgBox2d = GgBox&lt;Point2&gt;\n</code></pre>"},{"location":"modules/core/base/models/geometry-nodes.ts/#ggbox3d-type-alias","title":"GgBox3d (type alias)","text":"<p>Signature</p> <pre><code>export type GgBox3d = GgBox&lt;Point3&gt;\n</code></pre>"},{"location":"modules/core/base/models/points.ts/","title":"core/base/models/points.ts","text":""},{"location":"modules/core/base/models/points.ts/#points-overview","title":"points overviewTable of contents","text":"<ul> <li>utils</li> <li>Point2 (type alias)</li> <li>Point3 (type alias)</li> <li>Point4 (type alias)</li> </ul>"},{"location":"modules/core/base/models/points.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/models/points.ts/#point2-type-alias","title":"Point2 (type alias)","text":"<p>Signature</p> <pre><code>export type Point2 = { x: number; y: number }\n</code></pre>"},{"location":"modules/core/base/models/points.ts/#point3-type-alias","title":"Point3 (type alias)","text":"<p>Signature</p> <pre><code>export type Point3 = { x: number; y: number; z: number }\n</code></pre>"},{"location":"modules/core/base/models/points.ts/#point4-type-alias","title":"Point4 (type alias)","text":"<p>Signature</p> <pre><code>export type Point4 = { x: number; y: number; z: number; w: number }\n</code></pre>"},{"location":"modules/core/base/ui/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/ui/gg-console.ui.ts</li> <li>core/base/ui/gg-debugger.ui.ts</li> </ul>"},{"location":"modules/core/base/ui/gg-console.ui.ts/","title":"core/base/ui/gg-console.ui.ts","text":""},{"location":"modules/core/base/ui/gg-console.ui.ts/#gg-consoleui-overview","title":"gg-console.ui overviewTable of contents","text":"<ul> <li>utils</li> <li>GgConsoleUI (class)<ul> <li>createUI (method)</li> <li>destroyUI (method)</li> <li>onUsePreviousCommand (method)</li> <li>onUseNextCommand (method)</li> <li>onInput (method)</li> <li>stdout (method)</li> <li>setupDragging (method)</li> <li>elements (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/ui/gg-console.ui.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/ui/gg-console.ui.ts/#ggconsoleui-class","title":"GgConsoleUI (class)","text":"<p>Signature</p> <pre><code>export declare class GgConsoleUI {\n  private constructor()\n}\n</code></pre>"},{"location":"modules/core/base/ui/gg-console.ui.ts/#createui-method","title":"createUI (method)","text":"<p>Signature</p> <pre><code>public createUI()\n</code></pre>"},{"location":"modules/core/base/ui/gg-console.ui.ts/#destroyui-method","title":"destroyUI (method)","text":"<p>Signature</p> <pre><code>public destroyUI()\n</code></pre>"},{"location":"modules/core/base/ui/gg-console.ui.ts/#onusepreviouscommand-method","title":"onUsePreviousCommand (method)","text":"<p>Signature</p> <pre><code>onUsePreviousCommand()\n</code></pre>"},{"location":"modules/core/base/ui/gg-console.ui.ts/#onusenextcommand-method","title":"onUseNextCommand (method)","text":"<p>Signature</p> <pre><code>onUseNextCommand()\n</code></pre>"},{"location":"modules/core/base/ui/gg-console.ui.ts/#oninput-method","title":"onInput (method)","text":"<p>Signature</p> <pre><code>async onInput()\n</code></pre>"},{"location":"modules/core/base/ui/gg-console.ui.ts/#stdout-method","title":"stdout (method)","text":"<p>Signature</p> <pre><code>private stdout(s: string = ''): void\n</code></pre>"},{"location":"modules/core/base/ui/gg-console.ui.ts/#setupdragging-method","title":"setupDragging (method)","text":"<p>Signature</p> <pre><code>setupDragging()\n</code></pre>"},{"location":"modules/core/base/ui/gg-console.ui.ts/#elements-property","title":"elements (property)","text":"<p>Signature</p> <pre><code>elements: { main: HTMLDivElement; input: HTMLInputElement; output: HTMLTextAreaElement; } | null\n</code></pre>"},{"location":"modules/core/base/ui/gg-debugger.ui.ts/","title":"core/base/ui/gg-debugger.ui.ts","text":""},{"location":"modules/core/base/ui/gg-debugger.ui.ts/#gg-debuggerui-overview","title":"gg-debugger.ui overviewTable of contents","text":"<ul> <li>utils</li> <li>GgDebuggerUI (class)<ul> <li>createUI (method)</li> <li>destroyUI (method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/ui/gg-debugger.ui.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/ui/gg-debugger.ui.ts/#ggdebuggerui-class","title":"GgDebuggerUI (class)","text":"<p>Signature</p> <pre><code>export declare class GgDebuggerUI {\n  private constructor()\n}\n</code></pre>"},{"location":"modules/core/base/ui/gg-debugger.ui.ts/#createui-method","title":"createUI (method)","text":"<p>Signature</p> <pre><code>public createUI()\n</code></pre>"},{"location":"modules/core/base/ui/gg-debugger.ui.ts/#destroyui-method","title":"destroyUI (method)","text":"<p>Signature</p> <pre><code>public destroyUI()\n</code></pre>"},{"location":"modules/matter/","title":"Modules","text":"Directory table of contents <ul> <li>matter/impl</li> </ul>"},{"location":"modules/matter/impl/","title":"Modules","text":"Directory table of contents <ul> <li>matter/impl/gg-2d-body-factory.ts</li> <li>matter/impl/gg-2d-body.ts</li> <li>matter/impl/gg-2d-physics-world.ts</li> </ul>"},{"location":"modules/matter/impl/gg-2d-body-factory.ts/","title":"matter/impl/gg-2d-body-factory.ts","text":""},{"location":"modules/matter/impl/gg-2d-body-factory.ts/#gg-2d-body-factory-overview","title":"gg-2d-body-factory overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dBodyFactory (class)<ul> <li>createRigidBody (method)</li> <li>createTrigger (method)</li> <li>transformOptions (method)</li> </ul> </li> </ul>"},{"location":"modules/matter/impl/gg-2d-body-factory.ts/#utils","title":"utils","text":""},{"location":"modules/matter/impl/gg-2d-body-factory.ts/#gg2dbodyfactory-class","title":"Gg2dBodyFactory (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dBodyFactory\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body-factory.ts/#createrigidbody-method","title":"createRigidBody (method)","text":"<p>Signature</p> <pre><code>createRigidBody(\n    descriptor: BodyShape2DDescriptor,\n    transform?: {\n      position?: Point2;\n      rotation?: number;\n    },\n  ): Gg2dBody\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body-factory.ts/#createtrigger-method","title":"createTrigger (method)","text":"<p>Signature</p> <pre><code>createTrigger(\n    descriptor: Shape2DDescriptor,\n    transform?: {\n      position?: Point2;\n      rotation?: number;\n    },\n  ): any\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body-factory.ts/#transformoptions-method","title":"transformOptions (method)","text":"<p>Signature</p> <pre><code>private transformOptions(options: Partial&lt;Body2DOptions&gt;): IBodyDefinition\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body.ts/","title":"matter/impl/gg-2d-body.ts","text":""},{"location":"modules/matter/impl/gg-2d-body.ts/#gg-2d-body-overview","title":"gg-2d-body overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dBody (class)<ul> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>dispose (method)</li> <li>resetMotion (method)</li> <li>name (property)</li> <li>entity (property)</li> </ul> </li> </ul>"},{"location":"modules/matter/impl/gg-2d-body.ts/#utils","title":"utils","text":""},{"location":"modules/matter/impl/gg-2d-body.ts/#gg2dbody-class","title":"Gg2dBody (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dBody {\n  constructor(public nativeBody: Body)\n}\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): Gg2dBody\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg2dPhysicsWorld): void\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg2dPhysicsWorld): void\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body.ts/#resetmotion-method","title":"resetMotion (method)","text":"<p>Signature</p> <pre><code>resetMotion(): void\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body.ts/#name-property","title":"name (property)","text":"<p>Signature</p> <pre><code>name: string\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-physics-world.ts/","title":"matter/impl/gg-2d-physics-world.ts","text":""},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#gg-2d-physics-world-overview","title":"gg-2d-physics-world overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dPhysicsWorld (class)<ul> <li>init (method)</li> <li>simulate (method)</li> <li>startDebugger (method)</li> <li>stopDebugger (method)</li> <li>dispose (method)</li> <li>factory (property)</li> </ul> </li> </ul>"},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#utils","title":"utils","text":""},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#gg2dphysicsworld-class","title":"Gg2dPhysicsWorld (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dPhysicsWorld\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#init-method","title":"init (method)","text":"<p>Signature</p> <pre><code>async init(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#simulate-method","title":"simulate (method)","text":"<p>Signature</p> <pre><code>simulate(delta: number): void\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#startdebugger-method","title":"startDebugger (method)","text":"<p>Signature</p> <pre><code>startDebugger(world: Gg2dWorld, drawer: GgDebugPhysicsDrawer&lt;Point2, number&gt;): void\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#stopdebugger-method","title":"stopDebugger (method)","text":"<p>Signature</p> <pre><code>stopDebugger(): void\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#factory-property","title":"factory (property)","text":"<p>Signature</p> <pre><code>readonly factory: Gg2dBodyFactory\n</code></pre>"},{"location":"modules/pixi/","title":"Modules","text":"Directory table of contents <ul> <li>pixi/impl</li> </ul>"},{"location":"modules/pixi/impl/","title":"Modules","text":"Directory table of contents <ul> <li>pixi/impl/gg-2d-object-factory.ts</li> <li>pixi/impl/gg-2d-object.ts</li> <li>pixi/impl/gg-2d-visual-scene.ts</li> <li>pixi/impl/gg-renderer.ts</li> </ul>"},{"location":"modules/pixi/impl/gg-2d-object-factory.ts/","title":"pixi/impl/gg-2d-object-factory.ts","text":""},{"location":"modules/pixi/impl/gg-2d-object-factory.ts/#gg-2d-object-factory-overview","title":"gg-2d-object-factory overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dObjectFactory (class)<ul> <li>getRandomColor (method)</li> <li>createPrimitive (method)</li> </ul> </li> </ul>"},{"location":"modules/pixi/impl/gg-2d-object-factory.ts/#utils","title":"utils","text":""},{"location":"modules/pixi/impl/gg-2d-object-factory.ts/#gg2dobjectfactory-class","title":"Gg2dObjectFactory (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dObjectFactory\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object-factory.ts/#getrandomcolor-method","title":"getRandomColor (method)","text":"<p>Signature</p> <pre><code>getRandomColor(): number\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object-factory.ts/#createprimitive-method","title":"createPrimitive (method)","text":"<p>Signature</p> <pre><code>createPrimitive(descriptor: Shape2DDescriptor, texture: Texture | null = null): Gg2dObject\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object.ts/","title":"pixi/impl/gg-2d-object.ts","text":""},{"location":"modules/pixi/impl/gg-2d-object.ts/#gg-2d-object-overview","title":"gg-2d-object overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dObject (class)<ul> <li>isEmpty (method)</li> <li>popChild (method)</li> <li>getBoundings (method)</li> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>dispose (method)</li> <li>name (property)</li> </ul> </li> </ul>"},{"location":"modules/pixi/impl/gg-2d-object.ts/#utils","title":"utils","text":""},{"location":"modules/pixi/impl/gg-2d-object.ts/#gg2dobject-class","title":"Gg2dObject (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dObject {\n  constructor(public nativeSprite: DisplayObject)\n}\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object.ts/#isempty-method","title":"isEmpty (method)","text":"<p>Signature</p> <pre><code>public isEmpty(): boolean\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object.ts/#popchild-method","title":"popChild (method)","text":"<p>Signature</p> <pre><code>popChild(name: string): Gg2dObject | null\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object.ts/#getboundings-method","title":"getBoundings (method)","text":"<p>Signature</p> <pre><code>getBoundings(): GgBox2d\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): Gg2dObject\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg2dVisualScene): void\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg2dVisualScene): void\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object.ts/#name-property","title":"name (property)","text":"<p>Signature</p> <pre><code>name: string\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-visual-scene.ts/","title":"pixi/impl/gg-2d-visual-scene.ts","text":""},{"location":"modules/pixi/impl/gg-2d-visual-scene.ts/#gg-2d-visual-scene-overview","title":"gg-2d-visual-scene overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dVisualScene (class)<ul> <li>init (method)</li> <li>dispose (method)</li> <li>factory (property)</li> </ul> </li> </ul>"},{"location":"modules/pixi/impl/gg-2d-visual-scene.ts/#utils","title":"utils","text":""},{"location":"modules/pixi/impl/gg-2d-visual-scene.ts/#gg2dvisualscene-class","title":"Gg2dVisualScene (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dVisualScene\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-visual-scene.ts/#init-method","title":"init (method)","text":"<p>Signature</p> <pre><code>async init(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-visual-scene.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-visual-scene.ts/#factory-property","title":"factory (property)","text":"<p>Signature</p> <pre><code>readonly factory: Gg2dObjectFactory\n</code></pre>"},{"location":"modules/pixi/impl/gg-renderer.ts/","title":"pixi/impl/gg-renderer.ts","text":""},{"location":"modules/pixi/impl/gg-renderer.ts/#gg-renderer-overview","title":"gg-renderer overviewTable of contents","text":"<ul> <li>utils</li> <li>GgRenderer (class)<ul> <li>resize (method)</li> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>render (method)</li> <li>dispose (method)</li> <li>application (property)</li> </ul> </li> </ul>"},{"location":"modules/pixi/impl/gg-renderer.ts/#utils","title":"utils","text":""},{"location":"modules/pixi/impl/gg-renderer.ts/#ggrenderer-class","title":"GgRenderer (class)","text":"<p>Signature</p> <pre><code>export declare class GgRenderer {\n  constructor(canvas?: HTMLCanvasElement, rendererOptions: Partial&lt;RendererOptions&gt; = {})\n}\n</code></pre>"},{"location":"modules/pixi/impl/gg-renderer.ts/#resize-method","title":"resize (method)","text":"<p>Signature</p> <pre><code>resize(newSize: Point2): void\n</code></pre>"},{"location":"modules/pixi/impl/gg-renderer.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>public onSpawned(world: Gg2dWorld)\n</code></pre>"},{"location":"modules/pixi/impl/gg-renderer.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>public onRemoved()\n</code></pre>"},{"location":"modules/pixi/impl/gg-renderer.ts/#render-method","title":"render (method)","text":"<p>Signature</p> <pre><code>render(): void\n</code></pre>"},{"location":"modules/pixi/impl/gg-renderer.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/pixi/impl/gg-renderer.ts/#application-property","title":"application (property)","text":"<p>Signature</p> <pre><code>readonly application: any\n</code></pre>"},{"location":"modules/three/","title":"Modules","text":"Directory table of contents <ul> <li>three/impl</li> <li>three/three-physics-drawer.ts</li> </ul>"},{"location":"modules/three/three-physics-drawer.ts/","title":"three/three-physics-drawer.ts","text":""},{"location":"modules/three/three-physics-drawer.ts/#three-physics-drawer-overview","title":"three-physics-drawer overviewTable of contents","text":"<ul> <li>utils</li> <li>ThreePhysicsDrawer (class)<ul> <li>drawContactPoint (method)</li> <li>drawLine (method)</li> <li>update (method)</li> <li>setXYZ (method)</li> <li>debugBufferSize (property)</li> <li>debugVertices (property)</li> <li>debugColors (property)</li> </ul> </li> </ul>"},{"location":"modules/three/three-physics-drawer.ts/#utils","title":"utils","text":""},{"location":"modules/three/three-physics-drawer.ts/#threephysicsdrawer-class","title":"ThreePhysicsDrawer (class)","text":"<p>Signature</p> <pre><code>export declare class ThreePhysicsDrawer {\n  constructor()\n}\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#drawcontactpoint-method","title":"drawContactPoint (method)","text":"<p>Signature</p> <pre><code>drawContactPoint(point: Point3, normal: Point3, color?: Point3): void\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#drawline-method","title":"drawLine (method)","text":"<p>Signature</p> <pre><code>drawLine(from: Point3, to: Point3, color?: Point3): void\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#update-method","title":"update (method)","text":"<p>Signature</p> <pre><code>update()\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#setxyz-method","title":"setXYZ (method)","text":"<p>Signature</p> <pre><code>private setXYZ(array: Float32Array, index: number, x: number, y: number, z: number)\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#debugbuffersize-property","title":"debugBufferSize (property)","text":"<p>Signature</p> <pre><code>readonly debugBufferSize: number\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#debugvertices-property","title":"debugVertices (property)","text":"<p>Signature</p> <pre><code>readonly debugVertices: Float32Array\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#debugcolors-property","title":"debugColors (property)","text":"<p>Signature</p> <pre><code>readonly debugColors: Float32Array\n</code></pre>"},{"location":"modules/three/impl/","title":"Modules","text":"Directory table of contents <ul> <li>three/impl/gg-3d-object-factory.ts</li> <li>three/impl/gg-3d-object-loader.ts</li> <li>three/impl/gg-3d-object.ts</li> <li>three/impl/gg-3d-visual-scene.ts</li> <li>three/impl/gg-renderer.ts</li> <li>three/impl/three-camera.entity.ts</li> <li>three/impl/three-camera.ts</li> </ul>"},{"location":"modules/three/impl/gg-3d-object-factory.ts/","title":"three/impl/gg-3d-object-factory.ts","text":""},{"location":"modules/three/impl/gg-3d-object-factory.ts/#gg-3d-object-factory-overview","title":"gg-3d-object-factory overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dObjectFactory (class)<ul> <li>getRandomMaterial (method)</li> <li>transformPrimitiveZUp (method)</li> <li>createPrimitive (method)</li> </ul> </li> </ul>"},{"location":"modules/three/impl/gg-3d-object-factory.ts/#utils","title":"utils","text":""},{"location":"modules/three/impl/gg-3d-object-factory.ts/#gg3dobjectfactory-class","title":"Gg3dObjectFactory (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dObjectFactory\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object-factory.ts/#getrandommaterial-method","title":"getRandomMaterial (method)","text":"<p>Signature</p> <pre><code>getRandomMaterial(): Material\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object-factory.ts/#transformprimitivezup-method","title":"transformPrimitiveZUp (method)","text":"<p>Signature</p> <pre><code>private transformPrimitiveZUp(object: Object3D): Group\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object-factory.ts/#createprimitive-method","title":"createPrimitive (method)","text":"<p>Signature</p> <pre><code>createPrimitive(descriptor: Shape3DDescriptor, material: Material = this.getRandomMaterial()): Gg3dObject\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object-loader.ts/","title":"three/impl/gg-3d-object-loader.ts","text":""},{"location":"modules/three/impl/gg-3d-object-loader.ts/#gg-3d-object-loader-overview","title":"gg-3d-object-loader overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dObjectLoader (class)<ul> <li>loadFromGgGlb (method)</li> </ul> </li> </ul>"},{"location":"modules/three/impl/gg-3d-object-loader.ts/#utils","title":"utils","text":""},{"location":"modules/three/impl/gg-3d-object-loader.ts/#gg3dobjectloader-class","title":"Gg3dObjectLoader (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dObjectLoader\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object-loader.ts/#loadfromggglb-method","title":"loadFromGgGlb (method)","text":"<p>Signature</p> <pre><code>public async loadFromGgGlb(glbFile: ArrayBuffer, meta: GgMeta): Promise&lt;Gg3dObject | null&gt;\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/","title":"three/impl/gg-3d-object.ts","text":""},{"location":"modules/three/impl/gg-3d-object.ts/#gg-3d-object-overview","title":"gg-3d-object overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dObject (class)<ul> <li>isEmpty (method)</li> <li>popChild (method)</li> <li>getBoundings (method)</li> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>dispose (method)</li> <li>disposeMesh (method)</li> <li>name (property)</li> </ul> </li> </ul>"},{"location":"modules/three/impl/gg-3d-object.ts/#utils","title":"utils","text":""},{"location":"modules/three/impl/gg-3d-object.ts/#gg3dobject-class","title":"Gg3dObject (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dObject {\n  constructor(public nativeMesh: Object3D)\n}\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/#isempty-method","title":"isEmpty (method)","text":"<p>Signature</p> <pre><code>public isEmpty(): boolean\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/#popchild-method","title":"popChild (method)","text":"<p>Signature</p> <pre><code>popChild(name: string): Gg3dObject | null\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/#getboundings-method","title":"getBoundings (method)","text":"<p>Signature</p> <pre><code>getBoundings(): GgBox3d\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): Gg3dObject\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg3dVisualScene): void\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg3dVisualScene): void\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/#disposemesh-method","title":"disposeMesh (method)","text":"<p>Signature</p> <pre><code>private disposeMesh(mesh: Mesh)\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/#name-property","title":"name (property)","text":"<p>Signature</p> <pre><code>name: string\n</code></pre>"},{"location":"modules/three/impl/gg-3d-visual-scene.ts/","title":"three/impl/gg-3d-visual-scene.ts","text":""},{"location":"modules/three/impl/gg-3d-visual-scene.ts/#gg-3d-visual-scene-overview","title":"gg-3d-visual-scene overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dVisualScene (class)<ul> <li>init (method)</li> <li>dispose (method)</li> <li>factory (property)</li> <li>loader (property)</li> <li>debugPhysicsDrawerClass (property)</li> </ul> </li> </ul>"},{"location":"modules/three/impl/gg-3d-visual-scene.ts/#utils","title":"utils","text":""},{"location":"modules/three/impl/gg-3d-visual-scene.ts/#gg3dvisualscene-class","title":"Gg3dVisualScene (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dVisualScene\n</code></pre>"},{"location":"modules/three/impl/gg-3d-visual-scene.ts/#init-method","title":"init (method)","text":"<p>Signature</p> <pre><code>async init(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/three/impl/gg-3d-visual-scene.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/three/impl/gg-3d-visual-scene.ts/#factory-property","title":"factory (property)","text":"<p>Signature</p> <pre><code>readonly factory: Gg3dObjectFactory\n</code></pre>"},{"location":"modules/three/impl/gg-3d-visual-scene.ts/#loader-property","title":"loader (property)","text":"<p>Signature</p> <pre><code>readonly loader: Gg3dObjectLoader\n</code></pre>"},{"location":"modules/three/impl/gg-3d-visual-scene.ts/#debugphysicsdrawerclass-property","title":"debugPhysicsDrawerClass (property)","text":"<p>Signature</p> <pre><code>readonly debugPhysicsDrawerClass: typeof ThreePhysicsDrawer\n</code></pre>"},{"location":"modules/three/impl/gg-renderer.ts/","title":"three/impl/gg-renderer.ts","text":""},{"location":"modules/three/impl/gg-renderer.ts/#gg-renderer-overview","title":"gg-renderer overviewTable of contents","text":"<ul> <li>utils</li> <li>GgRenderer (class)<ul> <li>resize (method)</li> <li>render (method)</li> <li>dispose (method)</li> <li>renderer (property)</li> </ul> </li> </ul>"},{"location":"modules/three/impl/gg-renderer.ts/#utils","title":"utils","text":""},{"location":"modules/three/impl/gg-renderer.ts/#ggrenderer-class","title":"GgRenderer (class)","text":"<p>Signature</p> <pre><code>export declare class GgRenderer {\n  constructor(\n    public readonly canvas?: HTMLCanvasElement,\n    rendererOptions: Partial&lt;RendererOptions&gt; = {},\n    public camera: ThreeCameraEntity = new ThreeCameraEntity(new ThreeCamera(new PerspectiveCamera(75, 1, 1, 10000)))\n  )\n}\n</code></pre>"},{"location":"modules/three/impl/gg-renderer.ts/#resize-method","title":"resize (method)","text":"<p>Signature</p> <pre><code>resize(newSize: Point2): void\n</code></pre>"},{"location":"modules/three/impl/gg-renderer.ts/#render-method","title":"render (method)","text":"<p>Signature</p> <pre><code>render(): void\n</code></pre>"},{"location":"modules/three/impl/gg-renderer.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/three/impl/gg-renderer.ts/#renderer-property","title":"renderer (property)","text":"<p>Signature</p> <pre><code>readonly renderer: any\n</code></pre>"},{"location":"modules/three/impl/three-camera.entity.ts/","title":"three/impl/three-camera.entity.ts","text":""},{"location":"modules/three/impl/three-camera.entity.ts/#three-cameraentity-overview","title":"three-camera.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>ThreeCameraEntity (class)</li> </ul>"},{"location":"modules/three/impl/three-camera.entity.ts/#utils","title":"utils","text":""},{"location":"modules/three/impl/three-camera.entity.ts/#threecameraentity-class","title":"ThreeCameraEntity (class)","text":"<p>Signature</p> <pre><code>export declare class ThreeCameraEntity\n</code></pre>"},{"location":"modules/three/impl/three-camera.ts/","title":"three/impl/three-camera.ts","text":""},{"location":"modules/three/impl/three-camera.ts/#three-camera-overview","title":"three-camera overviewTable of contents","text":"<ul> <li>utils</li> <li>ThreeCamera (class)</li> </ul>"},{"location":"modules/three/impl/three-camera.ts/#utils","title":"utils","text":""},{"location":"modules/three/impl/three-camera.ts/#threecamera-class","title":"ThreeCamera (class)","text":"<p>Signature</p> <pre><code>export declare class ThreeCamera {\n  constructor(public readonly nativeCamera: Camera)\n}\n</code></pre>"}]}