{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"modules/","title":"Modules","text":"Directory table of contents <ul> <li>ammo</li> <li>core</li> <li>matter</li> <li>pixi</li> <li>three</li> </ul> All modules <ul> <li>index</li> <li>ammo/ammo-debugger.ts</li> <li>ammo/ammo-utils.ts</li> <li>ammo/impl/gg-3d-body-factory.ts</li> <li>ammo/impl/gg-3d-body-loader.ts</li> <li>ammo/impl/gg-3d-physics-world.ts</li> <li>ammo/impl/gg-3d-raycast-vehicle.ts</li> <li>ammo/impl/bodies/base-ammo-gg-body.ts</li> <li>ammo/impl/bodies/gg-3d-body.ts</li> <li>ammo/impl/bodies/gg-3d-trigger.ts</li> <li>core/2d/factories.ts</li> <li>core/2d/gg-2d-world.ts</li> <li>core/2d/interfaces.ts</li> <li>core/2d/entities/gg-2d-entity.ts</li> <li>core/2d/entities/gg-2d-trigger.entity.ts</li> <li>core/2d/entities/gg-positionable-2d-entity.ts</li> <li>core/2d/entities/controllers/entity-2d-positioning.animator.ts</li> <li>core/2d/models/body-options.ts</li> <li>core/2d/models/shapes.ts</li> <li>core/3d/factories.ts</li> <li>core/3d/gg-3d-world.ts</li> <li>core/3d/interfaces.ts</li> <li>core/3d/loader.ts</li> <li>core/3d/entities/gg-3d-camera.entity.ts</li> <li>core/3d/entities/gg-3d-entity.ts</li> <li>core/3d/entities/gg-3d-map-graph.entity.ts</li> <li>core/3d/entities/gg-3d-raycast-vehicle.entity.ts</li> <li>core/3d/entities/gg-3d-trigger.entity.ts</li> <li>core/3d/entities/gg-positionable-3d-entity.ts</li> <li>core/3d/entities/controllers/animators/camera-3d.animator.ts</li> <li>core/3d/entities/controllers/animators/entity-3d-positioning.animator.ts</li> <li>core/3d/entities/controllers/input/car-keyboard-handling.controller.ts</li> <li>core/3d/entities/controllers/input/free-camera.controller.ts</li> <li>core/3d/models/body-options.ts</li> <li>core/3d/models/gg-meta.ts</li> <li>core/3d/models/shapes.ts</li> <li>core/base/gg-static.ts</li> <li>core/base/gg-viewport.ts</li> <li>core/base/gg-world.ts</li> <li>core/base/clock/global-clock.ts</li> <li>core/base/clock/i-clock.ts</li> <li>core/base/clock/pausable-clock.ts</li> <li>core/base/data-structures/graph.ts</li> <li>core/base/entities/base-gg-renderer.ts</li> <li>core/base/entities/gg-entity.ts</li> <li>core/base/entities/gg-positionable-entity.ts</li> <li>core/base/entities/inline-controller.ts</li> <li>core/base/entities/controllers/animation-mixer.ts</li> <li>core/base/inputs/direction.keyboard-input.ts</li> <li>core/base/inputs/input.ts</li> <li>core/base/inputs/keyboard.input.ts</li> <li>core/base/inputs/mouse.input.ts</li> <li>core/base/interfaces/gg-body.ts</li> <li>core/base/interfaces/gg-debug-physics-drawer.ts</li> <li>core/base/interfaces/gg-object.ts</li> <li>core/base/interfaces/gg-physics-world.ts</li> <li>core/base/interfaces/gg-trigger.ts</li> <li>core/base/interfaces/gg-visual-scene.ts</li> <li>core/base/math/box.ts</li> <li>core/base/math/matrix4.ts</li> <li>core/base/math/numbers.ts</li> <li>core/base/math/point2.ts</li> <li>core/base/math/point3.ts</li> <li>core/base/math/quaternion.ts</li> <li>core/base/models/axis-directions.ts</li> <li>core/base/models/body-options.ts</li> <li>core/base/models/geometry-nodes.ts</li> <li>core/base/models/points.ts</li> <li>core/base/ui/gg-console.ui.ts</li> <li>core/base/ui/gg-debugger.ui.ts</li> <li>matter/impl/gg-2d-body-factory.ts</li> <li>matter/impl/gg-2d-body.ts</li> <li>matter/impl/gg-2d-physics-world.ts</li> <li>pixi/impl/gg-2d-object-factory.ts</li> <li>pixi/impl/gg-2d-object.ts</li> <li>pixi/impl/gg-2d-visual-scene.ts</li> <li>pixi/impl/gg-renderer.ts</li> <li>three/three-physics-drawer.ts</li> <li>three/impl/gg-3d-object-factory.ts</li> <li>three/impl/gg-3d-object-loader.ts</li> <li>three/impl/gg-3d-object.ts</li> <li>three/impl/gg-3d-visual-scene.ts</li> <li>three/impl/gg-renderer.ts</li> <li>three/impl/three-camera.entity.ts</li> <li>three/impl/three-camera.ts</li> </ul>"},{"location":"modules/ammo/","title":"Modules","text":"Directory table of contents <ul> <li>ammo/ammo-debugger.ts</li> <li>ammo/ammo-utils.ts</li> <li>ammo/impl</li> </ul>"},{"location":"modules/ammo/ammo-debugger.ts/","title":"ammo/ammo-debugger.ts","text":""},{"location":"modules/ammo/ammo-debugger.ts/#ammo-debugger-overview","title":"ammo-debugger overviewTable of contents","text":"<ul> <li>utils</li> <li>AmmoDebugger (class)<ul> <li>draw3dText (method)</li> <li>drawContactPoint (method)</li> <li>drawLine (method)</li> <li>getDebugMode (method)</li> <li>update (method)</li> <li>setDebugFlags (method)</li> <li>setDebugMode (method)</li> <li>reportErrorWarning (method)</li> <li>debugMode (property)</li> <li>ammoInstance (property)</li> </ul> </li> <li>DebugBufferSize</li> </ul>"},{"location":"modules/ammo/ammo-debugger.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/ammo-debugger.ts/#ammodebugger-class","title":"AmmoDebugger (class)","text":"<p>Signature</p> <pre><code>export declare class AmmoDebugger {\n  constructor(protected readonly world: Gg3dPhysicsWorld, private readonly drawer: GgDebugPhysicsDrawer&lt;Point3, Point4&gt;)\n}\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#draw3dtext-method","title":"draw3dText (method)","text":"<p>Signature</p> <pre><code>draw3dText(location: Ammo.btVector3, textString: string): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#drawcontactpoint-method","title":"drawContactPoint (method)","text":"<p>Signature</p> <pre><code>drawContactPoint(\n    pointOnB: Ammo.btVector3,\n    normalOnB: Ammo.btVector3,\n    distance: number,\n    lifeTime: number,\n    color: Ammo.btVector3,\n  ): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#drawline-method","title":"drawLine (method)","text":"<p>Signature</p> <pre><code>drawLine(from: Ammo.btVector3, to: Ammo.btVector3, color: Ammo.btVector3): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#getdebugmode-method","title":"getDebugMode (method)","text":"<p>Signature</p> <pre><code>getDebugMode(): number\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#update-method","title":"update (method)","text":"<p>Signature</p> <pre><code>update(): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#setdebugflags-method","title":"setDebugFlags (method)","text":"<p>Signature</p> <pre><code>setDebugFlags(flags: AmmoDebugMode[]): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#setdebugmode-method","title":"setDebugMode (method)","text":"<p>Signature</p> <pre><code>setDebugMode(debugMode: number): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#reporterrorwarning-method","title":"reportErrorWarning (method)","text":"<p>Signature</p> <pre><code>reportErrorWarning(warningString: string): void\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#debugmode-property","title":"debugMode (property)","text":"<p>Signature</p> <pre><code>debugMode: AmmoDebugMode\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#ammoinstance-property","title":"ammoInstance (property)","text":"<p>Signature</p> <pre><code>readonly ammoInstance: any\n</code></pre>"},{"location":"modules/ammo/ammo-debugger.ts/#debugbuffersize","title":"DebugBufferSize","text":"<p>Signature</p> <pre><code>export declare const DebugBufferSize: number\n</code></pre>"},{"location":"modules/ammo/ammo-utils.ts/","title":"ammo/ammo-utils.ts","text":""},{"location":"modules/ammo/ammo-utils.ts/#ammo-utils-overview","title":"ammo-utils overviewTable of contents","text":"<ul> <li>utils</li> <li>ammoId</li> </ul>"},{"location":"modules/ammo/ammo-utils.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/ammo-utils.ts/#ammoid","title":"ammoId","text":"<p>Signature</p> <pre><code>export declare const ammoId: (body: any) =&gt; number\n</code></pre>"},{"location":"modules/ammo/impl/","title":"Modules","text":"Directory table of contents <ul> <li>ammo/impl/bodies</li> <li>ammo/impl/gg-3d-body-factory.ts</li> <li>ammo/impl/gg-3d-body-loader.ts</li> <li>ammo/impl/gg-3d-physics-world.ts</li> <li>ammo/impl/gg-3d-raycast-vehicle.ts</li> </ul>"},{"location":"modules/ammo/impl/gg-3d-body-factory.ts/","title":"ammo/impl/gg-3d-body-factory.ts","text":""},{"location":"modules/ammo/impl/gg-3d-body-factory.ts/#gg-3d-body-factory-overview","title":"gg-3d-body-factory overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dBodyFactory (class)<ul> <li>createRigidBody (method)</li> <li>createTrigger (method)</li> <li>createShape (method)</li> <li>createRigidBodyFromShape (method)</li> <li>createTriggerFromShape (method)</li> </ul> </li> </ul>"},{"location":"modules/ammo/impl/gg-3d-body-factory.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/impl/gg-3d-body-factory.ts/#gg3dbodyfactory-class","title":"Gg3dBodyFactory (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dBodyFactory {\n  constructor(protected readonly world: Gg3dPhysicsWorld)\n}\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-body-factory.ts/#createrigidbody-method","title":"createRigidBody (method)","text":"<p>Signature</p> <pre><code>createRigidBody(\n    descriptor: BodyShape3DDescriptor,\n    transform?: {\n      position?: Point3;\n      rotation?: Point4;\n    },\n  ): Gg3dBody\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-body-factory.ts/#createtrigger-method","title":"createTrigger (method)","text":"<p>Signature</p> <pre><code>createTrigger(\n    descriptor: Shape3DDescriptor,\n    transform?: {\n      position?: Point3;\n      rotation?: Point4;\n    },\n  ): Gg3dTrigger\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-body-factory.ts/#createshape-method","title":"createShape (method)","text":"<p>Signature</p> <pre><code>protected createShape(descriptor: Shape3DDescriptor): Ammo.btCollisionShape\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-body-factory.ts/#createrigidbodyfromshape-method","title":"createRigidBodyFromShape (method)","text":"<p>Signature</p> <pre><code>public createRigidBodyFromShape(\n    shape: Ammo.btCollisionShape,\n    options: Partial&lt;Body3DOptions&gt;,\n    transform?: { position?: Point3; rotation?: Point4 },\n  ): Gg3dBody\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-body-factory.ts/#createtriggerfromshape-method","title":"createTriggerFromShape (method)","text":"<p>Signature</p> <pre><code>public createTriggerFromShape(\n    shape: Ammo.btCollisionShape,\n    transform?: { position?: Point3; rotation?: Point4 },\n  ): Gg3dTrigger\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-body-loader.ts/","title":"ammo/impl/gg-3d-body-loader.ts","text":""},{"location":"modules/ammo/impl/gg-3d-body-loader.ts/#gg-3d-body-loader-overview","title":"gg-3d-body-loader overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dBodyLoader (class)</li> </ul>"},{"location":"modules/ammo/impl/gg-3d-body-loader.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/impl/gg-3d-body-loader.ts/#gg3dbodyloader-class","title":"Gg3dBodyLoader (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dBodyLoader {\n  constructor(protected readonly world: Gg3dPhysicsWorld)\n}\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/","title":"ammo/impl/gg-3d-physics-world.ts","text":""},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/#gg-3d-physics-world-overview","title":"gg-3d-physics-world overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dPhysicsWorld (class)<ul> <li>init (method)</li> <li>simulate (method)</li> <li>startDebugger (method)</li> <li>stopDebugger (method)</li> <li>dispose (method)</li> <li>_dynamicAmmoWorld (property)</li> </ul> </li> </ul>"},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/#gg3dphysicsworld-class","title":"Gg3dPhysicsWorld (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dPhysicsWorld\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/#init-method","title":"init (method)","text":"<p>Signature</p> <pre><code>async init(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/#simulate-method","title":"simulate (method)","text":"<p>Signature</p> <pre><code>simulate(delta: number): void\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/#startdebugger-method","title":"startDebugger (method)","text":"<p>Signature</p> <pre><code>startDebugger(world: Gg3dWorld, drawer: GgDebugPhysicsDrawer&lt;Point3, Point4&gt;): void\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/#stopdebugger-method","title":"stopDebugger (method)","text":"<p>Signature</p> <pre><code>stopDebugger(world: Gg3dWorld): void\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-physics-world.ts/#_dynamicammoworld-property","title":"_dynamicAmmoWorld (property)","text":"<p>Signature</p> <pre><code>_dynamicAmmoWorld: any\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/","title":"ammo/impl/gg-3d-raycast-vehicle.ts","text":""},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#gg-3d-raycast-vehicle-overview","title":"gg-3d-raycast-vehicle overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dRaycastVehicle (class)<ul> <li>addToWorld (method)</li> <li>addWheel (method)</li> <li>setSteering (method)</li> <li>applyEngineForce (method)</li> <li>applyBrake (method)</li> <li>isWheelTouchesGround (method)</li> <li>getWheelTransform (method)</li> <li>resetSuspension (method)</li> <li>nativeVehicle (property)</li> <li>vehicleTuning (property)</li> <li>wheelDirectionCS0 (property)</li> <li>wheelAxleCS (property)</li> <li>entity (property)</li> </ul> </li> </ul>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#gg3draycastvehicle-class","title":"Gg3dRaycastVehicle (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dRaycastVehicle {\n  constructor(protected readonly world: Gg3dPhysicsWorld, public chassisBody: Ammo.btRigidBody)\n}\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg3dPhysicsWorld)\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#addwheel-method","title":"addWheel (method)","text":"<p>Signature</p> <pre><code>addWheel(options: WheelOptions, suspensionOptions: SuspensionOptions): void\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#setsteering-method","title":"setSteering (method)","text":"<p>Signature</p> <pre><code>setSteering(wheelIndex: number, steering: number): void\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#applyengineforce-method","title":"applyEngineForce (method)","text":"<p>Signature</p> <pre><code>applyEngineForce(wheelIndex: number, force: number): void\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#applybrake-method","title":"applyBrake (method)","text":"<p>Signature</p> <pre><code>applyBrake(wheelIndex: number, force: number): void\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#iswheeltouchesground-method","title":"isWheelTouchesGround (method)","text":"<p>Signature</p> <pre><code>isWheelTouchesGround(wheelIndex: number): boolean\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#getwheeltransform-method","title":"getWheelTransform (method)","text":"<p>Signature</p> <pre><code>getWheelTransform(wheelIndex: number): { position: Point3; rotation: Point4 }\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#resetsuspension-method","title":"resetSuspension (method)","text":"<p>Signature</p> <pre><code>resetSuspension(): void\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#nativevehicle-property","title":"nativeVehicle (property)","text":"<p>Signature</p> <pre><code>readonly nativeVehicle: any\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#vehicletuning-property","title":"vehicleTuning (property)","text":"<p>Signature</p> <pre><code>readonly vehicleTuning: any\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#wheeldirectioncs0-property","title":"wheelDirectionCS0 (property)","text":"<p>Signature</p> <pre><code>readonly wheelDirectionCS0: any\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#wheelaxlecs-property","title":"wheelAxleCS (property)","text":"<p>Signature</p> <pre><code>readonly wheelAxleCS: any\n</code></pre>"},{"location":"modules/ammo/impl/gg-3d-raycast-vehicle.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/ammo/impl/bodies/","title":"Modules","text":"Directory table of contents <ul> <li>ammo/impl/bodies/base-ammo-gg-body.ts</li> <li>ammo/impl/bodies/gg-3d-body.ts</li> <li>ammo/impl/bodies/gg-3d-trigger.ts</li> </ul>"},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/","title":"ammo/impl/bodies/base-ammo-gg-body.ts","text":""},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#base-ammo-gg-body-overview","title":"base-ammo-gg-body overviewTable of contents","text":"<ul> <li>utils</li> <li>BaseAmmoGGBody (class)<ul> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>dispose (method)</li> <li>resetMotion (method)</li> <li>name (property)</li> <li>entity (property)</li> </ul> </li> </ul>"},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#baseammoggbody-class","title":"BaseAmmoGGBody (class)","text":"<p>Signature</p> <pre><code>export declare class BaseAmmoGGBody&lt;T&gt; {\n  protected constructor(protected readonly world: Gg3dPhysicsWorld, protected _nativeBody: T)\n}\n</code></pre>"},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>abstract clone(): BaseAmmoGGBody&lt;T&gt;;\n</code></pre>"},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>abstract addToWorld(world: Gg3dPhysicsWorld): void;\n</code></pre>"},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>abstract removeFromWorld(world: Gg3dPhysicsWorld): void;\n</code></pre>"},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#resetmotion-method","title":"resetMotion (method)","text":"<p>Signature</p> <pre><code>abstract resetMotion(): void;\n</code></pre>"},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#name-property","title":"name (property)","text":"<p>Signature</p> <pre><code>name: string\n</code></pre>"},{"location":"modules/ammo/impl/bodies/base-ammo-gg-body.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-body.ts/","title":"ammo/impl/bodies/gg-3d-body.ts","text":""},{"location":"modules/ammo/impl/bodies/gg-3d-body.ts/#gg-3d-body-overview","title":"gg-3d-body overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dBody (class)<ul> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>resetMotion (method)</li> <li>entity (property)</li> </ul> </li> </ul>"},{"location":"modules/ammo/impl/bodies/gg-3d-body.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/impl/bodies/gg-3d-body.ts/#gg3dbody-class","title":"Gg3dBody (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dBody {\n  constructor(protected readonly world: Gg3dPhysicsWorld, protected _nativeBody: Ammo.btRigidBody)\n}\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-body.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): Gg3dBody\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-body.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg3dPhysicsWorld): void\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-body.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg3dPhysicsWorld): void\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-body.ts/#resetmotion-method","title":"resetMotion (method)","text":"<p>Signature</p> <pre><code>resetMotion(): void\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-body.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/","title":"ammo/impl/bodies/gg-3d-trigger.ts","text":""},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#gg-3d-trigger-overview","title":"gg-3d-trigger overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dTrigger (class)<ul> <li>checkOverlaps (method)</li> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>dispose (method)</li> <li>resetMotion (method)</li> <li>entity (property)</li> <li>onEnter$ (property)</li> <li>onLeft$ (property)</li> <li>overlaps (property)</li> </ul> </li> </ul>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#utils","title":"utils","text":""},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#gg3dtrigger-class","title":"Gg3dTrigger (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dTrigger {\n  constructor(protected readonly world: Gg3dPhysicsWorld, protected _nativeBody: Ammo.btPairCachingGhostObject)\n}\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#checkoverlaps-method","title":"checkOverlaps (method)","text":"<p>Signature</p> <pre><code>checkOverlaps(): void\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): Gg3dTrigger\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg3dPhysicsWorld)\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg3dPhysicsWorld): void\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#resetmotion-method","title":"resetMotion (method)","text":"<p>Signature</p> <pre><code>resetMotion(): void\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#onenter-property","title":"onEnter$ (property)","text":"<p>Signature</p> <pre><code>readonly onEnter$: any\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#onleft-property","title":"onLeft$ (property)","text":"<p>Signature</p> <pre><code>readonly onLeft$: any\n</code></pre>"},{"location":"modules/ammo/impl/bodies/gg-3d-trigger.ts/#overlaps-property","title":"overlaps (property)","text":"<p>Signature</p> <pre><code>readonly overlaps: any\n</code></pre>"},{"location":"modules/core/","title":"Modules","text":"Directory table of contents <ul> <li>core/2d</li> <li>core/3d</li> <li>core/base</li> </ul>"},{"location":"modules/core/2d/","title":"Modules","text":"Directory table of contents <ul> <li>core/2d/entities</li> <li>core/2d/factories.ts</li> <li>core/2d/gg-2d-world.ts</li> <li>core/2d/interfaces.ts</li> <li>core/2d/models</li> </ul>"},{"location":"modules/core/2d/factories.ts/","title":"core/2d/factories.ts","text":""},{"location":"modules/core/2d/factories.ts/#factories-overview","title":"factories overviewTable of contents","text":"<ul> <li>utils</li> <li>IGg2dBodyFactory (interface)</li> <li>IGg2dObjectFactory (class)<ul> <li>createPrimitive (method)</li> <li>createSquare (method)</li> <li>createCircle (method)</li> </ul> </li> </ul>"},{"location":"modules/core/2d/factories.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/factories.ts/#igg2dbodyfactory-interface","title":"IGg2dBodyFactory (interface)","text":"<p>Signature</p> <pre><code>export interface IGg2dBodyFactory&lt;T extends IGg2dBody = IGg2dBody, K extends IGg2dTrigger = IGg2dTrigger&gt; {\n  createRigidBody(descriptor: BodyShape2DDescriptor, transform?: { position?: Point2; rotation?: number }): T\n  createTrigger(descriptor: Shape2DDescriptor, transform?: { position?: Point2; rotation?: number }): K\n}\n</code></pre>"},{"location":"modules/core/2d/factories.ts/#igg2dobjectfactory-class","title":"IGg2dObjectFactory (class)","text":"<p>Signature</p> <pre><code>export declare class IGg2dObjectFactory&lt;T&gt;\n</code></pre>"},{"location":"modules/core/2d/factories.ts/#createprimitive-method","title":"createPrimitive (method)","text":"<p>Signature</p> <pre><code>abstract createPrimitive(descriptor: Shape2DDescriptor): T;\n</code></pre>"},{"location":"modules/core/2d/factories.ts/#createsquare-method","title":"createSquare (method)","text":"<p>Signature</p> <pre><code>createSquare(dimensions: Point2): T\n</code></pre>"},{"location":"modules/core/2d/factories.ts/#createcircle-method","title":"createCircle (method)","text":"<p>Signature</p> <pre><code>createCircle(radius: number): T\n</code></pre>"},{"location":"modules/core/2d/gg-2d-world.ts/","title":"core/2d/gg-2d-world.ts","text":""},{"location":"modules/core/2d/gg-2d-world.ts/#gg-2d-world-overview","title":"gg-2d-world overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dWorld (class)<ul> <li>addPrimitiveRigidBody (method)</li> </ul> </li> </ul>"},{"location":"modules/core/2d/gg-2d-world.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/gg-2d-world.ts/#gg2dworld-class","title":"Gg2dWorld (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dWorld&lt;V, P&gt; {\n  constructor(\n    public readonly visualScene: V,\n    public readonly physicsWorld: P,\n    protected readonly consoleEnabled: boolean = false\n  )\n}\n</code></pre>"},{"location":"modules/core/2d/gg-2d-world.ts/#addprimitiverigidbody-method","title":"addPrimitiveRigidBody (method)","text":"<p>Signature</p> <pre><code>addPrimitiveRigidBody(\n    descr: BodyShape2DDescriptor,\n    position: Point2 = {\n      x: 0,\n      y: 0,\n    },\n    rotation: number = 0,\n  ): Gg2dEntity\n</code></pre>"},{"location":"modules/core/2d/interfaces.ts/","title":"core/2d/interfaces.ts","text":""},{"location":"modules/core/2d/interfaces.ts/#interfaces-overview","title":"interfaces overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dRenderer (class)</li> <li>IGg2dBody (interface)</li> <li>IGg2dObject (interface)</li> <li>IGg2dPhysicsWorld (interface)</li> <li>IGg2dTrigger (interface)</li> <li>IGg2dVisualScene (interface)</li> </ul>"},{"location":"modules/core/2d/interfaces.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/interfaces.ts/#gg2drenderer-class","title":"Gg2dRenderer (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dRenderer\n</code></pre>"},{"location":"modules/core/2d/interfaces.ts/#igg2dbody-interface","title":"IGg2dBody (interface)","text":"<p>Signature</p> <pre><code>export interface IGg2dBody extends GgBody&lt;Point2, number&gt; {}\n</code></pre>"},{"location":"modules/core/2d/interfaces.ts/#igg2dobject-interface","title":"IGg2dObject (interface)","text":"<p>Signature</p> <pre><code>export interface IGg2dObject extends GgObject&lt;Point2, number&gt; {}\n</code></pre>"},{"location":"modules/core/2d/interfaces.ts/#igg2dphysicsworld-interface","title":"IGg2dPhysicsWorld (interface)","text":"<p>Signature</p> <pre><code>export interface IGg2dPhysicsWorld extends GgPhysicsWorld&lt;Point2, number&gt; {\n  readonly factory: IGg2dBodyFactory\n}\n</code></pre>"},{"location":"modules/core/2d/interfaces.ts/#igg2dtrigger-interface","title":"IGg2dTrigger (interface)","text":"<p>Signature</p> <pre><code>export interface IGg2dTrigger extends GgTrigger&lt;Point2, number&gt; {\n</code></pre>"},{"location":"modules/core/2d/interfaces.ts/#igg2dvisualscene-interface","title":"IGg2dVisualScene (interface)","text":"<p>Signature</p> <pre><code>export interface IGg2dVisualScene extends GgVisualScene&lt;Point2, number&gt; {\n  readonly factory: IGg2dObjectFactory\n}\n</code></pre>"},{"location":"modules/core/2d/entities/","title":"Modules","text":"Directory table of contents <ul> <li>core/2d/entities/controllers</li> <li>core/2d/entities/gg-2d-entity.ts</li> <li>core/2d/entities/gg-2d-trigger.entity.ts</li> <li>core/2d/entities/gg-positionable-2d-entity.ts</li> </ul>"},{"location":"modules/core/2d/entities/gg-2d-entity.ts/","title":"core/2d/entities/gg-2d-entity.ts","text":""},{"location":"modules/core/2d/entities/gg-2d-entity.ts/#gg-2d-entity-overview","title":"gg-2d-entity overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dEntity (class)<ul> <li>runTransformBinding (method)</li> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>dispose (method)</li> <li>tickOrder (property)</li> </ul> </li> </ul>"},{"location":"modules/core/2d/entities/gg-2d-entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/entities/gg-2d-entity.ts/#gg2dentity-class","title":"Gg2dEntity (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dEntity {\n  constructor(public readonly object2D: IGg2dObject | null, public readonly objectBody: IGg2dBody | null)\n}\n</code></pre>"},{"location":"modules/core/2d/entities/gg-2d-entity.ts/#runtransformbinding-method","title":"runTransformBinding (method)","text":"<p>Synchronize physics body transform with entity (and object2d if defined)</p> <p>Signature</p> <pre><code>protected runTransformBinding(objectBody: IGg2dBody, object2D: IGg2dObject | null): void\n</code></pre>"},{"location":"modules/core/2d/entities/gg-2d-entity.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: Gg2dWorld)\n</code></pre>"},{"location":"modules/core/2d/entities/gg-2d-entity.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>onRemoved()\n</code></pre>"},{"location":"modules/core/2d/entities/gg-2d-entity.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/core/2d/entities/gg-2d-entity.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: GGTickOrder.OBJECTS_BINDING\n</code></pre>"},{"location":"modules/core/2d/entities/gg-2d-trigger.entity.ts/","title":"core/2d/entities/gg-2d-trigger.entity.ts","text":""},{"location":"modules/core/2d/entities/gg-2d-trigger.entity.ts/#gg-2d-triggerentity-overview","title":"gg-2d-trigger.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dTriggerEntity (class)</li> </ul>"},{"location":"modules/core/2d/entities/gg-2d-trigger.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/entities/gg-2d-trigger.entity.ts/#gg2dtriggerentity-class","title":"Gg2dTriggerEntity (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dTriggerEntity {\n  constructor(public readonly objectBody: IGg2dTrigger)\n}\n</code></pre>"},{"location":"modules/core/2d/entities/gg-positionable-2d-entity.ts/","title":"core/2d/entities/gg-positionable-2d-entity.ts","text":""},{"location":"modules/core/2d/entities/gg-positionable-2d-entity.ts/#gg-positionable-2d-entity-overview","title":"gg-positionable-2d-entity overviewTable of contents","text":"<ul> <li>utils</li> <li>GgPositionable2dEntity (class)<ul> <li>getDefaultPosition (method)</li> <li>getDefaultRotation (method)</li> <li>getDefaultScale (method)</li> </ul> </li> </ul>"},{"location":"modules/core/2d/entities/gg-positionable-2d-entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/entities/gg-positionable-2d-entity.ts/#ggpositionable2dentity-class","title":"GgPositionable2dEntity (class)","text":"<p>Signature</p> <pre><code>export declare class GgPositionable2dEntity\n</code></pre>"},{"location":"modules/core/2d/entities/gg-positionable-2d-entity.ts/#getdefaultposition-method","title":"getDefaultPosition (method)","text":"<p>Signature</p> <pre><code>getDefaultPosition(): Point2\n</code></pre>"},{"location":"modules/core/2d/entities/gg-positionable-2d-entity.ts/#getdefaultrotation-method","title":"getDefaultRotation (method)","text":"<p>Signature</p> <pre><code>getDefaultRotation(): number\n</code></pre>"},{"location":"modules/core/2d/entities/gg-positionable-2d-entity.ts/#getdefaultscale-method","title":"getDefaultScale (method)","text":"<p>Signature</p> <pre><code>getDefaultScale(): Point2\n</code></pre>"},{"location":"modules/core/2d/entities/controllers/","title":"Modules","text":"Directory table of contents <ul> <li>core/2d/entities/controllers/entity-2d-positioning.animator.ts</li> </ul>"},{"location":"modules/core/2d/entities/controllers/entity-2d-positioning.animator.ts/","title":"core/2d/entities/controllers/entity-2d-positioning.animator.ts","text":""},{"location":"modules/core/2d/entities/controllers/entity-2d-positioning.animator.ts/#entity-2d-positioninganimator-overview","title":"entity-2d-positioning.animator overviewTable of contents","text":"<ul> <li>utils</li> <li>Entity2dPositioningAnimator (class)<ul> <li>onSpawned (method)</li> <li>applyPositioning (method)</li> </ul> </li> </ul>"},{"location":"modules/core/2d/entities/controllers/entity-2d-positioning.animator.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/entities/controllers/entity-2d-positioning.animator.ts/#entity2dpositioninganimator-class","title":"Entity2dPositioningAnimator (class)","text":"<p>Signature</p> <pre><code>export declare class Entity2dPositioningAnimator&lt;T&gt; {\n  constructor(public entity: T, protected _animationFunction: AnimationFunction&lt;Positioning2d&gt;)\n}\n</code></pre>"},{"location":"modules/core/2d/entities/controllers/entity-2d-positioning.animator.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: Gg2dWorld)\n</code></pre>"},{"location":"modules/core/2d/entities/controllers/entity-2d-positioning.animator.ts/#applypositioning-method","title":"applyPositioning (method)","text":"<p>Signature</p> <pre><code>protected applyPositioning(value: Positioning2d)\n</code></pre>"},{"location":"modules/core/2d/models/","title":"Modules","text":"Directory table of contents <ul> <li>core/2d/models/body-options.ts</li> <li>core/2d/models/shapes.ts</li> </ul>"},{"location":"modules/core/2d/models/body-options.ts/","title":"core/2d/models/body-options.ts","text":""},{"location":"modules/core/2d/models/body-options.ts/#body-options-overview","title":"body-options overviewTable of contents","text":"<ul> <li>utils</li> <li>Body2DOptions (interface)</li> </ul>"},{"location":"modules/core/2d/models/body-options.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/models/body-options.ts/#body2doptions-interface","title":"Body2DOptions (interface)","text":"<p>Signature</p> <pre><code>export interface Body2DOptions extends BodyOptions {}\n</code></pre>"},{"location":"modules/core/2d/models/shapes.ts/","title":"core/2d/models/shapes.ts","text":""},{"location":"modules/core/2d/models/shapes.ts/#shapes-overview","title":"shapes overviewTable of contents","text":"<ul> <li>utils</li> <li>BodyShape2DDescriptor (type alias)</li> <li>Shape2DDescriptor (type alias)</li> </ul>"},{"location":"modules/core/2d/models/shapes.ts/#utils","title":"utils","text":""},{"location":"modules/core/2d/models/shapes.ts/#bodyshape2ddescriptor-type-alias","title":"BodyShape2DDescriptor (type alias)","text":"<p>Signature</p> <pre><code>export type BodyShape2DDescriptor = { shape: Shape2DDescriptor; body: Partial&lt;Body2DOptions&gt; }\n</code></pre>"},{"location":"modules/core/2d/models/shapes.ts/#shape2ddescriptor-type-alias","title":"Shape2DDescriptor (type alias)","text":"<p>Signature</p> <pre><code>export type Shape2DDescriptor = { shape: 'SQUARE'; dimensions: Point2 } | { shape: 'CIRCLE'; radius: number }\n</code></pre>"},{"location":"modules/core/3d/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/entities</li> <li>core/3d/factories.ts</li> <li>core/3d/gg-3d-world.ts</li> <li>core/3d/interfaces.ts</li> <li>core/3d/loader.ts</li> <li>core/3d/models</li> </ul>"},{"location":"modules/core/3d/factories.ts/","title":"core/3d/factories.ts","text":""},{"location":"modules/core/3d/factories.ts/#factories-overview","title":"factories overviewTable of contents","text":"<ul> <li>utils</li> <li>IGg3dBodyFactory (interface)</li> <li>IGg3dObjectFactory (class)<ul> <li>createPrimitive (method)</li> <li>createBox (method)</li> <li>createCapsule (method)</li> <li>createCylinder (method)</li> <li>createCone (method)</li> <li>createSphere (method)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/factories.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/factories.ts/#igg3dbodyfactory-interface","title":"IGg3dBodyFactory (interface)","text":"<p>Signature</p> <pre><code>export interface IGg3dBodyFactory&lt;T extends IGg3dBody = IGg3dBody, K extends IGg3dTrigger = IGg3dTrigger&gt; {\n  createRigidBody(descriptor: BodyShape3DDescriptor, transform?: { position?: Point3; rotation?: Point4 }): T\n  createTrigger(descriptor: Shape3DDescriptor, transform?: { position?: Point3; rotation?: Point4 }): K\n}\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#igg3dobjectfactory-class","title":"IGg3dObjectFactory (class)","text":"<p>Signature</p> <pre><code>export declare class IGg3dObjectFactory&lt;T&gt;\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#createprimitive-method","title":"createPrimitive (method)","text":"<p>Signature</p> <pre><code>abstract createPrimitive(descriptor: Shape3DDescriptor, material?: any): T;\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#createbox-method","title":"createBox (method)","text":"<p>Signature</p> <pre><code>createBox(dimensions: Point3, material?: any): T\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#createcapsule-method","title":"createCapsule (method)","text":"<p>Signature</p> <pre><code>createCapsule(radius: number, centersDistance: number, material?: any): T\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#createcylinder-method","title":"createCylinder (method)","text":"<p>Signature</p> <pre><code>createCylinder(radius: number, height: number, material?: any): T\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#createcone-method","title":"createCone (method)","text":"<p>Signature</p> <pre><code>createCone(radius: number, height: number, material?: any): T\n</code></pre>"},{"location":"modules/core/3d/factories.ts/#createsphere-method","title":"createSphere (method)","text":"<p>Signature</p> <pre><code>createSphere(radius: number): T\n</code></pre>"},{"location":"modules/core/3d/gg-3d-world.ts/","title":"core/3d/gg-3d-world.ts","text":""},{"location":"modules/core/3d/gg-3d-world.ts/#gg-3d-world-overview","title":"gg-3d-world overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dWorld (class)<ul> <li>addPrimitiveRigidBody (method)</li> <li>loader (property)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/gg-3d-world.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/gg-3d-world.ts/#gg3dworld-class","title":"Gg3dWorld (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dWorld&lt;V, P&gt; {\n  constructor(\n    public readonly visualScene: V,\n    public readonly physicsWorld: P,\n    protected readonly consoleEnabled: boolean = false\n  )\n}\n</code></pre>"},{"location":"modules/core/3d/gg-3d-world.ts/#addprimitiverigidbody-method","title":"addPrimitiveRigidBody (method)","text":"<p>Signature</p> <pre><code>addPrimitiveRigidBody(\n    descr: BodyShape3DDescriptor,\n    position: Point3 = {\n      x: 0,\n      y: 0,\n      z: 0,\n    },\n    rotation: Point4 = { x: 0, y: 0, z: 0, w: 1 },\n  ): Gg3dEntity\n</code></pre>"},{"location":"modules/core/3d/gg-3d-world.ts/#loader-property","title":"loader (property)","text":"<p>Signature</p> <pre><code>readonly loader: Gg3dLoader\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/","title":"core/3d/interfaces.ts","text":""},{"location":"modules/core/3d/interfaces.ts/#interfaces-overview","title":"interfaces overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dRenderer (class)<ul> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>camera (property)</li> </ul> </li> <li>IGg3dBody (interface)</li> <li>IGg3dBodyLoader (class)<ul> <li>loadFromGgGlb (method)</li> </ul> </li> <li>IGg3dCamera (interface)</li> <li>IGg3dObject (interface)</li> <li>IGg3dObjectLoader (interface)</li> <li>IGg3dPhysicsWorld (interface)</li> <li>IGg3dRaycastVehicle (interface)</li> <li>IGg3dTrigger (interface)</li> <li>IGg3dVisualScene (interface)</li> </ul>"},{"location":"modules/core/3d/interfaces.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/interfaces.ts/#gg3drenderer-class","title":"Gg3dRenderer (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dRenderer\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>public onSpawned(world: GgWorld&lt;any, any&gt;)\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>onRemoved()\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#camera-property","title":"camera (property)","text":"<p>Signature</p> <pre><code>readonly camera: Gg3dCameraEntity&lt;IGg3dCamera&gt;\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#igg3dbody-interface","title":"IGg3dBody (interface)","text":"<p>Signature</p> <pre><code>export interface IGg3dBody extends GgBody&lt;Point3, Point4&gt; {}\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#igg3dbodyloader-class","title":"IGg3dBodyLoader (class)","text":"<p>Signature</p> <pre><code>export declare class IGg3dBodyLoader {\n  protected constructor(protected readonly world: IGg3dPhysicsWorld)\n}\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#loadfromggglb-method","title":"loadFromGgGlb (method)","text":"<p>Signature</p> <pre><code>async loadFromGgGlb(glbFile: ArrayBuffer, meta: GgMeta): Promise&lt;IGg3dBody[]&gt;\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#igg3dcamera-interface","title":"IGg3dCamera (interface)","text":"<p>Signature</p> <pre><code>export interface IGg3dCamera extends IGg3dObject {\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#igg3dobject-interface","title":"IGg3dObject (interface)","text":"<p>Signature</p> <pre><code>export interface IGg3dObject extends GgObject&lt;Point3, Point4&gt; {}\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#igg3dobjectloader-interface","title":"IGg3dObjectLoader (interface)","text":"<p>Signature</p> <pre><code>export interface IGg3dObjectLoader {\n  loadFromGgGlb(glbFile: ArrayBuffer, meta: GgMeta): Promise&lt;IGg3dObject | null&gt;\n}\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#igg3dphysicsworld-interface","title":"IGg3dPhysicsWorld (interface)","text":"<p>Signature</p> <pre><code>export interface IGg3dPhysicsWorld extends GgPhysicsWorld&lt;Point3, Point4&gt; {\n  readonly factory: IGg3dBodyFactory\n  readonly loader: IGg3dBodyLoader\n}\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#igg3draycastvehicle-interface","title":"IGg3dRaycastVehicle (interface)","text":"<p>Signature</p> <pre><code>export interface IGg3dRaycastVehicle extends IGg3dBody {\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#igg3dtrigger-interface","title":"IGg3dTrigger (interface)","text":"<p>Signature</p> <pre><code>export interface IGg3dTrigger extends GgTrigger&lt;Point3, Point4&gt; {\n</code></pre>"},{"location":"modules/core/3d/interfaces.ts/#igg3dvisualscene-interface","title":"IGg3dVisualScene (interface)","text":"<p>Signature</p> <pre><code>export interface IGg3dVisualScene extends GgVisualScene&lt;Point3, Point4&gt; {\n  readonly factory: IGg3dObjectFactory\n  readonly loader: IGg3dObjectLoader\n}\n</code></pre>"},{"location":"modules/core/3d/loader.ts/","title":"core/3d/loader.ts","text":""},{"location":"modules/core/3d/loader.ts/#loader-overview","title":"loader overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dLoader (class)<ul> <li>loadGgGlbFiles (method)</li> <li>loadGgGlbResources (method)</li> <li>loadGgGlb (method)</li> <li>filesCache (property)</li> <li>loadResultCache (property)</li> </ul> </li> <li>LoadOptions (type alias)</li> <li>LoadResourcesResult (type alias)</li> <li>LoadResult (type alias)</li> <li>LoadResultWithProps (type alias)</li> </ul>"},{"location":"modules/core/3d/loader.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/loader.ts/#gg3dloader-class","title":"Gg3dLoader (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dLoader {\n  constructor(protected readonly world: Gg3dWorld)\n}\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadggglbfiles-method","title":"loadGgGlbFiles (method)","text":"<p>Signature</p> <pre><code>public async loadGgGlbFiles(path: string, useCache: boolean = false): Promise&lt;[ArrayBuffer, GgMeta]&gt;\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadggglbresources-method","title":"loadGgGlbResources (method)","text":"<p>Signature</p> <pre><code>public async loadGgGlbResources(\n    path: string,\n    cachingStrategy: CachingStrategy = CachingStrategy.Nothing,\n  ): Promise&lt;LoadResourcesResult&gt;\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadggglb-method","title":"loadGgGlb (method)","text":"<p>Signature</p> <pre><code>public async loadGgGlb(\n    path: string,\n    options: Partial&lt;LoadOptions&gt; = defaultLoadOptions,\n  ): Promise&lt;LoadResultWithProps&gt;\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#filescache-property","title":"filesCache (property)","text":"<p>Signature</p> <pre><code>readonly filesCache: any\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadresultcache-property","title":"loadResultCache (property)","text":"<p>Signature</p> <pre><code>readonly loadResultCache: any\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadoptions-type-alias","title":"LoadOptions (type alias)","text":"<p>Signature</p> <pre><code>export type LoadOptions = {\n  // whether to cache anything\n  // \"Nothing\" does not cache anything\n  // \"Files\" caches GLB+Meta file contents\n  // \"Entities\" clones and saves parsed from GLB+Meta objects and bodies\n  cachingStrategy: CachingStrategy\n  // initial position\n  position: Point3\n  // initial rotation\n  rotation: Point4\n  // process dummies with flag is_prop\n  loadProps: boolean\n  // path where to find prop scenes\n  propsPath?: string\n}\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadresourcesresult-type-alias","title":"LoadResourcesResult (type alias)","text":"<p>Signature</p> <pre><code>export type LoadResourcesResult = {\n  resources: { object3D: IGg3dObject | null; body: IGg3dBody | null }[]\n  meta: GgMeta\n}\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadresult-type-alias","title":"LoadResult (type alias)","text":"<p>Signature</p> <pre><code>export type LoadResult = {\n  entities: Gg3dEntity[]\n  meta: GgMeta\n}\n</code></pre>"},{"location":"modules/core/3d/loader.ts/#loadresultwithprops-type-alias","title":"LoadResultWithProps (type alias)","text":"<p>Signature</p> <pre><code>export type LoadResultWithProps = LoadResult &amp; { props?: LoadResult[] }\n</code></pre>"},{"location":"modules/core/3d/entities/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/entities/controllers</li> <li>core/3d/entities/gg-3d-camera.entity.ts</li> <li>core/3d/entities/gg-3d-entity.ts</li> <li>core/3d/entities/gg-3d-map-graph.entity.ts</li> <li>core/3d/entities/gg-3d-raycast-vehicle.entity.ts</li> <li>core/3d/entities/gg-3d-trigger.entity.ts</li> <li>core/3d/entities/gg-positionable-3d-entity.ts</li> </ul>"},{"location":"modules/core/3d/entities/gg-3d-camera.entity.ts/","title":"core/3d/entities/gg-3d-camera.entity.ts","text":""},{"location":"modules/core/3d/entities/gg-3d-camera.entity.ts/#gg-3d-cameraentity-overview","title":"gg-3d-camera.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dCameraEntity (class)</li> </ul>"},{"location":"modules/core/3d/entities/gg-3d-camera.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/gg-3d-camera.entity.ts/#gg3dcameraentity-class","title":"Gg3dCameraEntity (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dCameraEntity&lt;T&gt; {\n  constructor(public readonly object3D: T, public readonly objectBody: IGg3dBody | null = null)\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-entity.ts/","title":"core/3d/entities/gg-3d-entity.ts","text":""},{"location":"modules/core/3d/entities/gg-3d-entity.ts/#gg-3d-entity-overview","title":"gg-3d-entity overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dEntity (class)<ul> <li>runTransformBinding (method)</li> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>dispose (method)</li> <li>tickOrder (property)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/entities/gg-3d-entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/gg-3d-entity.ts/#gg3dentity-class","title":"Gg3dEntity (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dEntity {\n  constructor(public readonly object3D: IGg3dObject | null, public readonly objectBody: IGg3dBody | null = null)\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-entity.ts/#runtransformbinding-method","title":"runTransformBinding (method)","text":"<p>Synchronize physics body transform with entity (and mesh if defined)</p> <p>Signature</p> <pre><code>protected runTransformBinding(objectBody: IGg3dBody, object3D: IGg3dObject | null): void\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-entity.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: Gg3dWorld)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-entity.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>onRemoved()\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-entity.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-entity.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: GGTickOrder.OBJECTS_BINDING\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/","title":"core/3d/entities/gg-3d-map-graph.entity.ts","text":""},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#gg-3d-map-graphentity-overview","title":"gg-3d-map-graph.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dMapGraphEntity (class)<ul> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>loadChunk (method)</li> <li>disposeChunk (method)</li> <li>tickOrder (property)</li> <li>loaderCursorEntity$ (property)</li> <li>loaded (property)</li> <li>_chunkLoaded$ (property)</li> <li>_world (property)</li> <li>mapGraphNodes (property)</li> <li>options (property)</li> </ul> </li> <li>Gg3dMapGraphEntityOptions (type alias)</li> <li>MapGraph (class)<ul> <li>fromMapArray (static method)</li> <li>fromMapSquareGrid (static method)</li> <li>getNearestDummy (method)</li> <li>nodes (method)</li> </ul> </li> <li>MapGraphNodeType (type alias)</li> </ul>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#gg3dmapgraphentity-class","title":"Gg3dMapGraphEntity (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dMapGraphEntity {\n  constructor(public readonly mapGraph: MapGraph, options: Partial&lt;Gg3dMapGraphEntityOptions&gt; = {})\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: Gg3dWorld)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>onRemoved()\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#loadchunk-method","title":"loadChunk (method)","text":"<p>Signature</p> <pre><code>protected async loadChunk(node: MapGraphNodeType): Promise&lt;[Gg3dEntity[], LoadResultWithProps]&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#disposechunk-method","title":"disposeChunk (method)","text":"<p>Signature</p> <pre><code>protected disposeChunk(node: MapGraphNodeType)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: GGTickOrder.POST_RENDERING\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#loadercursorentity-property","title":"loaderCursorEntity$ (property)","text":"<p>Signature</p> <pre><code>readonly loaderCursorEntity$: any\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#loaded-property","title":"loaded (property)","text":"<p>Signature</p> <pre><code>readonly loaded: any\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#_chunkloaded-property","title":"_chunkLoaded$ (property)","text":"<p>Signature</p> <pre><code>_chunkLoaded$: any\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#_world-property","title":"_world (property)","text":"<p>Signature</p> <pre><code>_world: Gg3dWorld&lt;IGg3dVisualScene, IGg3dPhysicsWorld&gt; | null\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#mapgraphnodes-property","title":"mapGraphNodes (property)","text":"<p>Signature</p> <pre><code>readonly mapGraphNodes: MapGraph[]\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#options-property","title":"options (property)","text":"<p>Signature</p> <pre><code>readonly options: Gg3dMapGraphEntityOptions\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#gg3dmapgraphentityoptions-type-alias","title":"Gg3dMapGraphEntityOptions (type alias)","text":"<p>Signature</p> <pre><code>export type Gg3dMapGraphEntityOptions = {\n  // depth in tree to load. 0 means load only the nearest node, 1 means nearest + all of it's neighbours etc.\n  loadDepth: number\n  // additional depth, means unload delay. Nodes with this depth won't load, but if already loaded, will not be destroyed\n  inertia: number\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#mapgraph-class","title":"MapGraph (class)","text":"<p>Signature</p> <pre><code>export declare class MapGraph\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#frommaparray-static-method","title":"fromMapArray (static method)","text":"<p>Creates a new MapGraph instance from an array of elements, where each element in the array is a node in the graph. The first element of the array is used as the root node of the graph.</p> <p>Signature</p> <pre><code>static fromMapArray(array: MapGraphNodeType[], closed: boolean = false): MapGraph\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#frommapsquaregrid-static-method","title":"fromMapSquareGrid (static method)","text":"<p>Creates a new MapGraph instance from a two-dimensional square grid of elements, where each element in the grid is a node in the graph. The top-left element of the grid is used as the root node of the graph. The nodes in the graph are created in the same order as the elements in the grid, from left to right and then from top to bottom.</p> <p>Signature</p> <pre><code>static fromMapSquareGrid(grid: MapGraphNodeType[][]): MapGraph\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#getnearestdummy-method","title":"getNearestDummy (method)","text":"<p>Signature</p> <pre><code>public getNearestDummy(thisNodes: Graph&lt;MapGraphNodeType&gt;[], cursor: Point3): Graph&lt;MapGraphNodeType&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#nodes-method","title":"nodes (method)","text":"<p>Signature</p> <pre><code>nodes(): MapGraph[]\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-map-graph.entity.ts/#mapgraphnodetype-type-alias","title":"MapGraphNodeType (type alias)","text":"<p>Signature</p> <pre><code>export type MapGraphNodeType = {\n  path: string\n  position: Point3\n  rotation?: Point4\n  loadOptions: Partial&lt;Omit&lt;LoadOptions, 'position' | 'rotation'&gt;&gt;\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/","title":"core/3d/entities/gg-3d-raycast-vehicle.entity.ts","text":""},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#gg-3d-raycast-vehicleentity-overview","title":"gg-3d-raycast-vehicle.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>CarProperties (type alias)</li> <li>Gg3dRaycastVehicleEntity (class)<ul> <li>getSpeed (method)</li> <li>calculateRpmFromCarSpeed (method)</li> <li>getDisplaySpeed (method)</li> <li>getMaxStableSteerVal (method)</li> <li>setTailLightsOn (method)</li> <li>setSteeringValue (method)</li> <li>onSpawned (method)</li> <li>runTransformBinding (method)</li> <li>updateEngine (method)</li> <li>resetTo (method)</li> <li>setXAxisControlValue (method)</li> <li>setYAxisControlValue (method)</li> <li>wheels (property)</li> <li>wheelLocalRotation (property)</li> <li>wheelLocalTranslation (property)</li> <li>frontWheelsIndices (property)</li> <li>tractionWheelIndices (property)</li> <li>tractionWheelRadius (property)</li> <li>_rpm$ (property)</li> <li>_acceleration$ (property)</li> <li>brake$ (property)</li> </ul> </li> <li>SuspensionOptions (type alias)</li> <li>WheelOptions (type alias)</li> </ul>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#carproperties-type-alias","title":"CarProperties (type alias)","text":"<p>Signature</p> <pre><code>export type CarProperties = {\n  typeOfDrive: 'RWD' | 'FWD' | '4WD' // FIXME 4WD car won't brake\n  wheelOptions: WheelOptions[]\n  mpsToRpmFactor?: number\n  engine: {\n    minRpm: number\n    maxRpm: number\n    torques: { rpm: number; torque: number }[]\n    maxRpmIncreasePerSecond: number\n    maxRpmDecreasePerSecond: number\n  }\n  transmission: {\n    isAuto: boolean\n    reverseGearRatio: number\n    gearRatios: number[]\n    drivelineEfficiency: number\n    finalDriveRatio: number // differential\n    upShifts: number[]\n  }\n  suspension: SuspensionOptions\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#gg3draycastvehicleentity-class","title":"Gg3dRaycastVehicleEntity (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dRaycastVehicleEntity {\n  constructor(\n    public readonly carProperties: CarProperties,\n    public readonly chassis3D: IGg3dObject | null,\n    public readonly chassisBody: IGg3dRaycastVehicle,\n    public readonly wheelObject: IGg3dObject | null = null,\n    public readonly wheelObjectDirection: AxisDirection3 = 'x'\n  )\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#getspeed-method","title":"getSpeed (method)","text":"<p>Signature</p> <pre><code>public getSpeed(): number\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#calculaterpmfromcarspeed-method","title":"calculateRpmFromCarSpeed (method)","text":"<p>Signature</p> <pre><code>public calculateRpmFromCarSpeed(): number\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#getdisplayspeed-method","title":"getDisplaySpeed (method)","text":"<p>Signature</p> <pre><code>public getDisplaySpeed(units: 'ms' | 'kmh' | 'mph' = 'ms'): number\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#getmaxstablesteerval-method","title":"getMaxStableSteerVal (method)","text":"<p>Signature</p> <pre><code>private getMaxStableSteerVal(): number\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#settaillightson-method","title":"setTailLightsOn (method)","text":"<p>Signature</p> <pre><code>protected setTailLightsOn(value: boolean)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#setsteeringvalue-method","title":"setSteeringValue (method)","text":"<p>Signature</p> <pre><code>protected setSteeringValue(value: number)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: Gg3dWorld)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#runtransformbinding-method","title":"runTransformBinding (method)","text":"<p>Signature</p> <pre><code>protected runTransformBinding(objectBody: IGg3dBody, object3D: IGg3dObject): void\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#updateengine-method","title":"updateEngine (method)","text":"<p>Signature</p> <pre><code>protected updateEngine(delta: number)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#resetto-method","title":"resetTo (method)","text":"<p>Signature</p> <pre><code>public resetTo(options: { position?: Point3; rotation?: Point4 } = {})\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#setxaxiscontrolvalue-method","title":"setXAxisControlValue (method)","text":"<p>Signature</p> <pre><code>public setXAxisControlValue(value: number)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#setyaxiscontrolvalue-method","title":"setYAxisControlValue (method)","text":"<p>Signature</p> <pre><code>public setYAxisControlValue(value: number)\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#wheels-property","title":"wheels (property)","text":"<p>Signature</p> <pre><code>readonly wheels: (GgPositionable3dEntity | null)[]\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#wheellocalrotation-property","title":"wheelLocalRotation (property)","text":"<p>Signature</p> <pre><code>readonly wheelLocalRotation: (Point4 | null)[]\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#wheellocaltranslation-property","title":"wheelLocalTranslation (property)","text":"<p>Signature</p> <pre><code>readonly wheelLocalTranslation: Point3[]\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#frontwheelsindices-property","title":"frontWheelsIndices (property)","text":"<p>Signature</p> <pre><code>readonly frontWheelsIndices: number[]\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#tractionwheelindices-property","title":"tractionWheelIndices (property)","text":"<p>Signature</p> <pre><code>readonly tractionWheelIndices: number[]\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#tractionwheelradius-property","title":"tractionWheelRadius (property)","text":"<p>Signature</p> <pre><code>readonly tractionWheelRadius: number\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#_rpm-property","title":"_rpm$ (property)","text":"<p>Signature</p> <pre><code>readonly _rpm$: any\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#_acceleration-property","title":"_acceleration$ (property)","text":"<p>Signature</p> <pre><code>_acceleration$: any\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#brake-property","title":"brake$ (property)","text":"<p>Signature</p> <pre><code>brake$: any\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#suspensionoptions-type-alias","title":"SuspensionOptions (type alias)","text":"<p>Signature</p> <pre><code>export type SuspensionOptions = {\n  stiffness: number\n  damping: number\n  compression: number\n  restLength: number\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-raycast-vehicle.entity.ts/#wheeloptions-type-alias","title":"WheelOptions (type alias)","text":"<p>Signature</p> <pre><code>export type WheelOptions = {\n  tyre_width: number\n  tyre_radius: number\n  wheelObject?: IGg3dObject\n  wheelObjectDirection?: AxisDirection3\n  isLeft: boolean\n  isFront: boolean\n  position: Point3\n  frictionSlip: number // friction with road\n  rollInfluence: number\n  maxTravel: number\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-3d-trigger.entity.ts/","title":"core/3d/entities/gg-3d-trigger.entity.ts","text":""},{"location":"modules/core/3d/entities/gg-3d-trigger.entity.ts/#gg-3d-triggerentity-overview","title":"gg-3d-trigger.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dTriggerEntity (class)</li> </ul>"},{"location":"modules/core/3d/entities/gg-3d-trigger.entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/gg-3d-trigger.entity.ts/#gg3dtriggerentity-class","title":"Gg3dTriggerEntity (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dTriggerEntity {\n  constructor(public readonly objectBody: IGg3dTrigger)\n}\n</code></pre>"},{"location":"modules/core/3d/entities/gg-positionable-3d-entity.ts/","title":"core/3d/entities/gg-positionable-3d-entity.ts","text":""},{"location":"modules/core/3d/entities/gg-positionable-3d-entity.ts/#gg-positionable-3d-entity-overview","title":"gg-positionable-3d-entity overviewTable of contents","text":"<ul> <li>utils</li> <li>GgPositionable3dEntity (class)<ul> <li>getDefaultPosition (method)</li> <li>getDefaultRotation (method)</li> <li>getDefaultScale (method)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/entities/gg-positionable-3d-entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/gg-positionable-3d-entity.ts/#ggpositionable3dentity-class","title":"GgPositionable3dEntity (class)","text":"<p>Signature</p> <pre><code>export declare class GgPositionable3dEntity\n</code></pre>"},{"location":"modules/core/3d/entities/gg-positionable-3d-entity.ts/#getdefaultposition-method","title":"getDefaultPosition (method)","text":"<p>Signature</p> <pre><code>getDefaultPosition(): Point3\n</code></pre>"},{"location":"modules/core/3d/entities/gg-positionable-3d-entity.ts/#getdefaultrotation-method","title":"getDefaultRotation (method)","text":"<p>Signature</p> <pre><code>getDefaultRotation(): Point4\n</code></pre>"},{"location":"modules/core/3d/entities/gg-positionable-3d-entity.ts/#getdefaultscale-method","title":"getDefaultScale (method)","text":"<p>Signature</p> <pre><code>getDefaultScale(): Point3\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/entities/controllers/animators</li> <li>core/3d/entities/controllers/input</li> </ul>"},{"location":"modules/core/3d/entities/controllers/animators/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/entities/controllers/animators/camera-3d.animator.ts</li> <li>core/3d/entities/controllers/animators/entity-3d-positioning.animator.ts</li> </ul>"},{"location":"modules/core/3d/entities/controllers/animators/camera-3d.animator.ts/","title":"core/3d/entities/controllers/animators/camera-3d.animator.ts","text":""},{"location":"modules/core/3d/entities/controllers/animators/camera-3d.animator.ts/#camera-3danimator-overview","title":"camera-3d.animator overviewTable of contents","text":"<ul> <li>utils</li> <li>Camera3dAnimationArgs (type alias)</li> <li>Camera3dAnimator (class)<ul> <li>onSpawned (method)</li> <li>applyPositioning (method)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/entities/controllers/animators/camera-3d.animator.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/controllers/animators/camera-3d.animator.ts/#camera3danimationargs-type-alias","title":"Camera3dAnimationArgs (type alias)","text":"<p>Signature</p> <pre><code>export type Camera3dAnimationArgs = {\n  position: Point3\n  target: Point3\n  up?: Point3\n  fov?: number\n}\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/animators/camera-3d.animator.ts/#camera3danimator-class","title":"Camera3dAnimator (class)","text":"<p>Signature</p> <pre><code>export declare class Camera3dAnimator {\n  constructor(public entity: Gg3dCameraEntity, protected _animationFunction: AnimationFunction&lt;Camera3dAnimationArgs&gt;)\n}\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/animators/camera-3d.animator.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: Gg3dWorld)\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/animators/camera-3d.animator.ts/#applypositioning-method","title":"applyPositioning (method)","text":"<p>Signature</p> <pre><code>protected applyPositioning(value: Camera3dAnimationArgs)\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/animators/entity-3d-positioning.animator.ts/","title":"core/3d/entities/controllers/animators/entity-3d-positioning.animator.ts","text":""},{"location":"modules/core/3d/entities/controllers/animators/entity-3d-positioning.animator.ts/#entity-3d-positioninganimator-overview","title":"entity-3d-positioning.animator overviewTable of contents","text":"<ul> <li>utils</li> <li>Entity3dPositioningAnimator (class)<ul> <li>onSpawned (method)</li> <li>applyPositioning (method)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/entities/controllers/animators/entity-3d-positioning.animator.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/controllers/animators/entity-3d-positioning.animator.ts/#entity3dpositioninganimator-class","title":"Entity3dPositioningAnimator (class)","text":"<p>Signature</p> <pre><code>export declare class Entity3dPositioningAnimator&lt;T&gt; {\n  constructor(public entity: T, protected _animationFunction: AnimationFunction&lt;Positioning3d&gt;)\n}\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/animators/entity-3d-positioning.animator.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: Gg3dWorld)\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/animators/entity-3d-positioning.animator.ts/#applypositioning-method","title":"applyPositioning (method)","text":"<p>Signature</p> <pre><code>protected applyPositioning(value: Positioning3d)\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/entities/controllers/input/car-keyboard-handling.controller.ts</li> <li>core/3d/entities/controllers/input/free-camera.controller.ts</li> </ul>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/","title":"core/3d/entities/controllers/input/car-keyboard-handling.controller.ts","text":""},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#car-keyboard-handlingcontroller-overview","title":"car-keyboard-handling.controller overviewTable of contents","text":"<ul> <li>utils</li> <li>CarKeyboardControllerOptions (type alias)</li> <li>CarKeyboardHandlingController (class)<ul> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>tickOrder (property)</li> <li>directionsInput (property)</li> <li>x$ (property)</li> <li>y$ (property)</li> <li>lastX (property)</li> <li>switchingGearsEnabled (property)</li> <li>pairTickerPipe (property)</li> </ul> </li> </ul>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#carkeyboardcontrolleroptions-type-alias","title":"CarKeyboardControllerOptions (type alias)","text":"<p>Signature</p> <pre><code>export type CarKeyboardControllerOptions = {\n  keymap: DirectionKeyboardKeymap\n  gearUpDownKeys: [string, string]\n}\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#carkeyboardhandlingcontroller-class","title":"CarKeyboardHandlingController (class)","text":"<p>Signature</p> <pre><code>export declare class CarKeyboardHandlingController {\n  constructor(\n    protected readonly keyboard: KeyboardInput,\n    public car: Gg3dRaycastVehicleEntity | null,\n    protected readonly options: CarKeyboardControllerOptions = { keymap: 'arrows', gearUpDownKeys: ['KeyA', 'KeyZ'] }\n  )\n}\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>async onSpawned(world: GgWorld&lt;any, any&gt;): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>async onRemoved(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: GGTickOrder.INPUT_CONTROLLERS\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#directionsinput-property","title":"directionsInput (property)","text":"<p>Signature</p> <pre><code>readonly directionsInput: DirectionKeyboardInput\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#x-property","title":"x$ (property)","text":"<p>Signature</p> <pre><code>readonly x$: any\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#y-property","title":"y$ (property)","text":"<p>Signature</p> <pre><code>readonly y$: any\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#lastx-property","title":"lastX (property)","text":"<p>Signature</p> <pre><code>lastX: number\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#switchinggearsenabled-property","title":"switchingGearsEnabled (property)","text":"<p>Signature</p> <pre><code>switchingGearsEnabled: boolean\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/car-keyboard-handling.controller.ts/#pairtickerpipe-property","title":"pairTickerPipe (property)","text":"<p>Signature</p> <pre><code>pairTickerPipe: any\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/","title":"core/3d/entities/controllers/input/free-camera.controller.ts","text":""},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/#free-cameracontroller-overview","title":"free-camera.controller overviewTable of contents","text":"<ul> <li>utils</li> <li>FreeCameraController (class)<ul> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>tickOrder (property)</li> <li>mouseInput (property)</li> <li>directionsInput (property)</li> </ul> </li> <li>FreeCameraControllerOptions (type alias)</li> </ul>"},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/#freecameracontroller-class","title":"FreeCameraController (class)","text":"<p>A controller for a free-moving camera.</p> <p>Signature</p> <pre><code>export declare class FreeCameraController {\n  constructor(\n    protected readonly keyboard: KeyboardInput,\n    protected readonly camera: Gg3dCameraEntity,\n    protected readonly options: FreeCameraControllerOptions = {\n      keymap: 'wasd',\n      movementOptions: { speed: 0.5 },\n      mouseOptions: {},\n    }\n  )\n}\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>async onSpawned(world: GgWorld&lt;any, any&gt;): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>async onRemoved(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: GGTickOrder.INPUT_CONTROLLERS\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/#mouseinput-property","title":"mouseInput (property)","text":"<p>The mouse input controller used for camera rotation.</p> <p>Signature</p> <pre><code>readonly mouseInput: MouseInput\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/#directionsinput-property","title":"directionsInput (property)","text":"<p>The keyboard input controller used for camera movement.</p> <p>Signature</p> <pre><code>readonly directionsInput: DirectionKeyboardInput\n</code></pre>"},{"location":"modules/core/3d/entities/controllers/input/free-camera.controller.ts/#freecameracontrolleroptions-type-alias","title":"FreeCameraControllerOptions (type alias)","text":"<p>Options for configuring a FreeCameraInput controller.</p> <p>Signature</p> <pre><code>export type FreeCameraControllerOptions = {\n  /**\n   * A keymap for controlling camera movement, where each key corresponds to a movement direction.\n   */\n  keymap: DirectionKeyboardKeymap\n  /**\n   * Options for configuring camera movement.\n   */\n  movementOptions: {\n    /**\n     * The speed of camera movement.\n     */\n    speed: number\n  }\n  /**\n   * Options for configuring mouse input.\n   */\n  mouseOptions: MouseInputOptions\n}\n</code></pre>"},{"location":"modules/core/3d/models/","title":"Modules","text":"Directory table of contents <ul> <li>core/3d/models/body-options.ts</li> <li>core/3d/models/gg-meta.ts</li> <li>core/3d/models/shapes.ts</li> </ul>"},{"location":"modules/core/3d/models/body-options.ts/","title":"core/3d/models/body-options.ts","text":""},{"location":"modules/core/3d/models/body-options.ts/#body-options-overview","title":"body-options overviewTable of contents","text":"<ul> <li>utils</li> <li>Body3DOptions (interface)</li> </ul>"},{"location":"modules/core/3d/models/body-options.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/models/body-options.ts/#body3doptions-interface","title":"Body3DOptions (interface)","text":"<p>Signature</p> <pre><code>export interface Body3DOptions extends BodyOptions {}\n</code></pre>"},{"location":"modules/core/3d/models/gg-meta.ts/","title":"core/3d/models/gg-meta.ts","text":""},{"location":"modules/core/3d/models/gg-meta.ts/#gg-meta-overview","title":"gg-meta overviewTable of contents","text":"<ul> <li>utils</li> <li>GgCurve (type alias)</li> <li>GgDummy (type alias)</li> <li>GgMeta (type alias)</li> <li>GgRigidBody (type alias)</li> </ul>"},{"location":"modules/core/3d/models/gg-meta.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/models/gg-meta.ts/#ggcurve-type-alias","title":"GgCurve (type alias)","text":"<p>Signature</p> <pre><code>export type GgCurve = { name: string; cyclic: boolean; points: Point3[] } &amp; any\n</code></pre>"},{"location":"modules/core/3d/models/gg-meta.ts/#ggdummy-type-alias","title":"GgDummy (type alias)","text":"<p>Signature</p> <pre><code>export type GgDummy = { name: string; position: Point3; rotation: Point4 } &amp; any\n</code></pre>"},{"location":"modules/core/3d/models/gg-meta.ts/#ggmeta-type-alias","title":"GgMeta (type alias)","text":"<p>Signature</p> <pre><code>export type GgMeta = {\n  dummies: GgDummy[]\n  curves: GgCurve[]\n  rigidBodies: GgRigidBody[]\n}\n</code></pre>"},{"location":"modules/core/3d/models/gg-meta.ts/#ggrigidbody-type-alias","title":"GgRigidBody (type alias)","text":"<p>Signature</p> <pre><code>export type GgRigidBody = { name: string; position: Point3; rotation: Point4 } &amp; BodyShape3DDescriptor\n</code></pre>"},{"location":"modules/core/3d/models/shapes.ts/","title":"core/3d/models/shapes.ts","text":""},{"location":"modules/core/3d/models/shapes.ts/#shapes-overview","title":"shapes overviewTable of contents","text":"<ul> <li>utils</li> <li>BodyShape3DDescriptor (type alias)</li> <li>Shape3DDescriptor (type alias)</li> </ul>"},{"location":"modules/core/3d/models/shapes.ts/#utils","title":"utils","text":""},{"location":"modules/core/3d/models/shapes.ts/#bodyshape3ddescriptor-type-alias","title":"BodyShape3DDescriptor (type alias)","text":"<p>Signature</p> <pre><code>export type BodyShape3DDescriptor = { shape: Shape3DDescriptor; body: Partial&lt;Body3DOptions&gt; }\n</code></pre>"},{"location":"modules/core/3d/models/shapes.ts/#shape3ddescriptor-type-alias","title":"Shape3DDescriptor (type alias)","text":"<p>Signature</p> <pre><code>export type Shape3DDescriptor =\n  | { shape: 'BOX'; dimensions: Point3 }\n  | { shape: 'CONE' | 'CYLINDER'; radius: number; height: number }\n  | { shape: 'CAPSULE'; radius: number; centersDistance: number }\n  | { shape: 'SPHERE'; radius: number }\n  | { shape: 'COMPOUND'; children: { position?: Point3; rotation?: Point4; shape: Shape3DDescriptor }[] }\n  | { shape: 'CONVEX_HULL'; vertices: Point3[] }\n  | { shape: 'MESH'; vertices: Point3[]; faces: [number, number, number][] }\n</code></pre>"},{"location":"modules/core/base/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/clock</li> <li>core/base/data-structures</li> <li>core/base/entities</li> <li>core/base/gg-static.ts</li> <li>core/base/gg-viewport.ts</li> <li>core/base/gg-world.ts</li> <li>core/base/inputs</li> <li>core/base/interfaces</li> <li>core/base/math</li> <li>core/base/models</li> <li>core/base/ui</li> </ul>"},{"location":"modules/core/base/gg-static.ts/","title":"core/base/gg-static.ts","text":""},{"location":"modules/core/base/gg-static.ts/#gg-static-overview","title":"gg-static overviewTable of contents","text":"<ul> <li>utils</li> <li>GgStatic (class)<ul> <li>console (method)</li> <li>worlds (property)</li> <li>selectedWorld (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/gg-static.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/gg-static.ts/#ggstatic-class","title":"GgStatic (class)","text":"<p>Signature</p> <pre><code>export declare class GgStatic {\n  private constructor()\n}\n</code></pre>"},{"location":"modules/core/base/gg-static.ts/#console-method","title":"console (method)","text":"<p>Signature</p> <pre><code>async console(input: string): Promise&lt;string&gt;\n</code></pre>"},{"location":"modules/core/base/gg-static.ts/#worlds-property","title":"worlds (property)","text":"<p>Signature</p> <pre><code>readonly worlds: GgWorld&lt;any, any, GgVisualScene&lt;any, any&gt;, GgPhysicsWorld&lt;any, any&gt;&gt;[]\n</code></pre>"},{"location":"modules/core/base/gg-static.ts/#selectedworld-property","title":"selectedWorld (property)","text":"<p>Signature</p> <pre><code>selectedWorld: GgWorld&lt;any, any, GgVisualScene&lt;any, any&gt;, GgPhysicsWorld&lt;any, any&gt;&gt; | null\n</code></pre>"},{"location":"modules/core/base/gg-viewport.ts/","title":"core/base/gg-viewport.ts","text":""},{"location":"modules/core/base/gg-viewport.ts/#gg-viewport-overview","title":"gg-viewport overviewTable of contents","text":"<ul> <li>utils</li> <li>GgViewport (class)<ul> <li>activate (method)</li> <li>deactivate (method)</li> <li>isTouchDevice (method)</li> <li>subscribeOnMouseMove (method)</li> <li>destroy$ (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/gg-viewport.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/gg-viewport.ts/#ggviewport-class","title":"GgViewport (class)","text":"<p>Signature</p> <pre><code>export declare class GgViewport {\n  private constructor()\n}\n</code></pre>"},{"location":"modules/core/base/gg-viewport.ts/#activate-method","title":"activate (method)","text":"<p>Signature</p> <pre><code>public activate()\n</code></pre>"},{"location":"modules/core/base/gg-viewport.ts/#deactivate-method","title":"deactivate (method)","text":"<p>Signature</p> <pre><code>public deactivate(): void\n</code></pre>"},{"location":"modules/core/base/gg-viewport.ts/#istouchdevice-method","title":"isTouchDevice (method)","text":"<p>Signature</p> <pre><code>isTouchDevice(): boolean\n</code></pre>"},{"location":"modules/core/base/gg-viewport.ts/#subscribeonmousemove-method","title":"subscribeOnMouseMove (method)","text":"<p>Signature</p> <pre><code>subscribeOnMouseMove(): Observable&lt;Point2&gt;\n</code></pre>"},{"location":"modules/core/base/gg-viewport.ts/#destroy-property","title":"destroy$ (property)","text":"<p>Signature</p> <pre><code>destroy$: any\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/","title":"core/base/gg-world.ts","text":""},{"location":"modules/core/base/gg-world.ts/#gg-world-overview","title":"gg-world overviewTable of contents","text":"<ul> <li>utils</li> <li>GgWorld (class)<ul> <li>init (method)</li> <li>start (method)</li> <li>pauseWorld (method)</li> <li>resumeWorld (method)</li> <li>createClock (method)</li> <li>dispose (method)</li> <li>addPrimitiveRigidBody (method)</li> <li>addEntity (method)</li> <li>removeEntity (method)</li> <li>registerConsoleCommand (method)</li> <li>runConsoleCommand (method)</li> <li>triggerPhysicsDebugView (method)</li> <li>worldClock (property)</li> <li>keyboardInput (property)</li> <li>children (property)</li> <li>tickListeners (property)</li> <li>commands (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/gg-world.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/gg-world.ts/#ggworld-class","title":"GgWorld (class)","text":"<p>Signature</p> <pre><code>export declare class GgWorld&lt;D, R, V, P&gt; {\n  constructor(\n    public readonly visualScene: V,\n    public readonly physicsWorld: P,\n    protected readonly consoleEnabled: boolean = false\n  )\n}\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#init-method","title":"init (method)","text":"<p>Signature</p> <pre><code>public async init()\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#start-method","title":"start (method)","text":"<p>Signature</p> <pre><code>public start()\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#pauseworld-method","title":"pauseWorld (method)","text":"<p>Signature</p> <pre><code>public pauseWorld()\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#resumeworld-method","title":"resumeWorld (method)","text":"<p>Signature</p> <pre><code>public resumeWorld()\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#createclock-method","title":"createClock (method)","text":"<p>Signature</p> <pre><code>public createClock(autoStart: boolean): PausableClock\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>public dispose(): void\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#addprimitiverigidbody-method","title":"addPrimitiveRigidBody (method)","text":"<p>Signature</p> <pre><code>abstract addPrimitiveRigidBody(descr: any, position?: D, rotation?: R): GgPositionableEntity&lt;D, R&gt;;\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#addentity-method","title":"addEntity (method)","text":"<p>Signature</p> <pre><code>public addEntity(entity: GgEntity): void\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#removeentity-method","title":"removeEntity (method)","text":"<p>Signature</p> <pre><code>public removeEntity(entity: GgEntity, dispose = true): void\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#registerconsolecommand-method","title":"registerConsoleCommand (method)","text":"<p>Signature</p> <pre><code>public registerConsoleCommand(command: string, handler: (...args: string[]) =&gt; Promise&lt;string&gt;, doc?: string): void\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#runconsolecommand-method","title":"runConsoleCommand (method)","text":"<p>Signature</p> <pre><code>public async runConsoleCommand(command: string, args: string[]): Promise&lt;string&gt;\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#triggerphysicsdebugview-method","title":"triggerPhysicsDebugView (method)","text":"<p>Signature</p> <pre><code>public triggerPhysicsDebugView()\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#worldclock-property","title":"worldClock (property)","text":"<p>Signature</p> <pre><code>readonly worldClock: PausableClock\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#keyboardinput-property","title":"keyboardInput (property)","text":"<p>Signature</p> <pre><code>readonly keyboardInput: KeyboardInput\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#children-property","title":"children (property)","text":"<p>Signature</p> <pre><code>readonly children: GgEntity[]\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#ticklisteners-property","title":"tickListeners (property)","text":"<p>Signature</p> <pre><code>readonly tickListeners: GgEntity[]\n</code></pre>"},{"location":"modules/core/base/gg-world.ts/#commands-property","title":"commands (property)","text":"<p>Signature</p> <pre><code>commands: { [key: string]: { handler: (...args: string[]) =&gt; Promise&lt;string&gt;; doc?: string | undefined; }; }\n</code></pre>"},{"location":"modules/core/base/clock/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/clock/global-clock.ts</li> <li>core/base/clock/i-clock.ts</li> <li>core/base/clock/pausable-clock.ts</li> </ul>"},{"location":"modules/core/base/clock/global-clock.ts/","title":"core/base/clock/global-clock.ts","text":""},{"location":"modules/core/base/clock/global-clock.ts/#global-clock-overview","title":"global-clock overviewTable of contents","text":"<ul> <li>utils</li> <li>GgGlobalClock (class)<ul> <li>createChildClock (method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/clock/global-clock.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/clock/global-clock.ts/#ggglobalclock-class","title":"GgGlobalClock (class)","text":"<p>A singleton class, providing ability to track time, fire ticks, provide time elapsed + tick delta. Starts as soon as accessed and counts time from 01/01/1970</p> <p>Signature</p> <pre><code>export declare class GgGlobalClock {\n  private constructor()\n}\n</code></pre>"},{"location":"modules/core/base/clock/global-clock.ts/#createchildclock-method","title":"createChildClock (method)","text":"<p>Signature</p> <pre><code>createChildClock(autoStart: boolean): PausableClock\n</code></pre>"},{"location":"modules/core/base/clock/i-clock.ts/","title":"core/base/clock/i-clock.ts","text":""},{"location":"modules/core/base/clock/i-clock.ts/#i-clock-overview","title":"i-clock overviewTable of contents","text":"<ul> <li>utils</li> <li>IClock (interface)</li> </ul>"},{"location":"modules/core/base/clock/i-clock.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/clock/i-clock.ts/#iclock-interface","title":"IClock (interface)","text":"<p>Signature</p> <pre><code>export interface IClock {\n</code></pre>"},{"location":"modules/core/base/clock/pausable-clock.ts/","title":"core/base/clock/pausable-clock.ts","text":""},{"location":"modules/core/base/clock/pausable-clock.ts/#pausable-clock-overview","title":"pausable-clock overviewTable of contents","text":"<ul> <li>utils</li> <li>PausableClock (class)<ul> <li>createChildClock (method)</li> <li>start (method)</li> <li>stop (method)</li> <li>pause (method)</li> <li>resume (method)</li> <li>startListeningTicks (method)</li> <li>stopListeningTicks (method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/clock/pausable-clock.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/clock/pausable-clock.ts/#pausableclock-class","title":"PausableClock (class)","text":"<p>A class, providing ability to track time, fire ticks, provide time elapsed + tick delta with ability to suspend/resume it.</p> <p>Signature</p> <pre><code>export declare class PausableClock {\n  constructor(autoStart: boolean = false, protected readonly parentClock: IClock = GgGlobalClock.instance)\n}\n</code></pre>"},{"location":"modules/core/base/clock/pausable-clock.ts/#createchildclock-method","title":"createChildClock (method)","text":"<p>Signature</p> <pre><code>createChildClock(autoStart: boolean): PausableClock\n</code></pre>"},{"location":"modules/core/base/clock/pausable-clock.ts/#start-method","title":"start (method)","text":"<p>Signature</p> <pre><code>start()\n</code></pre>"},{"location":"modules/core/base/clock/pausable-clock.ts/#stop-method","title":"stop (method)","text":"<p>Signature</p> <pre><code>stop()\n</code></pre>"},{"location":"modules/core/base/clock/pausable-clock.ts/#pause-method","title":"pause (method)","text":"<p>Signature</p> <pre><code>pause()\n</code></pre>"},{"location":"modules/core/base/clock/pausable-clock.ts/#resume-method","title":"resume (method)","text":"<p>Signature</p> <pre><code>resume()\n</code></pre>"},{"location":"modules/core/base/clock/pausable-clock.ts/#startlisteningticks-method","title":"startListeningTicks (method)","text":"<p>Signature</p> <pre><code>protected startListeningTicks()\n</code></pre>"},{"location":"modules/core/base/clock/pausable-clock.ts/#stoplisteningticks-method","title":"stopListeningTicks (method)","text":"<p>Signature</p> <pre><code>protected stopListeningTicks()\n</code></pre>"},{"location":"modules/core/base/data-structures/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/data-structures/graph.ts</li> </ul>"},{"location":"modules/core/base/data-structures/graph.ts/","title":"core/base/data-structures/graph.ts","text":""},{"location":"modules/core/base/data-structures/graph.ts/#graph-overview","title":"graph overviewTable of contents","text":"<ul> <li>utils</li> <li>Graph (class)<ul> <li>fromArray (static method)</li> <li>fromSquareGrid (static method)</li> <li>addAdjacent (method)</li> <li>removeAdjacent (method)</li> <li>addEdge (method)</li> <li>removeEdge (method)</li> <li>walkRead (method)</li> <li>walkReadPreserveDepth (method)</li> <li>nodes (method)</li> <li>data (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/data-structures/graph.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/data-structures/graph.ts/#graph-class","title":"Graph (class)","text":"<p>Signature</p> <pre><code>export declare class Graph&lt;T&gt; {\n  constructor(data: T)\n}\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#fromarray-static-method","title":"fromArray (static method)","text":"<p>Creates a new Graph instance from an array of elements, where each element in the array is a node in the graph. The first element of the array is used as the root node of the graph.</p> <p>Signature</p> <pre><code>static fromArray&lt;T&gt;(array: T[], closed: boolean = false): Graph&lt;T&gt;\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#fromsquaregrid-static-method","title":"fromSquareGrid (static method)","text":"<p>Creates a new Graph instance from a two-dimensional square grid of elements, where each element in the grid is a node in the graph. The top-left element of the grid is used as the root node of the graph. The nodes in the graph are created in the same order as the elements in the grid, from left to right and then from top to bottom.</p> <p>Signature</p> <pre><code>static fromSquareGrid&lt;T&gt;(grid: T[][]): Graph&lt;T&gt;\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#addadjacent-method","title":"addAdjacent (method)","text":"<p>Signature</p> <pre><code>addAdjacent(node: Graph&lt;T&gt;): boolean\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#removeadjacent-method","title":"removeAdjacent (method)","text":"<p>Signature</p> <pre><code>removeAdjacent(node: Graph&lt;T&gt;): boolean\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#addedge-method","title":"addEdge (method)","text":"<p>Create an edge between two nodes</p> <p>Signature</p> <pre><code>addEdge(source: Graph&lt;T&gt;, destination: Graph&lt;T&gt;): boolean\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#removeedge-method","title":"removeEdge (method)","text":"<p>Remove an edge between two nodes</p> <p>Signature</p> <pre><code>removeEdge(source: Graph&lt;T&gt;, destination: Graph&lt;T&gt;): boolean\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#walkread-method","title":"walkRead (method)","text":"<p>Signature</p> <pre><code>walkRead(depth: number): Set&lt;Graph&lt;T&gt;&gt;\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#walkreadpreservedepth-method","title":"walkReadPreserveDepth (method)","text":"<p>Signature</p> <pre><code>walkReadPreserveDepth(depth: number): Set&lt;Graph&lt;T&gt;&gt;[]\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#nodes-method","title":"nodes (method)","text":"<p>Signature</p> <pre><code>nodes(): Graph&lt;T&gt;[]\n</code></pre>"},{"location":"modules/core/base/data-structures/graph.ts/#data-property","title":"data (property)","text":"<p>Signature</p> <pre><code>data: T\n</code></pre>"},{"location":"modules/core/base/entities/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/entities/base-gg-renderer.ts</li> <li>core/base/entities/controllers</li> <li>core/base/entities/gg-entity.ts</li> <li>core/base/entities/gg-positionable-entity.ts</li> <li>core/base/entities/inline-controller.ts</li> </ul>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/","title":"core/base/entities/base-gg-renderer.ts","text":""},{"location":"modules/core/base/entities/base-gg-renderer.ts/#base-gg-renderer-overview","title":"base-gg-renderer overviewTable of contents","text":"<ul> <li>utils</li> <li>BaseGgRenderer (class)<ul> <li>render (method)</li> <li>resizeRenderer (method)</li> <li>onSpawned (method)</li> <li>dispose (method)</li> <li>tickOrder (property)</li> <li>rendererOptions (property)</li> <li>_rendererSize$ (property)</li> </ul> </li> <li>RendererOptions (type alias)</li> </ul>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/entities/base-gg-renderer.ts/#baseggrenderer-class","title":"BaseGgRenderer (class)","text":"<p>Represents an abstract base class for a renderer controller.</p> <p>Signature</p> <pre><code>export declare class BaseGgRenderer {\n  protected constructor(protected readonly canvas?: HTMLCanvasElement, options: Partial&lt;RendererOptions&gt; = {})\n}\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#render-method","title":"render (method)","text":"<p>Renders the scene.</p> <p>Signature</p> <pre><code>abstract render(): void;\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#resizerenderer-method","title":"resizeRenderer (method)","text":"<p>Resizes the renderer to the specified size.</p> <p>Signature</p> <pre><code>protected abstract resizeRenderer(newSize: Point2): void;\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: GgWorld&lt;any, any&gt;)\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose()\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: GGTickOrder.RENDERING\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#rendereroptions-property","title":"rendererOptions (property)","text":"<p>Specifies the options for the renderer.</p> <p>Signature</p> <pre><code>readonly rendererOptions: RendererOptions\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#_renderersize-property","title":"_rendererSize$ (property)","text":"<p>Represents the current size of the renderer.</p> <p>Signature</p> <pre><code>_rendererSize$: any\n</code></pre>"},{"location":"modules/core/base/entities/base-gg-renderer.ts/#rendereroptions-type-alias","title":"RendererOptions (type alias)","text":"<p>Represents the options that can be passed to a renderer.</p> <p>Signature</p> <pre><code>export type RendererOptions = {\n  transparent: boolean\n  background: number\n  size: Point2 | 'fullscreen' | ((pageSize: Point2) =&gt; Point2)\n  forceResolution?: number\n  antialias: boolean\n}\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/","title":"core/base/entities/gg-entity.ts","text":""},{"location":"modules/core/base/entities/gg-entity.ts/#gg-entity-overview","title":"gg-entity overviewTable of contents","text":"<ul> <li>utils</li> <li>GgEntity (class)<ul> <li>addChildren (method)</li> <li>removeChildren (method)</li> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>dispose (method)</li> <li>tick$ (property)</li> <li>tickOrder (property)</li> <li>_world (property)</li> <li>_name (property)</li> <li>_active (property)</li> <li>_children (property)</li> <li>_onSpawned$ (property)</li> <li>_onRemoved$ (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/entities/gg-entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/entities/gg-entity.ts/#ggentity-class","title":"GgEntity (class)","text":"<p>Signature</p> <pre><code>export declare class GgEntity\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#addchildren-method","title":"addChildren (method)","text":"<p>Signature</p> <pre><code>public addChildren(...entities: GgEntity[])\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#removechildren-method","title":"removeChildren (method)","text":"<p>Signature</p> <pre><code>public removeChildren(entities: GgEntity[], dispose: boolean = false)\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>public onSpawned(world: GgWorld&lt;any, any&gt;)\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>public onRemoved()\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>public dispose(): void\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#tick-property","title":"tick$ (property)","text":"<p>will receive [elapsed time, delta] of each world clock tick</p> <p>Signature</p> <pre><code>readonly tick$: any\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>the priority of ticker: the less value, the earlier tick will be run.</p> <p>Signature</p> <pre><code>readonly tickOrder: number\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#_world-property","title":"_world (property)","text":"<p>a world reference, where this entity was added to</p> <p>Signature</p> <pre><code>_world: GgWorld&lt;any, any, GgVisualScene&lt;any, any&gt;, GgPhysicsWorld&lt;any, any&gt;&gt; | null\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#_name-property","title":"_name (property)","text":"<p>Signature</p> <pre><code>_name: string\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#_active-property","title":"_active (property)","text":"<p>The flag whether entity should listen to ticks. If set to false, ticks will not be propagated to this entity</p> <p>Signature</p> <pre><code>_active: boolean\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#_children-property","title":"_children (property)","text":"<p>Signature</p> <pre><code>_children: GgEntity[]\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#_onspawned-property","title":"_onSpawned$ (property)","text":"<p>Signature</p> <pre><code>_onSpawned$: any\n</code></pre>"},{"location":"modules/core/base/entities/gg-entity.ts/#_onremoved-property","title":"_onRemoved$ (property)","text":"<p>Signature</p> <pre><code>_onRemoved$: any\n</code></pre>"},{"location":"modules/core/base/entities/gg-positionable-entity.ts/","title":"core/base/entities/gg-positionable-entity.ts","text":""},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#gg-positionable-entity-overview","title":"gg-positionable-entity overviewTable of contents","text":"<ul> <li>utils</li> <li>GgPositionableEntity (class)<ul> <li>getDefaultPosition (method)</li> <li>getDefaultRotation (method)</li> <li>getDefaultScale (method)</li> <li>onSpawned (method)</li> <li>_position$ (property)</li> <li>_rotation$ (property)</li> <li>_scale$ (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#ggpositionableentity-class","title":"GgPositionableEntity (class)","text":"<p>Signature</p> <pre><code>export declare class GgPositionableEntity&lt;D, R&gt; {\n  protected constructor()\n}\n</code></pre>"},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#getdefaultposition-method","title":"getDefaultPosition (method)","text":"<p>Signature</p> <pre><code>abstract getDefaultPosition(): D;\n</code></pre>"},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#getdefaultrotation-method","title":"getDefaultRotation (method)","text":"<p>Signature</p> <pre><code>abstract getDefaultRotation(): R;\n</code></pre>"},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#getdefaultscale-method","title":"getDefaultScale (method)","text":"<p>Signature</p> <pre><code>abstract getDefaultScale(): D;\n</code></pre>"},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: GgWorld&lt;D, R&gt;)\n</code></pre>"},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#_position-property","title":"_position$ (property)","text":"<p>Signature</p> <pre><code>readonly _position$: any\n</code></pre>"},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#_rotation-property","title":"_rotation$ (property)","text":"<p>Signature</p> <pre><code>readonly _rotation$: any\n</code></pre>"},{"location":"modules/core/base/entities/gg-positionable-entity.ts/#_scale-property","title":"_scale$ (property)","text":"<p>Signature</p> <pre><code>readonly _scale$: any\n</code></pre>"},{"location":"modules/core/base/entities/inline-controller.ts/","title":"core/base/entities/inline-controller.ts","text":""},{"location":"modules/core/base/entities/inline-controller.ts/#inline-controller-overview","title":"inline-controller overviewTable of contents","text":"<ul> <li>utils</li> <li>createInlineTickController</li> </ul>"},{"location":"modules/core/base/entities/inline-controller.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/entities/inline-controller.ts/#createinlinetickcontroller","title":"createInlineTickController","text":"<p>Signature</p> <pre><code>export declare function createInlineTickController(\n  world: GgWorld&lt;any, any&gt;,\n  tickOrder: number = GGTickOrder.CONTROLLERS\n): Observable&lt;[number, number]&gt;\n</code></pre>"},{"location":"modules/core/base/entities/controllers/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/entities/controllers/animation-mixer.ts</li> </ul>"},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/","title":"core/base/entities/controllers/animation-mixer.ts","text":""},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#animation-mixer-overview","title":"animation-mixer overviewTable of contents","text":"<ul> <li>utils</li> <li>AnimationFunction (type alias)</li> <li>AnimationMixer (class)<ul> <li>transitFromStaticState (method)</li> <li>transitAnimationFunction (method)</li> <li>onSpawned (method)</li> <li>dispose (method)</li> <li>tickOrder (property)</li> <li>_value$ (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#animationfunction-type-alias","title":"AnimationFunction (type alias)","text":"<p>Signature</p> <pre><code>export type AnimationFunction&lt;T&gt; = (elapsed: number, delta: number) =&gt; T\n</code></pre>"},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#animationmixer-class","title":"AnimationMixer (class)","text":"<p>A class that performs property animations for a specific type <code>T</code> by using provided animation function. Supports smooth transition between animation function by interpolating between values over time. The current value of the animation can be subscribed to using the <code>subscribeToValue</code> property. The animation function can be changed with <code>transitAnimationFunction</code> or <code>transitFromStaticState</code>.</p> <p>Signature</p> <pre><code>export declare class AnimationMixer&lt;T&gt; {\n  constructor(\n    protected _animationFunction: AnimationFunction&lt;T&gt;,\n    protected _lerp: (a: T, b: T, t: number) =&gt; T = (a, b, t) =&gt; b\n  )\n}\n</code></pre>"},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#transitfromstaticstate-method","title":"transitFromStaticState (method)","text":"<p>Set output to static value and smoothly transit to new control function</p> <p>Signature</p> <pre><code>transitFromStaticState(\n    state: T,\n    newFunc: AnimationFunction&lt;T&gt;,\n    transitionDuration: number,\n    easing: (t: number) =&gt; number = x =&gt; x,\n  )\n</code></pre>"},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#transitanimationfunction-method","title":"transitAnimationFunction (method)","text":"<p>Smoothly transit to new control function</p> <p>Signature</p> <pre><code>transitAnimationFunction(\n    newFunc: AnimationFunction&lt;T&gt;,\n    transitionDuration: number,\n    easing: (t: number) =&gt; number = x =&gt; x,\n  )\n</code></pre>"},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>onSpawned(world: GgWorld&lt;any, any&gt;)\n</code></pre>"},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#tickorder-property","title":"tickOrder (property)","text":"<p>Signature</p> <pre><code>readonly tickOrder: number\n</code></pre>"},{"location":"modules/core/base/entities/controllers/animation-mixer.ts/#_value-property","title":"_value$ (property)","text":"<p>A subject that emits the current value of the animation on every tick.</p> <p>Signature</p> <pre><code>readonly _value$: any\n</code></pre>"},{"location":"modules/core/base/inputs/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/inputs/direction.keyboard-input.ts</li> <li>core/base/inputs/input.ts</li> <li>core/base/inputs/keyboard.input.ts</li> <li>core/base/inputs/mouse.input.ts</li> </ul>"},{"location":"modules/core/base/inputs/direction.keyboard-input.ts/","title":"core/base/inputs/direction.keyboard-input.ts","text":""},{"location":"modules/core/base/inputs/direction.keyboard-input.ts/#directionkeyboard-input-overview","title":"direction.keyboard-input overviewTable of contents","text":"<ul> <li>utils</li> <li>DirectionKeyboardInput (class)<ul> <li>startInternal (method)</li> </ul> </li> <li>DirectionKeyboardKeymap (type alias)</li> <li>DirectionKeyboardOutput (type alias)</li> </ul>"},{"location":"modules/core/base/inputs/direction.keyboard-input.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/inputs/direction.keyboard-input.ts/#directionkeyboardinput-class","title":"DirectionKeyboardInput (class)","text":"<p>An input class, responsible for handling direction keys and providing simple current direction observable. Supports two the most popular keyboard layouts: WASD and arrows.</p> <p>Signature</p> <pre><code>export declare class DirectionKeyboardInput {\n  constructor(protected readonly keyboard: KeyboardInput, protected readonly keymap: DirectionKeyboardKeymap)\n}\n</code></pre>"},{"location":"modules/core/base/inputs/direction.keyboard-input.ts/#startinternal-method","title":"startInternal (method)","text":"<p>Called when the input handling should start.</p> <p>Signature</p> <pre><code>protected async startInternal(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/base/inputs/direction.keyboard-input.ts/#directionkeyboardkeymap-type-alias","title":"DirectionKeyboardKeymap (type alias)","text":"<p>The type representing desired keymap for DirectionKeyboardInput</p> <p>Signature</p> <pre><code>export type DirectionKeyboardKeymap = 'arrows' | 'wasd' | 'wasd+arrows'\n</code></pre>"},{"location":"modules/core/base/inputs/direction.keyboard-input.ts/#directionkeyboardoutput-type-alias","title":"DirectionKeyboardOutput (type alias)","text":"<p>The type of DirectionKeyboardInput output value</p> <p>Signature</p> <pre><code>export type DirectionKeyboardOutput = { upDown?: boolean; leftRight?: boolean }\n</code></pre>"},{"location":"modules/core/base/inputs/input.ts/","title":"core/base/inputs/input.ts","text":""},{"location":"modules/core/base/inputs/input.ts/#input-overview","title":"input overviewTable of contents","text":"<ul> <li>utils</li> <li>Input (class)<ul> <li>start (method)</li> <li>stop (method)</li> <li>startInternal (method)</li> <li>stopInternal (method)</li> <li>stop$ (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/inputs/input.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/inputs/input.ts/#input-class","title":"Input (class)","text":"<p>An abstract class that provides basic implementation for Input class. Input is an entity for handling input from user, such as mouse movements, key presses etc. Inputs are not bound to World-s and working independently by design.</p> <p>TStartParams - A type representing an array of input arguments for the start method. Items are recommended to be named.</p> <p>TStopParams - A type representing an array of input arguments for the stop method. Items are recommended to be named.</p> <p>Signature</p> <pre><code>export declare class Input&lt;TStartParams, TStopParams&gt;\n</code></pre>"},{"location":"modules/core/base/inputs/input.ts/#start-method","title":"start (method)","text":"<p>An asynchronous method that starts the input. Do not override it</p> <p>Signature</p> <pre><code>async start(...args: TStartParams): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/base/inputs/input.ts/#stop-method","title":"stop (method)","text":"<p>An asynchronous method that stops the input. Do not override it</p> <p>Signature</p> <pre><code>async stop(...args: TStopParams): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/base/inputs/input.ts/#startinternal-method","title":"startInternal (method)","text":"<p>An abstract asynchronous method that starts the input.</p> <p>Signature</p> <pre><code>protected abstract startInternal(...args: TStartParams): Promise&lt;void&gt;;\n</code></pre>"},{"location":"modules/core/base/inputs/input.ts/#stopinternal-method","title":"stopInternal (method)","text":"<p>An asynchronous method that stops the input.</p> <p>Signature</p> <pre><code>protected async stopInternal(...args: TStopParams): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/core/base/inputs/input.ts/#stop-property","title":"stop$ (property)","text":"<p>A protected subject that emits a void value when the process is stopped. Subclasses, when subscribing to something using rxjs, have to add pipe takeUntil(this.stop$), so everything will be unsubscribed when stopping input</p> <p>Signature</p> <pre><code>readonly stop$: any\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/","title":"core/base/inputs/keyboard.input.ts","text":""},{"location":"modules/core/base/inputs/keyboard.input.ts/#keyboardinput-overview","title":"keyboard.input overviewTable of contents","text":"<ul> <li>utils</li> <li>KeyboardInput (class)<ul> <li>startInternal (method)</li> <li>stopInternal (method)</li> <li>bind (method)</li> <li>bindMany (method)</li> <li>emulateKeyDown (method)</li> <li>emulateKeyUp (method)</li> <li>emulateKeyPress (method)</li> <li>handleKeys (method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/inputs/keyboard.input.ts/#keyboardinput-class","title":"KeyboardInput (class)","text":"<p>A main keyboard input: it does not have own key bindings, but provides an API to bind keys. It is responsible for listening key up/down events (when running!) and emit the events to subscribers. Every World entity has its own dedicated instance of Keyboard input, which is running only when the world is running</p> <p>Signature</p> <pre><code>export declare class KeyboardInput {\n  constructor()\n}\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#startinternal-method","title":"startInternal (method)","text":"<p>Signature</p> <pre><code>protected async startInternal()\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#stopinternal-method","title":"stopInternal (method)","text":"<p>Signature</p> <pre><code>protected async stopInternal()\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#bind-method","title":"bind (method)","text":"<p>Creates an observable that emits a boolean whenever a key with the given code is pressed or released</p> <p>Signature</p> <pre><code>bind(code: string): Observable&lt;boolean&gt;\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#bindmany-method","title":"bindMany (method)","text":"<p>Creates an observable that emits a boolean indicating whether any of the keys with the given codes are pressed or released. Should be used when you have more than one keys, responsible for the same action.</p> <p>Signature</p> <pre><code>bindMany(...codes: string[]): Observable&lt;boolean&gt;\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#emulatekeydown-method","title":"emulateKeyDown (method)","text":"<p>Emulates a key down event for the given key code</p> <p>Signature</p> <pre><code>emulateKeyDown(code: string): void\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#emulatekeyup-method","title":"emulateKeyUp (method)","text":"<p>Emulates a key up event for the given key code</p> <p>Signature</p> <pre><code>emulateKeyUp(code: string): void\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#emulatekeypress-method","title":"emulateKeyPress (method)","text":"<p>Emulates a key press event (down and up) for the given key code</p> <p>Signature</p> <pre><code>emulateKeyPress(code: string): void\n</code></pre>"},{"location":"modules/core/base/inputs/keyboard.input.ts/#handlekeys-method","title":"handleKeys (method)","text":"<p>Signature</p> <pre><code>private handleKeys(e: KeyboardEvent)\n</code></pre>"},{"location":"modules/core/base/inputs/mouse.input.ts/","title":"core/base/inputs/mouse.input.ts","text":""},{"location":"modules/core/base/inputs/mouse.input.ts/#mouseinput-overview","title":"mouse.input overviewTable of contents","text":"<ul> <li>utils</li> <li>MouseInput (class)<ul> <li>startInternal (method)</li> <li>stopInternal (method)</li> <li>canvasClickListener (method)</li> </ul> </li> <li>MouseInputOptions (type alias)</li> <li>MouseInputPointLockOptions (type alias)</li> </ul>"},{"location":"modules/core/base/inputs/mouse.input.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/inputs/mouse.input.ts/#mouseinput-class","title":"MouseInput (class)","text":"<p>A class representing mouse input.</p> <p>Signature</p> <pre><code>export declare class MouseInput {\n  constructor(private readonly options: MouseInputOptions = {})\n}\n</code></pre>"},{"location":"modules/core/base/inputs/mouse.input.ts/#startinternal-method","title":"startInternal (method)","text":"<p>Signature</p> <pre><code>protected async startInternal()\n</code></pre>"},{"location":"modules/core/base/inputs/mouse.input.ts/#stopinternal-method","title":"stopInternal (method)","text":"<p>Stop listening for mouse movement events.</p> <p>Signature</p> <pre><code>protected async stopInternal(unlockPointer: boolean = true)\n</code></pre>"},{"location":"modules/core/base/inputs/mouse.input.ts/#canvasclicklistener-method","title":"canvasClickListener (method)","text":"<p>Request pointer lock on the canvas element.</p> <p>Signature</p> <pre><code>private canvasClickListener(): void\n</code></pre>"},{"location":"modules/core/base/inputs/mouse.input.ts/#mouseinputoptions-type-alias","title":"MouseInputOptions (type alias)","text":"<p>Options for a MouseInput.</p> <p>pointerLock: The options for pointer lock. Do not provide it to disable pointer lock functionality</p> <p>Signature</p> <pre><code>export type MouseInputOptions = {\n  pointerLock?: MouseInputPointLockOptions\n}\n</code></pre>"},{"location":"modules/core/base/inputs/mouse.input.ts/#mouseinputpointlockoptions-type-alias","title":"MouseInputPointLockOptions (type alias)","text":"<p>Options for pointer lock in a MouseInput.</p> <p>ignoreMovementWhenNotLocked: Whether to ignore mouse movement when pointer lock is not active.</p> <p>canvas: The canvas element to request pointer lock on.</p> <p>Signature</p> <pre><code>export type MouseInputPointLockOptions = { ignoreMovementWhenNotLocked: boolean; canvas: HTMLCanvasElement }\n</code></pre>"},{"location":"modules/core/base/interfaces/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/interfaces/gg-body.ts</li> <li>core/base/interfaces/gg-debug-physics-drawer.ts</li> <li>core/base/interfaces/gg-object.ts</li> <li>core/base/interfaces/gg-physics-world.ts</li> <li>core/base/interfaces/gg-trigger.ts</li> <li>core/base/interfaces/gg-visual-scene.ts</li> </ul>"},{"location":"modules/core/base/interfaces/gg-body.ts/","title":"core/base/interfaces/gg-body.ts","text":""},{"location":"modules/core/base/interfaces/gg-body.ts/#gg-body-overview","title":"gg-body overviewTable of contents","text":"<ul> <li>utils</li> <li>GgBody (interface)</li> </ul>"},{"location":"modules/core/base/interfaces/gg-body.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/interfaces/gg-body.ts/#ggbody-interface","title":"GgBody (interface)","text":"<p>Signature</p> <pre><code>export interface GgBody&lt;D, R&gt; {\n  position: D\n  rotation: R\n  scale: D\n\n  name: string\n\n  entity: GgEntity | null\n\n  clone(): GgBody&lt;D, R&gt;\n\n  addToWorld(world: GgPhysicsWorld&lt;D, R&gt;): void\n\n  removeFromWorld(world: GgPhysicsWorld&lt;D, R&gt;): void\n\n  dispose(): void\n\n  /** clear velocities etc. */\n  resetMotion(): void\n}\n</code></pre>"},{"location":"modules/core/base/interfaces/gg-debug-physics-drawer.ts/","title":"core/base/interfaces/gg-debug-physics-drawer.ts","text":""},{"location":"modules/core/base/interfaces/gg-debug-physics-drawer.ts/#gg-debug-physics-drawer-overview","title":"gg-debug-physics-drawer overviewTable of contents","text":"<ul> <li>utils</li> <li>GgDebugPhysicsDrawer (interface)</li> </ul>"},{"location":"modules/core/base/interfaces/gg-debug-physics-drawer.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/interfaces/gg-debug-physics-drawer.ts/#ggdebugphysicsdrawer-interface","title":"GgDebugPhysicsDrawer (interface)","text":"<p>Signature</p> <pre><code>export interface GgDebugPhysicsDrawer&lt;D, R&gt; extends GgObject&lt;D, R&gt; {\n  drawContactPoint(point: D, normal: D, color?: Point3): void\n\n  drawLine(from: D, to: D, color?: Point3): void\n\n  update(): void\n}\n</code></pre>"},{"location":"modules/core/base/interfaces/gg-object.ts/","title":"core/base/interfaces/gg-object.ts","text":""},{"location":"modules/core/base/interfaces/gg-object.ts/#gg-object-overview","title":"gg-object overviewTable of contents","text":"<ul> <li>utils</li> <li>GgObject (interface)</li> </ul>"},{"location":"modules/core/base/interfaces/gg-object.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/interfaces/gg-object.ts/#ggobject-interface","title":"GgObject (interface)","text":"<p>Signature</p> <pre><code>export interface GgObject&lt;D, R&gt; {\n  position: D\n  rotation: R\n  scale: D\n\n  visible: boolean\n\n  name: string\n\n  isEmpty(): boolean\n\n  popChild(name: string): GgObject&lt;D, R&gt; | null\n\n  getBoundings(): GgBox&lt;D&gt;\n\n  clone(): GgObject&lt;D, R&gt;\n\n  addToWorld(world: GgVisualScene&lt;D, R&gt;): void\n\n  removeFromWorld(world: GgVisualScene&lt;D, R&gt;): void\n\n  dispose(): void\n}\n</code></pre>"},{"location":"modules/core/base/interfaces/gg-physics-world.ts/","title":"core/base/interfaces/gg-physics-world.ts","text":""},{"location":"modules/core/base/interfaces/gg-physics-world.ts/#gg-physics-world-overview","title":"gg-physics-world overviewTable of contents","text":"<ul> <li>utils</li> <li>GgPhysicsWorld (interface)</li> </ul>"},{"location":"modules/core/base/interfaces/gg-physics-world.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/interfaces/gg-physics-world.ts/#ggphysicsworld-interface","title":"GgPhysicsWorld (interface)","text":"<p>Signature</p> <pre><code>export interface GgPhysicsWorld&lt;D, R&gt; {\n  readonly factory: any; // type defined in sub-interfaces\n  gravity: D;\n  timeScale: number;\n</code></pre>"},{"location":"modules/core/base/interfaces/gg-trigger.ts/","title":"core/base/interfaces/gg-trigger.ts","text":""},{"location":"modules/core/base/interfaces/gg-trigger.ts/#gg-trigger-overview","title":"gg-trigger overviewTable of contents","text":"<ul> <li>utils</li> <li>GgTrigger (interface)</li> </ul>"},{"location":"modules/core/base/interfaces/gg-trigger.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/interfaces/gg-trigger.ts/#ggtrigger-interface","title":"GgTrigger (interface)","text":"<p>Signature</p> <pre><code>export interface GgTrigger&lt;D, R&gt; extends GgBody&lt;D, R&gt; {\n</code></pre>"},{"location":"modules/core/base/interfaces/gg-visual-scene.ts/","title":"core/base/interfaces/gg-visual-scene.ts","text":""},{"location":"modules/core/base/interfaces/gg-visual-scene.ts/#gg-visual-scene-overview","title":"gg-visual-scene overviewTable of contents","text":"<ul> <li>utils</li> <li>GgVisualScene (interface)</li> </ul>"},{"location":"modules/core/base/interfaces/gg-visual-scene.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/interfaces/gg-visual-scene.ts/#ggvisualscene-interface","title":"GgVisualScene (interface)","text":"<p>Signature</p> <pre><code>export interface GgVisualScene&lt;D, R&gt; {\n  readonly factory: any // type defined in sub-interfaces\n\n  readonly debugPhysicsDrawerClass?: { new (): GgDebugPhysicsDrawer&lt;D, R&gt; }\n\n  init(): Promise&lt;void&gt;\n\n  dispose(): void\n}\n</code></pre>"},{"location":"modules/core/base/math/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/math/box.ts</li> <li>core/base/math/matrix4.ts</li> <li>core/base/math/numbers.ts</li> <li>core/base/math/point2.ts</li> <li>core/base/math/point3.ts</li> <li>core/base/math/quaternion.ts</li> </ul>"},{"location":"modules/core/base/math/box.ts/","title":"core/base/math/box.ts","text":""},{"location":"modules/core/base/math/box.ts/#box-overview","title":"box overviewTable of contents","text":"<ul> <li>utils</li> <li>Box (class)<ul> <li>clone (static method)</li> <li>expandByPoint (static method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/math/box.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/box.ts/#box-class","title":"Box (class)","text":"<p>Signature</p> <pre><code>export declare class Box\n</code></pre>"},{"location":"modules/core/base/math/box.ts/#clone-static-method","title":"clone (static method)","text":"<p>Signature</p> <pre><code>static clone&lt;T&gt;(box: GgBox&lt;T&gt;): GgBox&lt;T&gt;\n</code></pre>"},{"location":"modules/core/base/math/box.ts/#expandbypoint-static-method","title":"expandByPoint (static method)","text":"<p>Signature</p> <pre><code>static expandByPoint&lt;T&gt;(box: GgBox&lt;T&gt;, point: T): GgBox&lt;T&gt;\n</code></pre>"},{"location":"modules/core/base/math/matrix4.ts/","title":"core/base/math/matrix4.ts","text":""},{"location":"modules/core/base/math/matrix4.ts/#matrix4-overview","title":"matrix4 overviewTable of contents","text":"<ul> <li>utils</li> <li>Mtrx4 (class)<ul> <li>lookAt (static method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/math/matrix4.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/matrix4.ts/#mtrx4-class","title":"Mtrx4 (class)","text":"<p>Signature</p> <pre><code>export declare class Mtrx4\n</code></pre>"},{"location":"modules/core/base/math/matrix4.ts/#lookat-static-method","title":"lookAt (static method)","text":"<p>creates a rotation matrix for object, so it will look at some point in space</p> <p>Signature</p> <pre><code>static lookAt(eye: Point3, target: Point3, up: Point3): number[]\n</code></pre>"},{"location":"modules/core/base/math/numbers.ts/","title":"core/base/math/numbers.ts","text":""},{"location":"modules/core/base/math/numbers.ts/#numbers-overview","title":"numbers overviewTable of contents","text":"<ul> <li>utils</li> <li>averageAngle</li> <li>lerpNumber</li> </ul>"},{"location":"modules/core/base/math/numbers.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/numbers.ts/#averageangle","title":"averageAngle","text":"<p>Signature</p> <pre><code>export declare const averageAngle: (angleA: number, angleB: number, factor?: number) =&gt; number\n</code></pre>"},{"location":"modules/core/base/math/numbers.ts/#lerpnumber","title":"lerpNumber","text":"<p>Signature</p> <pre><code>export declare const lerpNumber: (a: number, b: number, t: number) =&gt; number\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/","title":"core/base/math/point2.ts","text":""},{"location":"modules/core/base/math/point2.ts/#point2-overview","title":"point2 overviewTable of contents","text":"<ul> <li>utils</li> <li>Pnt2 (class)<ul> <li>clone (static method)</li> <li>add (static method)</li> <li>sub (static method)</li> <li>norm (static method)</li> <li>scalarMult (static method)</li> <li>lerp (static method)</li> <li>angle (static method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/math/point2.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/point2.ts/#pnt2-class","title":"Pnt2 (class)","text":"<p>Signature</p> <pre><code>export declare class Pnt2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#clone-static-method","title":"clone (static method)","text":"<p>clone point</p> <p>Signature</p> <pre><code>static clone(p: Point2): Point2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#add-static-method","title":"add (static method)","text":"<p>add point b to point a</p> <p>Signature</p> <pre><code>static add(a: Point2, b: Point2): Point2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#sub-static-method","title":"sub (static method)","text":"<p>subtract point b from point a</p> <p>Signature</p> <pre><code>static sub(a: Point2, b: Point2): Point2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#norm-static-method","title":"norm (static method)","text":"<p>normalize</p> <p>Signature</p> <pre><code>static norm(p: Point2): Point2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#scalarmult-static-method","title":"scalarMult (static method)","text":"<p>scalar multiplication</p> <p>Signature</p> <pre><code>static scalarMult(p: Point2, m: number): Point2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#lerp-static-method","title":"lerp (static method)","text":"<p>linear interpolation</p> <p>Signature</p> <pre><code>static lerp(a: Point2, b: Point2, t: number): Point2\n</code></pre>"},{"location":"modules/core/base/math/point2.ts/#angle-static-method","title":"angle (static method)","text":"<p>angle between vectors in radians</p> <p>Signature</p> <pre><code>static angle(a: Point2, b: Point2): number\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/","title":"core/base/math/point3.ts","text":""},{"location":"modules/core/base/math/point3.ts/#point3-overview","title":"point3 overviewTable of contents","text":"<ul> <li>utils</li> <li>Pnt3 (class)<ul> <li>clone (static method)</li> <li>add (static method)</li> <li>sub (static method)</li> <li>lenSq (static method)</li> <li>len (static method)</li> <li>cross (static method)</li> <li>norm (static method)</li> <li>scalarMult (static method)</li> <li>lerp (static method)</li> <li>angle (static method)</li> <li>rot (static method)</li> <li>rotAround (static method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/math/point3.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/point3.ts/#pnt3-class","title":"Pnt3 (class)","text":"<p>Signature</p> <pre><code>export declare class Pnt3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#clone-static-method","title":"clone (static method)","text":"<p>clone point</p> <p>Signature</p> <pre><code>static clone(p: Point3): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#add-static-method","title":"add (static method)","text":"<p>add point b to point a</p> <p>Signature</p> <pre><code>static add(a: Point3, b: Point3): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#sub-static-method","title":"sub (static method)","text":"<p>subtract point b from point a</p> <p>Signature</p> <pre><code>static sub(a: Point3, b: Point3): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#lensq-static-method","title":"lenSq (static method)","text":"<p>calculate vector length (squared)</p> <p>Signature</p> <pre><code>static lenSq(v: Point3)\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#len-static-method","title":"len (static method)","text":"<p>calculate vector length</p> <p>Signature</p> <pre><code>static len(v: Point3)\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#cross-static-method","title":"cross (static method)","text":"<p>cross vectors</p> <p>Signature</p> <pre><code>static cross(a: Point3, b: Point3): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#norm-static-method","title":"norm (static method)","text":"<p>normalize</p> <p>Signature</p> <pre><code>static norm(p: Point3): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#scalarmult-static-method","title":"scalarMult (static method)","text":"<p>scalar multiplication</p> <p>Signature</p> <pre><code>static scalarMult(p: Point3, m: number): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#lerp-static-method","title":"lerp (static method)","text":"<p>linear interpolation</p> <p>Signature</p> <pre><code>static lerp(a: Point3, b: Point3, t: number): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#angle-static-method","title":"angle (static method)","text":"<p>angle between vectors in radians</p> <p>Signature</p> <pre><code>static angle(a: Point3, b: Point3): number\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#rot-static-method","title":"rot (static method)","text":"<p>rotate point a with quaternion q</p> <p>Signature</p> <pre><code>static rot(p: Point3, q: Point4): Point3\n</code></pre>"},{"location":"modules/core/base/math/point3.ts/#rotaround-static-method","title":"rotAround (static method)","text":"<p>rotate point around axis a (normalized vector)</p> <p>Signature</p> <pre><code>static rotAround(p: Point3, axis: Point3, angle: number): Point3\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/","title":"core/base/math/quaternion.ts","text":""},{"location":"modules/core/base/math/quaternion.ts/#quaternion-overview","title":"quaternion overviewTable of contents","text":"<ul> <li>utils</li> <li>Qtrn (class)<ul> <li>clone (static method)</li> <li>add (static method)</li> <li>mult (static method)</li> <li>combineRotations (static method)</li> <li>lerp (static method)</li> <li>slerp (static method)</li> <li>fromAngle (static method)</li> <li>fromMatrix4 (static method)</li> <li>fromEuler (static method)</li> <li>toEuler (static method)</li> <li>lookAt (static method)</li> <li>rotAround (static method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/math/quaternion.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/math/quaternion.ts/#qtrn-class","title":"Qtrn (class)","text":"<p>Helper class with static functions, containing util functions, related to Quaternion (represented as Point4 type). In terms of rotation, a quaternion is a mathematical representation of an orientation or rotation in 3D space. It consists of a scalar component and a vector component, and can be written as q = w + xi + yj + zk, where w is the scalar component, and i, j, and k are the vector components. The scalar component, w, represents the amount of rotation, and the vector component, (x, y, z), represents the axis of rotation. The length of the vector component represents the amount of rotation around the axis. Quaternions are often used in 3D computer graphics and animation because they can be used to interpolate between two rotations, and they can avoid some of the issues with using Euler angles (such as gimbal lock).</p> <p>Signature</p> <pre><code>export declare class Qtrn\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#clone-static-method","title":"clone (static method)","text":"<p>Returns a new quaternion instance with the same values as the given quaternion object.</p> <p>Signature</p> <pre><code>static clone(q: Point4): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#add-static-method","title":"add (static method)","text":"<p>Returns the sum of two Point4 objects.</p> <p>Signature</p> <pre><code>static add(a: Point4, b: Point4): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#mult-static-method","title":"mult (static method)","text":"<p>Returns the result of multiplying two Point4 objects. This can be used for combining rotations</p> <p>Signature</p> <pre><code>static mult(a: Point4, b: Point4): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#combinerotations-static-method","title":"combineRotations (static method)","text":"<p>Combines an arbitrary number of quaternions by multiplying them together in order.</p> <p>Signature</p> <pre><code>static combineRotations(...quaternions: Point4[]): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#lerp-static-method","title":"lerp (static method)","text":"<p>Performs a linear interpolation between two Point4 objects.</p> <p>Signature</p> <pre><code>static lerp(a: Point4, b: Point4, t: number): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#slerp-static-method","title":"slerp (static method)","text":"<p>Performs a spherical linear interpolation between two Point4 objects.</p> <p>Signature</p> <pre><code>static slerp(a: Point4, b: Point4, t: number): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#fromangle-static-method","title":"fromAngle (static method)","text":"<p>Converts an angle and an axis of rotation into a quaternion</p> <p>Signature</p> <pre><code>static fromAngle(axis: Point3, angle: number)\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#frommatrix4-static-method","title":"fromMatrix4 (static method)","text":"<p>Converts a 4x4 matrix representing a rotation into a quaternion</p> <p>Signature</p> <pre><code>static fromMatrix4(m: number[]): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#fromeuler-static-method","title":"fromEuler (static method)","text":"<p>Creates a quaternion from euler</p> <p>Signature</p> <pre><code>static fromEuler(e: Point3): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#toeuler-static-method","title":"toEuler (static method)","text":"<p>Converts a quaternion to euler</p> <p>Signature</p> <pre><code>static toEuler(q: Point4): Point3\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#lookat-static-method","title":"lookAt (static method)","text":"<p>Returns a quaternion that represents the rotation required to align an object to face towards a target point.</p> <p>Signature</p> <pre><code>static lookAt(eye: Point3, target: Point3, up: Point3): Point4\n</code></pre>"},{"location":"modules/core/base/math/quaternion.ts/#rotaround-static-method","title":"rotAround (static method)","text":"<p>Returns a quaternion that represents the input quaternion, rotated around provided axis vector by provided angle. Assumes that axis vector is already normalized</p> <p>Signature</p> <pre><code>static rotAround(q: Point4, axis: Point3, angle: number): Point4\n</code></pre>"},{"location":"modules/core/base/models/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/models/axis-directions.ts</li> <li>core/base/models/body-options.ts</li> <li>core/base/models/geometry-nodes.ts</li> <li>core/base/models/points.ts</li> </ul>"},{"location":"modules/core/base/models/axis-directions.ts/","title":"core/base/models/axis-directions.ts","text":""},{"location":"modules/core/base/models/axis-directions.ts/#axis-directions-overview","title":"axis-directions overviewTable of contents","text":"<ul> <li>utils</li> <li>AxisDirection2 (type alias)</li> <li>AxisDirection3 (type alias)</li> <li>AxisDirection4 (type alias)</li> </ul>"},{"location":"modules/core/base/models/axis-directions.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/models/axis-directions.ts/#axisdirection2-type-alias","title":"AxisDirection2 (type alias)","text":"<p>Signature</p> <pre><code>export type AxisDirection2 = 'x' | 'y' | '-x' | '-y'\n</code></pre>"},{"location":"modules/core/base/models/axis-directions.ts/#axisdirection3-type-alias","title":"AxisDirection3 (type alias)","text":"<p>Signature</p> <pre><code>export type AxisDirection3 = AxisDirection2 | 'z' | '-z'\n</code></pre>"},{"location":"modules/core/base/models/axis-directions.ts/#axisdirection4-type-alias","title":"AxisDirection4 (type alias)","text":"<p>Signature</p> <pre><code>export type AxisDirection4 = AxisDirection3 | 'w' | '-w'\n</code></pre>"},{"location":"modules/core/base/models/body-options.ts/","title":"core/base/models/body-options.ts","text":""},{"location":"modules/core/base/models/body-options.ts/#body-options-overview","title":"body-options overviewTable of contents","text":"<ul> <li>utils</li> <li>BodyOptions (interface)</li> </ul>"},{"location":"modules/core/base/models/body-options.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/models/body-options.ts/#bodyoptions-interface","title":"BodyOptions (interface)","text":"<p>Signature</p> <pre><code>export interface BodyOptions {\n  dynamic: boolean\n  mass: number\n  restitution: number\n  friction: number\n}\n</code></pre>"},{"location":"modules/core/base/models/geometry-nodes.ts/","title":"core/base/models/geometry-nodes.ts","text":""},{"location":"modules/core/base/models/geometry-nodes.ts/#geometry-nodes-overview","title":"geometry-nodes overviewTable of contents","text":"<ul> <li>utils</li> <li>GgBox (type alias)</li> <li>GgBox2d (type alias)</li> <li>GgBox3d (type alias)</li> </ul>"},{"location":"modules/core/base/models/geometry-nodes.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/models/geometry-nodes.ts/#ggbox-type-alias","title":"GgBox (type alias)","text":"<p>Signature</p> <pre><code>export type GgBox&lt;T&gt; = { min: T; max: T }\n</code></pre>"},{"location":"modules/core/base/models/geometry-nodes.ts/#ggbox2d-type-alias","title":"GgBox2d (type alias)","text":"<p>Signature</p> <pre><code>export type GgBox2d = GgBox&lt;Point2&gt;\n</code></pre>"},{"location":"modules/core/base/models/geometry-nodes.ts/#ggbox3d-type-alias","title":"GgBox3d (type alias)","text":"<p>Signature</p> <pre><code>export type GgBox3d = GgBox&lt;Point3&gt;\n</code></pre>"},{"location":"modules/core/base/models/points.ts/","title":"core/base/models/points.ts","text":""},{"location":"modules/core/base/models/points.ts/#points-overview","title":"points overviewTable of contents","text":"<ul> <li>utils</li> <li>Point2 (type alias)</li> <li>Point3 (type alias)</li> <li>Point4 (type alias)</li> </ul>"},{"location":"modules/core/base/models/points.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/models/points.ts/#point2-type-alias","title":"Point2 (type alias)","text":"<p>Signature</p> <pre><code>export type Point2 = { readonly x: number; readonly y: number }\n</code></pre>"},{"location":"modules/core/base/models/points.ts/#point3-type-alias","title":"Point3 (type alias)","text":"<p>Signature</p> <pre><code>export type Point3 = { readonly x: number; readonly y: number; readonly z: number }\n</code></pre>"},{"location":"modules/core/base/models/points.ts/#point4-type-alias","title":"Point4 (type alias)","text":"<p>Signature</p> <pre><code>export type Point4 = { readonly x: number; readonly y: number; readonly z: number; readonly w: number }\n</code></pre>"},{"location":"modules/core/base/ui/","title":"Modules","text":"Directory table of contents <ul> <li>core/base/ui/gg-console.ui.ts</li> <li>core/base/ui/gg-debugger.ui.ts</li> </ul>"},{"location":"modules/core/base/ui/gg-console.ui.ts/","title":"core/base/ui/gg-console.ui.ts","text":""},{"location":"modules/core/base/ui/gg-console.ui.ts/#gg-consoleui-overview","title":"gg-console.ui overviewTable of contents","text":"<ul> <li>utils</li> <li>GgConsoleUI (class)<ul> <li>createUI (method)</li> <li>destroyUI (method)</li> <li>onUsePreviousCommand (method)</li> <li>onUseNextCommand (method)</li> <li>onInput (method)</li> <li>stdout (method)</li> <li>setupDragging (method)</li> <li>elements (property)</li> </ul> </li> </ul>"},{"location":"modules/core/base/ui/gg-console.ui.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/ui/gg-console.ui.ts/#ggconsoleui-class","title":"GgConsoleUI (class)","text":"<p>Signature</p> <pre><code>export declare class GgConsoleUI {\n  private constructor()\n}\n</code></pre>"},{"location":"modules/core/base/ui/gg-console.ui.ts/#createui-method","title":"createUI (method)","text":"<p>Signature</p> <pre><code>public createUI()\n</code></pre>"},{"location":"modules/core/base/ui/gg-console.ui.ts/#destroyui-method","title":"destroyUI (method)","text":"<p>Signature</p> <pre><code>public destroyUI()\n</code></pre>"},{"location":"modules/core/base/ui/gg-console.ui.ts/#onusepreviouscommand-method","title":"onUsePreviousCommand (method)","text":"<p>Signature</p> <pre><code>onUsePreviousCommand()\n</code></pre>"},{"location":"modules/core/base/ui/gg-console.ui.ts/#onusenextcommand-method","title":"onUseNextCommand (method)","text":"<p>Signature</p> <pre><code>onUseNextCommand()\n</code></pre>"},{"location":"modules/core/base/ui/gg-console.ui.ts/#oninput-method","title":"onInput (method)","text":"<p>Signature</p> <pre><code>async onInput()\n</code></pre>"},{"location":"modules/core/base/ui/gg-console.ui.ts/#stdout-method","title":"stdout (method)","text":"<p>Signature</p> <pre><code>private stdout(s: string = ''): void\n</code></pre>"},{"location":"modules/core/base/ui/gg-console.ui.ts/#setupdragging-method","title":"setupDragging (method)","text":"<p>Signature</p> <pre><code>setupDragging()\n</code></pre>"},{"location":"modules/core/base/ui/gg-console.ui.ts/#elements-property","title":"elements (property)","text":"<p>Signature</p> <pre><code>elements: { main: HTMLDivElement; input: HTMLInputElement; output: HTMLTextAreaElement; } | null\n</code></pre>"},{"location":"modules/core/base/ui/gg-debugger.ui.ts/","title":"core/base/ui/gg-debugger.ui.ts","text":""},{"location":"modules/core/base/ui/gg-debugger.ui.ts/#gg-debuggerui-overview","title":"gg-debugger.ui overviewTable of contents","text":"<ul> <li>utils</li> <li>GgDebuggerUI (class)<ul> <li>createUI (method)</li> <li>destroyUI (method)</li> </ul> </li> </ul>"},{"location":"modules/core/base/ui/gg-debugger.ui.ts/#utils","title":"utils","text":""},{"location":"modules/core/base/ui/gg-debugger.ui.ts/#ggdebuggerui-class","title":"GgDebuggerUI (class)","text":"<p>Signature</p> <pre><code>export declare class GgDebuggerUI {\n  private constructor()\n}\n</code></pre>"},{"location":"modules/core/base/ui/gg-debugger.ui.ts/#createui-method","title":"createUI (method)","text":"<p>Signature</p> <pre><code>public createUI()\n</code></pre>"},{"location":"modules/core/base/ui/gg-debugger.ui.ts/#destroyui-method","title":"destroyUI (method)","text":"<p>Signature</p> <pre><code>public destroyUI()\n</code></pre>"},{"location":"modules/matter/","title":"Modules","text":"Directory table of contents <ul> <li>matter/impl</li> </ul>"},{"location":"modules/matter/impl/","title":"Modules","text":"Directory table of contents <ul> <li>matter/impl/gg-2d-body-factory.ts</li> <li>matter/impl/gg-2d-body.ts</li> <li>matter/impl/gg-2d-physics-world.ts</li> </ul>"},{"location":"modules/matter/impl/gg-2d-body-factory.ts/","title":"matter/impl/gg-2d-body-factory.ts","text":""},{"location":"modules/matter/impl/gg-2d-body-factory.ts/#gg-2d-body-factory-overview","title":"gg-2d-body-factory overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dBodyFactory (class)<ul> <li>createRigidBody (method)</li> <li>createTrigger (method)</li> <li>transformOptions (method)</li> </ul> </li> </ul>"},{"location":"modules/matter/impl/gg-2d-body-factory.ts/#utils","title":"utils","text":""},{"location":"modules/matter/impl/gg-2d-body-factory.ts/#gg2dbodyfactory-class","title":"Gg2dBodyFactory (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dBodyFactory\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body-factory.ts/#createrigidbody-method","title":"createRigidBody (method)","text":"<p>Signature</p> <pre><code>createRigidBody(\n    descriptor: BodyShape2DDescriptor,\n    transform?: {\n      position?: Point2;\n      rotation?: number;\n    },\n  ): Gg2dBody\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body-factory.ts/#createtrigger-method","title":"createTrigger (method)","text":"<p>Signature</p> <pre><code>createTrigger(\n    descriptor: Shape2DDescriptor,\n    transform?: {\n      position?: Point2;\n      rotation?: number;\n    },\n  ): any\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body-factory.ts/#transformoptions-method","title":"transformOptions (method)","text":"<p>Signature</p> <pre><code>private transformOptions(options: Partial&lt;Body2DOptions&gt;): IBodyDefinition\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body.ts/","title":"matter/impl/gg-2d-body.ts","text":""},{"location":"modules/matter/impl/gg-2d-body.ts/#gg-2d-body-overview","title":"gg-2d-body overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dBody (class)<ul> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>dispose (method)</li> <li>resetMotion (method)</li> <li>name (property)</li> <li>entity (property)</li> </ul> </li> </ul>"},{"location":"modules/matter/impl/gg-2d-body.ts/#utils","title":"utils","text":""},{"location":"modules/matter/impl/gg-2d-body.ts/#gg2dbody-class","title":"Gg2dBody (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dBody {\n  constructor(public nativeBody: Body)\n}\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): Gg2dBody\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg2dPhysicsWorld): void\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg2dPhysicsWorld): void\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body.ts/#resetmotion-method","title":"resetMotion (method)","text":"<p>Signature</p> <pre><code>resetMotion(): void\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body.ts/#name-property","title":"name (property)","text":"<p>Signature</p> <pre><code>name: string\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-body.ts/#entity-property","title":"entity (property)","text":"<p>Signature</p> <pre><code>entity: any\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-physics-world.ts/","title":"matter/impl/gg-2d-physics-world.ts","text":""},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#gg-2d-physics-world-overview","title":"gg-2d-physics-world overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dPhysicsWorld (class)<ul> <li>init (method)</li> <li>simulate (method)</li> <li>startDebugger (method)</li> <li>stopDebugger (method)</li> <li>dispose (method)</li> <li>matterEngine (property)</li> <li>factory (property)</li> </ul> </li> </ul>"},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#utils","title":"utils","text":""},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#gg2dphysicsworld-class","title":"Gg2dPhysicsWorld (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dPhysicsWorld\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#init-method","title":"init (method)","text":"<p>Signature</p> <pre><code>async init(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#simulate-method","title":"simulate (method)","text":"<p>Signature</p> <pre><code>simulate(delta: number): void\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#startdebugger-method","title":"startDebugger (method)","text":"<p>Signature</p> <pre><code>startDebugger(world: Gg2dWorld, drawer: GgDebugPhysicsDrawer&lt;Point2, number&gt;): void\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#stopdebugger-method","title":"stopDebugger (method)","text":"<p>Signature</p> <pre><code>stopDebugger(): void\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#matterengine-property","title":"matterEngine (property)","text":"<p>Signature</p> <pre><code>matterEngine: any\n</code></pre>"},{"location":"modules/matter/impl/gg-2d-physics-world.ts/#factory-property","title":"factory (property)","text":"<p>Signature</p> <pre><code>readonly factory: Gg2dBodyFactory\n</code></pre>"},{"location":"modules/pixi/","title":"Modules","text":"Directory table of contents <ul> <li>pixi/impl</li> </ul>"},{"location":"modules/pixi/impl/","title":"Modules","text":"Directory table of contents <ul> <li>pixi/impl/gg-2d-object-factory.ts</li> <li>pixi/impl/gg-2d-object.ts</li> <li>pixi/impl/gg-2d-visual-scene.ts</li> <li>pixi/impl/gg-renderer.ts</li> </ul>"},{"location":"modules/pixi/impl/gg-2d-object-factory.ts/","title":"pixi/impl/gg-2d-object-factory.ts","text":""},{"location":"modules/pixi/impl/gg-2d-object-factory.ts/#gg-2d-object-factory-overview","title":"gg-2d-object-factory overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dObjectFactory (class)<ul> <li>getRandomColor (method)</li> <li>createPrimitive (method)</li> </ul> </li> </ul>"},{"location":"modules/pixi/impl/gg-2d-object-factory.ts/#utils","title":"utils","text":""},{"location":"modules/pixi/impl/gg-2d-object-factory.ts/#gg2dobjectfactory-class","title":"Gg2dObjectFactory (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dObjectFactory\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object-factory.ts/#getrandomcolor-method","title":"getRandomColor (method)","text":"<p>Signature</p> <pre><code>getRandomColor(): number\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object-factory.ts/#createprimitive-method","title":"createPrimitive (method)","text":"<p>Signature</p> <pre><code>createPrimitive(descriptor: Shape2DDescriptor, texture: Texture | null = null): Gg2dObject\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object.ts/","title":"pixi/impl/gg-2d-object.ts","text":""},{"location":"modules/pixi/impl/gg-2d-object.ts/#gg-2d-object-overview","title":"gg-2d-object overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dObject (class)<ul> <li>isEmpty (method)</li> <li>popChild (method)</li> <li>getBoundings (method)</li> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>dispose (method)</li> <li>name (property)</li> </ul> </li> </ul>"},{"location":"modules/pixi/impl/gg-2d-object.ts/#utils","title":"utils","text":""},{"location":"modules/pixi/impl/gg-2d-object.ts/#gg2dobject-class","title":"Gg2dObject (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dObject {\n  constructor(public nativeSprite: DisplayObject)\n}\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object.ts/#isempty-method","title":"isEmpty (method)","text":"<p>Signature</p> <pre><code>public isEmpty(): boolean\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object.ts/#popchild-method","title":"popChild (method)","text":"<p>Signature</p> <pre><code>popChild(name: string): Gg2dObject | null\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object.ts/#getboundings-method","title":"getBoundings (method)","text":"<p>Signature</p> <pre><code>getBoundings(): GgBox2d\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): Gg2dObject\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg2dVisualScene): void\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg2dVisualScene): void\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-object.ts/#name-property","title":"name (property)","text":"<p>Signature</p> <pre><code>name: string\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-visual-scene.ts/","title":"pixi/impl/gg-2d-visual-scene.ts","text":""},{"location":"modules/pixi/impl/gg-2d-visual-scene.ts/#gg-2d-visual-scene-overview","title":"gg-2d-visual-scene overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg2dVisualScene (class)<ul> <li>init (method)</li> <li>dispose (method)</li> <li>factory (property)</li> </ul> </li> </ul>"},{"location":"modules/pixi/impl/gg-2d-visual-scene.ts/#utils","title":"utils","text":""},{"location":"modules/pixi/impl/gg-2d-visual-scene.ts/#gg2dvisualscene-class","title":"Gg2dVisualScene (class)","text":"<p>Signature</p> <pre><code>export declare class Gg2dVisualScene\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-visual-scene.ts/#init-method","title":"init (method)","text":"<p>Signature</p> <pre><code>async init(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-visual-scene.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/pixi/impl/gg-2d-visual-scene.ts/#factory-property","title":"factory (property)","text":"<p>Signature</p> <pre><code>readonly factory: Gg2dObjectFactory\n</code></pre>"},{"location":"modules/pixi/impl/gg-renderer.ts/","title":"pixi/impl/gg-renderer.ts","text":""},{"location":"modules/pixi/impl/gg-renderer.ts/#gg-renderer-overview","title":"gg-renderer overviewTable of contents","text":"<ul> <li>utils</li> <li>GgRenderer (class)<ul> <li>resizeRenderer (method)</li> <li>onSpawned (method)</li> <li>onRemoved (method)</li> <li>render (method)</li> <li>dispose (method)</li> <li>application (property)</li> </ul> </li> </ul>"},{"location":"modules/pixi/impl/gg-renderer.ts/#utils","title":"utils","text":""},{"location":"modules/pixi/impl/gg-renderer.ts/#ggrenderer-class","title":"GgRenderer (class)","text":"<p>Signature</p> <pre><code>export declare class GgRenderer {\n  constructor(canvas?: HTMLCanvasElement, rendererOptions: Partial&lt;RendererOptions&gt; = {})\n}\n</code></pre>"},{"location":"modules/pixi/impl/gg-renderer.ts/#resizerenderer-method","title":"resizeRenderer (method)","text":"<p>Signature</p> <pre><code>resizeRenderer(newSize: Point2): void\n</code></pre>"},{"location":"modules/pixi/impl/gg-renderer.ts/#onspawned-method","title":"onSpawned (method)","text":"<p>Signature</p> <pre><code>public onSpawned(world: Gg2dWorld)\n</code></pre>"},{"location":"modules/pixi/impl/gg-renderer.ts/#onremoved-method","title":"onRemoved (method)","text":"<p>Signature</p> <pre><code>public onRemoved()\n</code></pre>"},{"location":"modules/pixi/impl/gg-renderer.ts/#render-method","title":"render (method)","text":"<p>Signature</p> <pre><code>render(): void\n</code></pre>"},{"location":"modules/pixi/impl/gg-renderer.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/pixi/impl/gg-renderer.ts/#application-property","title":"application (property)","text":"<p>Signature</p> <pre><code>readonly application: any\n</code></pre>"},{"location":"modules/three/","title":"Modules","text":"Directory table of contents <ul> <li>three/impl</li> <li>three/three-physics-drawer.ts</li> </ul>"},{"location":"modules/three/three-physics-drawer.ts/","title":"three/three-physics-drawer.ts","text":""},{"location":"modules/three/three-physics-drawer.ts/#three-physics-drawer-overview","title":"three-physics-drawer overviewTable of contents","text":"<ul> <li>utils</li> <li>ThreePhysicsDrawer (class)<ul> <li>drawContactPoint (method)</li> <li>drawLine (method)</li> <li>update (method)</li> <li>setXYZ (method)</li> <li>debugBufferSize (property)</li> <li>debugVertices (property)</li> <li>debugColors (property)</li> </ul> </li> </ul>"},{"location":"modules/three/three-physics-drawer.ts/#utils","title":"utils","text":""},{"location":"modules/three/three-physics-drawer.ts/#threephysicsdrawer-class","title":"ThreePhysicsDrawer (class)","text":"<p>Signature</p> <pre><code>export declare class ThreePhysicsDrawer {\n  constructor()\n}\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#drawcontactpoint-method","title":"drawContactPoint (method)","text":"<p>Signature</p> <pre><code>drawContactPoint(point: Point3, normal: Point3, color?: Point3): void\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#drawline-method","title":"drawLine (method)","text":"<p>Signature</p> <pre><code>drawLine(from: Point3, to: Point3, color?: Point3): void\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#update-method","title":"update (method)","text":"<p>Signature</p> <pre><code>update()\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#setxyz-method","title":"setXYZ (method)","text":"<p>Signature</p> <pre><code>private setXYZ(array: Float32Array, index: number, x: number, y: number, z: number)\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#debugbuffersize-property","title":"debugBufferSize (property)","text":"<p>Signature</p> <pre><code>readonly debugBufferSize: number\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#debugvertices-property","title":"debugVertices (property)","text":"<p>Signature</p> <pre><code>readonly debugVertices: Float32Array\n</code></pre>"},{"location":"modules/three/three-physics-drawer.ts/#debugcolors-property","title":"debugColors (property)","text":"<p>Signature</p> <pre><code>readonly debugColors: Float32Array\n</code></pre>"},{"location":"modules/three/impl/","title":"Modules","text":"Directory table of contents <ul> <li>three/impl/gg-3d-object-factory.ts</li> <li>three/impl/gg-3d-object-loader.ts</li> <li>three/impl/gg-3d-object.ts</li> <li>three/impl/gg-3d-visual-scene.ts</li> <li>three/impl/gg-renderer.ts</li> <li>three/impl/three-camera.entity.ts</li> <li>three/impl/three-camera.ts</li> </ul>"},{"location":"modules/three/impl/gg-3d-object-factory.ts/","title":"three/impl/gg-3d-object-factory.ts","text":""},{"location":"modules/three/impl/gg-3d-object-factory.ts/#gg-3d-object-factory-overview","title":"gg-3d-object-factory overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dObjectFactory (class)<ul> <li>getRandomMaterial (method)</li> <li>transformPrimitiveZUp (method)</li> <li>createPrimitive (method)</li> </ul> </li> </ul>"},{"location":"modules/three/impl/gg-3d-object-factory.ts/#utils","title":"utils","text":""},{"location":"modules/three/impl/gg-3d-object-factory.ts/#gg3dobjectfactory-class","title":"Gg3dObjectFactory (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dObjectFactory\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object-factory.ts/#getrandommaterial-method","title":"getRandomMaterial (method)","text":"<p>Signature</p> <pre><code>getRandomMaterial(): Material\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object-factory.ts/#transformprimitivezup-method","title":"transformPrimitiveZUp (method)","text":"<p>Signature</p> <pre><code>private transformPrimitiveZUp(object: Object3D): Group\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object-factory.ts/#createprimitive-method","title":"createPrimitive (method)","text":"<p>Signature</p> <pre><code>createPrimitive(descriptor: Shape3DDescriptor, material: Material = this.getRandomMaterial()): Gg3dObject\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object-loader.ts/","title":"three/impl/gg-3d-object-loader.ts","text":""},{"location":"modules/three/impl/gg-3d-object-loader.ts/#gg-3d-object-loader-overview","title":"gg-3d-object-loader overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dObjectLoader (class)<ul> <li>registerGltfLoaderAddon (method)</li> <li>loadFromGgGlb (method)</li> </ul> </li> </ul>"},{"location":"modules/three/impl/gg-3d-object-loader.ts/#utils","title":"utils","text":""},{"location":"modules/three/impl/gg-3d-object-loader.ts/#gg3dobjectloader-class","title":"Gg3dObjectLoader (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dObjectLoader\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object-loader.ts/#registergltfloaderaddon-method","title":"registerGltfLoaderAddon (method)","text":"<p>Signature</p> <pre><code>public registerGltfLoaderAddon(gltf: any): void\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object-loader.ts/#loadfromggglb-method","title":"loadFromGgGlb (method)","text":"<p>Signature</p> <pre><code>public async loadFromGgGlb(glbFile: ArrayBuffer, meta: GgMeta): Promise&lt;Gg3dObject | null&gt;\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/","title":"three/impl/gg-3d-object.ts","text":""},{"location":"modules/three/impl/gg-3d-object.ts/#gg-3d-object-overview","title":"gg-3d-object overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dObject (class)<ul> <li>isEmpty (method)</li> <li>popChild (method)</li> <li>getBoundings (method)</li> <li>clone (method)</li> <li>addToWorld (method)</li> <li>removeFromWorld (method)</li> <li>dispose (method)</li> <li>disposeMesh (method)</li> <li>name (property)</li> </ul> </li> </ul>"},{"location":"modules/three/impl/gg-3d-object.ts/#utils","title":"utils","text":""},{"location":"modules/three/impl/gg-3d-object.ts/#gg3dobject-class","title":"Gg3dObject (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dObject {\n  constructor(public nativeMesh: Object3D)\n}\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/#isempty-method","title":"isEmpty (method)","text":"<p>Signature</p> <pre><code>public isEmpty(): boolean\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/#popchild-method","title":"popChild (method)","text":"<p>Signature</p> <pre><code>popChild(name: string): Gg3dObject | null\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/#getboundings-method","title":"getBoundings (method)","text":"<p>Signature</p> <pre><code>getBoundings(): GgBox3d\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/#clone-method","title":"clone (method)","text":"<p>Signature</p> <pre><code>clone(): Gg3dObject\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/#addtoworld-method","title":"addToWorld (method)","text":"<p>Signature</p> <pre><code>addToWorld(world: Gg3dVisualScene): void\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/#removefromworld-method","title":"removeFromWorld (method)","text":"<p>Signature</p> <pre><code>removeFromWorld(world: Gg3dVisualScene): void\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/#disposemesh-method","title":"disposeMesh (method)","text":"<p>Signature</p> <pre><code>private disposeMesh(mesh: Mesh)\n</code></pre>"},{"location":"modules/three/impl/gg-3d-object.ts/#name-property","title":"name (property)","text":"<p>Signature</p> <pre><code>name: string\n</code></pre>"},{"location":"modules/three/impl/gg-3d-visual-scene.ts/","title":"three/impl/gg-3d-visual-scene.ts","text":""},{"location":"modules/three/impl/gg-3d-visual-scene.ts/#gg-3d-visual-scene-overview","title":"gg-3d-visual-scene overviewTable of contents","text":"<ul> <li>utils</li> <li>Gg3dVisualScene (class)<ul> <li>init (method)</li> <li>dispose (method)</li> <li>factory (property)</li> <li>loader (property)</li> <li>debugPhysicsDrawerClass (property)</li> </ul> </li> </ul>"},{"location":"modules/three/impl/gg-3d-visual-scene.ts/#utils","title":"utils","text":""},{"location":"modules/three/impl/gg-3d-visual-scene.ts/#gg3dvisualscene-class","title":"Gg3dVisualScene (class)","text":"<p>Signature</p> <pre><code>export declare class Gg3dVisualScene\n</code></pre>"},{"location":"modules/three/impl/gg-3d-visual-scene.ts/#init-method","title":"init (method)","text":"<p>Signature</p> <pre><code>async init(): Promise&lt;void&gt;\n</code></pre>"},{"location":"modules/three/impl/gg-3d-visual-scene.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/three/impl/gg-3d-visual-scene.ts/#factory-property","title":"factory (property)","text":"<p>Signature</p> <pre><code>readonly factory: Gg3dObjectFactory\n</code></pre>"},{"location":"modules/three/impl/gg-3d-visual-scene.ts/#loader-property","title":"loader (property)","text":"<p>Signature</p> <pre><code>readonly loader: Gg3dObjectLoader\n</code></pre>"},{"location":"modules/three/impl/gg-3d-visual-scene.ts/#debugphysicsdrawerclass-property","title":"debugPhysicsDrawerClass (property)","text":"<p>Signature</p> <pre><code>readonly debugPhysicsDrawerClass: typeof ThreePhysicsDrawer\n</code></pre>"},{"location":"modules/three/impl/gg-renderer.ts/","title":"three/impl/gg-renderer.ts","text":""},{"location":"modules/three/impl/gg-renderer.ts/#gg-renderer-overview","title":"gg-renderer overviewTable of contents","text":"<ul> <li>utils</li> <li>GgRenderer (class)<ul> <li>resizeRenderer (method)</li> <li>render (method)</li> <li>dispose (method)</li> <li>renderer (property)</li> </ul> </li> </ul>"},{"location":"modules/three/impl/gg-renderer.ts/#utils","title":"utils","text":""},{"location":"modules/three/impl/gg-renderer.ts/#ggrenderer-class","title":"GgRenderer (class)","text":"<p>Signature</p> <pre><code>export declare class GgRenderer {\n  constructor(\n    public readonly canvas?: HTMLCanvasElement,\n    rendererOptions: Partial&lt;RendererOptions&gt; = {},\n    public camera: ThreeCameraEntity = new ThreeCameraEntity(new ThreeCamera(new PerspectiveCamera(75, 1, 1, 10000)))\n  )\n}\n</code></pre>"},{"location":"modules/three/impl/gg-renderer.ts/#resizerenderer-method","title":"resizeRenderer (method)","text":"<p>Signature</p> <pre><code>resizeRenderer(newSize: Point2): void\n</code></pre>"},{"location":"modules/three/impl/gg-renderer.ts/#render-method","title":"render (method)","text":"<p>Signature</p> <pre><code>render(): void\n</code></pre>"},{"location":"modules/three/impl/gg-renderer.ts/#dispose-method","title":"dispose (method)","text":"<p>Signature</p> <pre><code>dispose(): void\n</code></pre>"},{"location":"modules/three/impl/gg-renderer.ts/#renderer-property","title":"renderer (property)","text":"<p>Signature</p> <pre><code>readonly renderer: any\n</code></pre>"},{"location":"modules/three/impl/three-camera.entity.ts/","title":"three/impl/three-camera.entity.ts","text":""},{"location":"modules/three/impl/three-camera.entity.ts/#three-cameraentity-overview","title":"three-camera.entity overviewTable of contents","text":"<ul> <li>utils</li> <li>ThreeCameraEntity (class)</li> </ul>"},{"location":"modules/three/impl/three-camera.entity.ts/#utils","title":"utils","text":""},{"location":"modules/three/impl/three-camera.entity.ts/#threecameraentity-class","title":"ThreeCameraEntity (class)","text":"<p>Signature</p> <pre><code>export declare class ThreeCameraEntity\n</code></pre>"},{"location":"modules/three/impl/three-camera.ts/","title":"three/impl/three-camera.ts","text":""},{"location":"modules/three/impl/three-camera.ts/#three-camera-overview","title":"three-camera overviewTable of contents","text":"<ul> <li>utils</li> <li>ThreeCamera (class)</li> </ul>"},{"location":"modules/three/impl/three-camera.ts/#utils","title":"utils","text":""},{"location":"modules/three/impl/three-camera.ts/#threecamera-class","title":"ThreeCamera (class)","text":"<p>Signature</p> <pre><code>export declare class ThreeCamera {\n  constructor(public readonly nativeCamera: Camera)\n}\n</code></pre>"}]}